import re
import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CommandHandler, CallbackQueryHandler, ConversationHandler,
    MessageHandler, filters, ContextTypes
)
from modules.config import ADMIN_ID, DB_NAME


# === –°—Ç–∞–Ω ===
(
    STEP_MENU,
    STEP_CLIENT_CARD,
    STEP_PROVIDER,
    STEP_PAYMENT,
    STEP_CONFIRM_FILE,
    STEP_CONFIRMATION,
    STEP_REG_NAME,
    STEP_REG_PHONE,
    STEP_REG_CODE,
) = range(9)


PROVIDERS = ["üèÜ CHAMPION", "üé∞ SUPEROMATIC"]
PAYMENTS = ["–ö–∞—Ä—Ç–∞", "–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑"]

def setup_handlers(application):
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
       states={
    STEP_MENU: [CallbackQueryHandler(menu_handler)],
    # ‚Ä¶ –≤–∞—à—ñ —ñ—Å–Ω—É—é—á—ñ —Å—Ç–∞–Ω–∏ ‚Ä¶
    STEP_CONFIRMATION: [CallbackQueryHandler(confirm_submission)],

    # –û—Å—å —Å—é–¥–∏ –≤—Å—Ç–∞–≤–ª—è—î–º–æ:
    STEP_REG_NAME: [
        MessageHandler(filters.TEXT & ~filters.COMMAND, register_name),
        CallbackQueryHandler(menu_handler, pattern="^(back|home)$")
    ],
    STEP_REG_PHONE: [
        MessageHandler(filters.TEXT & ~filters.COMMAND, register_phone),
        CallbackQueryHandler(menu_handler, pattern="^(back|home)$")
    ],
    STEP_REG_CODE: [
        MessageHandler(filters.TEXT & ~filters.COMMAND, register_code),
        CallbackQueryHandler(menu_handler, pattern="^(back|home)$")
    ],
},

            STEP_MENU: [CallbackQueryHandler(menu_handler)],
            STEP_CLIENT_CARD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_card)],
            STEP_PROVIDER: [CallbackQueryHandler(process_provider)],
            STEP_PAYMENT: [CallbackQueryHandler(process_payment)],
            STEP_CONFIRM_FILE: [MessageHandler(filters.Document.ALL | filters.PHOTO | filters.VIDEO, process_file)],
            STEP_CONFIRMATION: [CallbackQueryHandler(confirm_submission)],
        },async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    context.user_data["reg_name"] = name
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—Ñ–æ—Ä–º–∞—Ç: 0XXXXXXXXX):",
        reply_markup=nav_buttons()
    )
    return STEP_REG_PHONE

async def register_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not re.fullmatch(r"0\d{9}", phone):
        await update.message.reply_text(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=nav_buttons()
        )
        return STEP_REG_PHONE

    context.user_data["reg_phone"] = phone

    # –ü–µ—Ä–µ—Å–∏–ª–∫–∞ –∞–¥–º—ñ–Ω—É
    name = context.user_data["reg_name"]
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"–ù–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:\nüë§ –Ü–º'—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )

    # –ó–∞–ø–∏—Å —É –ë–î
    with sqlite3.connect(DB_NAME) as conn:
        cur = conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS registrations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                name TEXT,
                phone TEXT,
                status TEXT DEFAULT 'pending',
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        cur.execute(
            "INSERT INTO registrations (user_id, name, phone) VALUES (?, ?, ?)",
            (update.effective_user.id, name, phone)
        )
        conn.commit()

    await update.message.reply_text(
        "–î—è–∫—É—î–º–æ! –ß–µ–∫–∞–π—Ç–µ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å 4-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥:",
        reply_markup=nav_buttons()
    )
    return STEP_REG_CODE

async def register_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if not re.fullmatch(r"\d{4}", code):
        await update.message.reply_text(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, 4 —Ü–∏—Ñ—Ä–∏:",
            reply_markup=nav_buttons()
        )
        return STEP_REG_CODE

    # –ü–µ—Ä–µ—Å–∏–ª–∫–∞ –∞–¥–º—ñ–Ω—É –∫–æ–¥—É
    name = context.user_data["reg_name"]
    user = update.effective_user
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ {name} ({user.id}): {code}"
    )

    # –í—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ ‚Äî –∫–Ω–æ–ø–∫–∞ ‚Äú–ü–æ–ø–æ–≤–Ω–∏—Ç–∏‚Äù
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏", callback_data="deposit")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]
    ])
    await update.message.reply_text(
        "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!",
        reply_markup=keyboard
    )
    return STEP_MENU

        fallbacks=[CommandHandler("start", start)]
    )
    application.add_handler(conv)

def nav_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üé≤ –Ø –ö–ª—ñ—î–Ω—Ç", callback_data="client")],
        [InlineKeyboardButton("üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", callback_data="register")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏", callback_data="deposit")],
        [InlineKeyboardButton("üí∏ –í–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤", callback_data="withdraw")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ]
    user = update.effective_user
    if user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üõ† –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    text = "–í—ñ—Ç–∞—î–º–æ —É Casino Club Telegram Bot! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        await update.callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return STEP_MENU

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "admin_panel":
        keyboard = [
            [InlineKeyboardButton("üí∞ –£—Å—ñ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", callback_data="admin_deposits")],
            [InlineKeyboardButton("üë§ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users")],
            [InlineKeyboardButton("üìÑ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è", callback_data="admin_withdrawals")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]
        ]
        await query.message.reply_text("–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
        return STEP_MENU

    if query.data == "admin_deposits":
        with sqlite3.connect(DB_NAME) as conn:
            cur = conn.cursor()
            cur.execute("SELECT username, card, provider, payment, timestamp FROM deposits ORDER BY timestamp DESC LIMIT 10")
            rows = cur.fetchall()
        if not rows:
            await query.message.reply_text("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        else:
            text = "\n\n".join([
                f"üë§ {r[0] or '‚Äî'}\n–ö–∞—Ä—Ç–∫–∞: {r[1]}\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {r[2]}\n–û–ø–ª–∞—Ç–∞: {r[3]}\nüïí {r[4]}"
                for r in rows
            ])
            await query.message.reply_text(f"–û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:\n\n{text}")
        return STEP_MENU

    if query.data == "admin_users":
        with sqlite3.connect(DB_NAME) as conn:
            cur = conn.cursor()
            cur.execute("SELECT name, phone, status FROM registrations ORDER BY id DESC LIMIT 10")
            rows = cur.fetchall()
        if not rows:
            await query.message.reply_text("–ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        else:
            text = "\n\n".join([
                f"üë§ –Ü–º‚Äô—è: {r[0]}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {r[1]}\n–°—Ç–∞—Ç—É—Å: {r[2]}"
                for r in rows
            ])
            await query.message.reply_text(f"–û—Å—Ç–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n\n{text}")
        return STEP_MENU

    if query.data == "admin_withdrawals":
        with sqlite3.connect(DB_NAME) as conn:
            cur = conn.cursor()
            cur.execute("""CREATE TABLE IF NOT EXISTS withdrawals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                amount TEXT,
                method TEXT,
                details TEXT,
                source_code TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )""")
            cur.execute("SELECT username, amount, method, details, source_code, timestamp FROM withdrawals ORDER BY id DESC LIMIT 10")
            rows = cur.fetchall()
        if not rows:
            await query.message.reply_text("–ó–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–µ–º–∞—î.")
        else:
            text = "\n\n".join([
                f"üë§ {r[0] or '‚Äî'}\nüí∏ –°—É–º–∞: {r[1]}\nüí≥ –ú–µ—Ç–æ–¥: {r[2]}\nüì• –†–µ–∫–≤—ñ–∑–∏—Ç–∏: {r[3]}\nüî¢ –ö–æ–¥: {r[4]}\nüïí {r[5]}"
                for r in rows
            ])
            await query.message.reply_text(f"–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:\n\n{text}")
        return STEP_MENU

    if query.data == "admin_stats":
        with sqlite3.connect(DB_NAME) as conn:
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) FROM registrations")
            users = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM deposits")
            deposits = cur.fetchone()[0]
            cur.execute("SELECT COUNT(*) FROM withdrawals")
            withdrawals = cur.fetchone()[0]
        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {users}\nüí∞ –ü–æ–ø–æ–≤–Ω–µ–Ω—å: {deposits}\nüìÑ –í–∏–≤–µ–¥–µ–Ω—å: {withdrawals}"
        await query.message.reply_text(text)
        return STEP_MENU

    if query.data == "client":
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∫–ª—É–±—É:", reply_markup=nav_buttons())
        return STEP_CLIENT_CARD

    if query.data in ("back", "home"):
        return await start(update, context)

    await query.message.reply_text("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.", reply_markup=nav_buttons())
    return STEP_MENU

async def process_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card = update.message.text.strip()
    if not re.fullmatch(r"\d{4,5}", card):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏.", reply_markup=nav_buttons())
        return STEP_CLIENT_CARD

    context.user_data["card"] = card

    keyboard = [[InlineKeyboardButton(p, callback_data=p)] for p in PROVIDERS]
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")
    ])
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    return STEP_PROVIDER

async def process_provider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data in ("back", "home"):
        return await menu_handler(update, context)

    context.user_data["provider"] = data
    keyboard = [[InlineKeyboardButton(p, callback_data=p)] for p in PAYMENTS]
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")
    ])
    await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    return STEP_PAYMENT

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data in ("back", "home"):
        return await menu_handler(update, context)

    context.user_data["payment"] = data
    await query.message.reply_text(
        "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–≤—ñ–¥–µ–æ):",
        reply_markup=nav_buttons()
    )
    return STEP_CONFIRM_FILE

async def process_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["file"] = update.message
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="confirm")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
         InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]
    ]
    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    return STEP_CONFIRMATION

async def confirm_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    card = context.user_data.get("card")
    provider = context.user_data.get("provider")
    payment = context.user_data.get("payment")
    file_msg: Message = context.user_data.get("file")

    text = f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n–ö–∞—Ä—Ç–∫–∞: {card}\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}\n–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏: {payment}"
    await file_msg.copy_to(chat_id=ADMIN_ID, caption=text)

    with sqlite3.connect(DB_NAME) as conn:
        cur = conn.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS deposits (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            card TEXT,
            provider TEXT,
            payment TEXT,
            file_type TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )""")
        cur.execute("""INSERT INTO deposits (user_id, username, card, provider, payment, file_type)
                       VALUES (?, ?, ?, ?, ?, ?)""",
                    (user.id, user.username or '', card, provider, payment, file_msg.effective_attachment.__class__.__name__))
        conn.commit()

    await query.message.reply_text("–î—è–∫—É—î–º–æ! –í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.", reply_markup=nav_buttons())
    return STEP_MENU
