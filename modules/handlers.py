import os
import re
import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Message
from telegram.constants import ParseMode
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from modules.config import ADMIN_ID, DB_NAME

# ‚Äî‚Äî‚Äî –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
GIF_PATH = os.path.join(BASE_DIR, "welcome.gif")  # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î

PROVIDERS = ["üèÜ CHAMPION", "üé∞ SUPEROMATIC"]
PAYMENTS  = ["–ö–∞—Ä—Ç–∞", "–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑"]

# ‚Äî‚Äî‚Äî –°—Ç–∞–Ω–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
(
    STEP_MENU,
    STEP_CLIENT_MENU,
    STEP_PROFILE_ENTER_CARD,
    STEP_PROFILE_ENTER_PHONE,
    STEP_PROFILE_ENTER_CODE,
    STEP_FIND_CARD_PHONE,
    STEP_CLIENT_AUTH,
    STEP_CLIENT_CARD,
    STEP_PROVIDER,
    STEP_PAYMENT,
    STEP_DEPOSIT_AMOUNT,
    STEP_CONFIRM_FILE,
    STEP_CONFIRMATION,
    STEP_WITHDRAW_AMOUNT,
    STEP_WITHDRAW_METHOD,
    STEP_WITHDRAW_DETAILS,
    STEP_WITHDRAW_CONFIRM,
    STEP_REG_NAME,
    STEP_REG_PHONE,
    STEP_REG_CODE,
    STEP_ADMIN_BROADCAST,
    STEP_ADMIN_SEARCH,
) = range(22)


def init_db():
    """–°—Ç–≤–æ—Ä—é—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î."""
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS threads (
                admin_msg_id INTEGER PRIMARY KEY,
                user_id       INTEGER
            )""")
        conn.execute("""
            CREATE TABLE IF NOT EXISTS clients (
                user_id    INTEGER PRIMARY KEY,
                phone      TEXT,
                card       TEXT,
                authorized INTEGER DEFAULT 0
            )""")
        conn.execute("""
            CREATE TABLE IF NOT EXISTS deposits (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                card TEXT,
                provider TEXT,
                payment TEXT,
                amount REAL,
                file_type TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )""")
        conn.execute("""
            CREATE TABLE IF NOT EXISTS withdrawals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                amount REAL,
                method TEXT,
                details TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )""")
        conn.execute("""
            CREATE TABLE IF NOT EXISTS registrations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                name TEXT,
                phone TEXT,
                status TEXT DEFAULT 'pending',
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )""")
        conn.commit()


def setup_handlers(app):
    init_db()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={

            # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            STEP_MENU: [CallbackQueryHandler(menu_handler)],

            # –ü—ñ–¥–º–µ–Ω—é –∫–ª—ñ—î–Ω—Ç–∞
            STEP_CLIENT_MENU: [
                CallbackQueryHandler(client_menu_handler,
                                     pattern="^(client_profile|client_find_card|back)$"),
                CallbackQueryHandler(menu_handler,
                                     pattern="^(deposit|withdraw|register|help|home)$"),
            ],

            # ‚Äú–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å‚Äù
            STEP_PROFILE_ENTER_CARD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, profile_enter_card),
                CallbackQueryHandler(back_to_client_menu, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],
            STEP_PROFILE_ENTER_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, profile_enter_phone),
                CallbackQueryHandler(back_to_profile_card, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],
            STEP_PROFILE_ENTER_CODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, profile_enter_code),
                CallbackQueryHandler(back_to_profile_phone, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],

            # ‚Äú–î—ñ–∑–Ω–∞—Ç–∏—Å—è –∫–∞—Ä—Ç–∫—É‚Äù
            STEP_FIND_CARD_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, profile_find_phone),
                CallbackQueryHandler(back_to_client_menu, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],

            # –ú–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
            STEP_CLIENT_AUTH: [
                CallbackQueryHandler(authorized_menu_handler),
            ],

            # –î–µ–ø–æ–∑–∏—Ç
            STEP_CLIENT_CARD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_card),
                CallbackQueryHandler(back_to_client_menu, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],
            STEP_PROVIDER: [
                CallbackQueryHandler(process_provider),
                CallbackQueryHandler(back_to_deposit_card, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],
            STEP_PAYMENT: [
                CallbackQueryHandler(process_payment),
                CallbackQueryHandler(back_to_provider, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],
            STEP_DEPOSIT_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_deposit_amount),
                CallbackQueryHandler(back_to_payment, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],
            STEP_CONFIRM_FILE: [
                MessageHandler(filters.Document.ALL|filters.PHOTO|filters.VIDEO, process_file),
                CallbackQueryHandler(back_to_deposit_amount, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],
            STEP_CONFIRMATION: [
                CallbackQueryHandler(confirm_submission, pattern="^confirm$"),
                CallbackQueryHandler(back_to_confirm_file, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],

            # –í–∏–≤–µ–¥–µ–Ω–Ω—è
            STEP_WITHDRAW_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_withdraw_amount),
                CallbackQueryHandler(back_to_client_menu, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],
            STEP_WITHDRAW_METHOD: [
                CallbackQueryHandler(process_withdraw_method),
                CallbackQueryHandler(back_to_withdraw_amount, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],
            STEP_WITHDRAW_DETAILS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_withdraw_details),
                CallbackQueryHandler(back_to_withdraw_method, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],
            STEP_WITHDRAW_CONFIRM: [
                CallbackQueryHandler(confirm_withdrawal, pattern="^confirm_withdraw$"),
                CallbackQueryHandler(back_to_withdraw_details, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],

            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
            STEP_REG_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, register_name),
                CallbackQueryHandler(start, pattern="^home$")
            ],
            STEP_REG_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, register_phone),
                CallbackQueryHandler(back_to_reg_name, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],
            STEP_REG_CODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, register_code),
                CallbackQueryHandler(back_to_reg_phone, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],

            # –ê–¥–º—ñ–Ω: –†–æ–∑—Å–∏–ª–∫–∞
            STEP_ADMIN_BROADCAST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast),
                CallbackQueryHandler(admin_panel, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],

            # –ê–¥–º—ñ–Ω: –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞
            STEP_ADMIN_SEARCH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_search),
                CallbackQueryHandler(admin_panel, pattern="^back$"),
                CallbackQueryHandler(start, pattern="^home$")
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )
    app.add_handler(conv)

    # –ê–¥–º—ñ–Ω-reply (–¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∞–¥–º—ñ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ)
    app.add_handler(
        MessageHandler(filters.TEXT & filters.User(ADMIN_ID) & filters.REPLY,
                       admin_reply),
        group=1,
    )


# ‚Äî‚Äî‚Äî Back-—Ö–µ–ª–ø–µ—Ä–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def back_to_client_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await client_menu_handler(update, context)

async def back_to_profile_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:", reply_markup=nav_buttons())
    return STEP_PROFILE_ENTER_CARD

async def back_to_profile_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=nav_buttons())
    return STEP_PROFILE_ENTER_PHONE

async def back_to_deposit_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:", reply_markup=nav_buttons())
    return STEP_CLIENT_CARD

async def back_to_provider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton(p, callback_data=p)] for p in PROVIDERS]
    kb.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
               InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")])
    await update.callback_query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_PROVIDER

async def back_to_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton(p, callback_data=p)] for p in PAYMENTS]
    kb.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
               InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")])
    await update.callback_query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_PAYMENT

async def back_to_deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–µ–ø–æ–∑–∏—Ç—É:", reply_markup=nav_buttons())
    return STEP_DEPOSIT_AMOUNT

async def back_to_confirm_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (–¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ):", reply_markup=nav_buttons())
    return STEP_CONFIRM_FILE

async def back_to_withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏–≤–µ–¥–µ–Ω–Ω—è:", reply_markup=nav_buttons())
    return STEP_WITHDRAW_AMOUNT

async def back_to_withdraw_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton(p, callback_data=p)] for p in PAYMENTS]
    kb.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
               InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")])
    await update.callback_query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_WITHDRAW_METHOD

async def back_to_withdraw_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏:", reply_markup=nav_buttons())
    return STEP_WITHDRAW_DETAILS

async def back_to_reg_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await register_name(update, context)

async def back_to_reg_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=nav_buttons())
    return STEP_REG_PHONE


# ‚Äî‚Äî‚Äî –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    kb = [
        [InlineKeyboardButton("üí∞ –î–µ–ø–æ–∑–∏—Ç–∏",      callback_data="admin_deposits"),
         InlineKeyboardButton("üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",    callback_data="admin_users")],
        [InlineKeyboardButton("üìÑ –í–∏–≤–µ–¥–µ–Ω–Ω—è",      callback_data="admin_withdrawals"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",     callback_data="admin_stats")],
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞",  callback_data="admin_search"),
         InlineKeyboardButton("üì¢ –†–æ–∑—Å–∏–ª–∫–∞",       callback_data="admin_broadcast")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",   callback_data="home")],
    ]
    await q.message.reply_text("–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_MENU


# ‚Äî‚Äî‚Äî –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def nav_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")],
    ])


# ‚Äî‚Äî‚Äî /start ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("üé≤ –ö–õ–Ü–Ñ–ù–¢",      callback_data="client")],
        [InlineKeyboardButton("üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è",   callback_data="register")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏",    callback_data="deposit")],
        [InlineKeyboardButton("üí∏ –í–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤", callback_data="withdraw")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞",     callback_data="help")],
    ]
    if update.effective_user.id == ADMIN_ID:
        kb.append([InlineKeyboardButton("üõ† –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    caption = "–í—ñ—Ç–∞—î–º–æ —É *BIG GAME MONEY!* –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    markup  = InlineKeyboardMarkup(kb)

    if update.message:
        with open(GIF_PATH, "rb") as gif:
            await update.message.reply_animation(
                gif, caption=caption,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=markup
            )
    else:
        await update.callback_query.answer()
        with open(GIF_PATH, "rb") as gif:
            await update.callback_query.message.reply_animation(
                gif, caption=caption,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=markup
            )
    return STEP_MENU


# ‚Äî‚Äî‚Äî –ú–µ–Ω—é ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q    = update.callback_query; await q.answer()
    data = q.data

    # –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å
    if data == "admin_panel":
        return await admin_panel(update, context)

    if data == "admin_deposits":
        # ... —ñ—Å–Ω—É—é—á–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è Admin ‚Üí Deposits
        return STEP_MENU
    if data == "admin_users":
        # ... —ñ—Å–Ω—É—é—á–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è Admin ‚Üí Users
        return STEP_MENU
    if data == "admin_withdrawals":
        # ... —ñ—Å–Ω—É—é—á–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è Admin ‚Üí Withdrawals
        return STEP_MENU
    if data == "admin_stats":
        # ... —ñ—Å–Ω—É—é—á–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è Admin ‚Üí Stats
        return STEP_MENU
    if data == "admin_search":
        await q.message.reply_text("–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—à—É–∫—É:", reply_markup=nav_buttons())
        return STEP_ADMIN_SEARCH
    if data == "admin_broadcast":
        await q.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:", reply_markup=nav_buttons())
        return STEP_ADMIN_BROADCAST

    # –ö–ª—ñ—î–Ω—Ç—Å—å–∫—ñ –∫–Ω–æ–ø–∫–∏
    if data == "client":
        return await client_menu_handler(update, context)
    if data == "deposit":
        await q.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:", reply_markup=nav_buttons())
        return STEP_CLIENT_CARD
    if data == "withdraw":
        await q.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏–≤–µ–¥–µ–Ω–Ω—è:", reply_markup=nav_buttons())
        return STEP_WITHDRAW_AMOUNT
    if data == "register":
        await q.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —á–∏ –Ω—ñ–∫:", reply_markup=nav_buttons())
        return STEP_REG_NAME
    if data == "help":
        await q.message.reply_text(
            "üìñ *–î–æ–≤—ñ–¥–∫–∞*\n‚Ä¢ /start ‚Äî –º–µ–Ω—é\n‚Ä¢ üé≤ –ö–ª—ñ—î–Ω—Ç ‚Äî –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å\n‚Ä¶",
            parse_mode=ParseMode.MARKDOWN, reply_markup=nav_buttons()
        )
        return STEP_MENU

    if data in ("back", "home"):
        return await start(update, context)

    return STEP_MENU


# ‚Äî‚Äî‚Äî –ü—ñ–¥–º–µ–Ω—é ‚Äú–ö–ª—ñ—î–Ω—Ç‚Äù ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def client_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()

    # —è–∫—â–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ
    with sqlite3.connect(DB_NAME) as conn:
        auth = conn.execute(
            "SELECT authorized FROM clients WHERE user_id=?", (q.from_user.id,)
        ).fetchone()
    if auth and auth[0] == 1 and q.data == "client":
        return await show_authorized_menu(update, context)

    try: await q.message.delete()
    except: pass

    kb = [
        [InlineKeyboardButton("üí≥ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å",             callback_data="client_profile")],
        [InlineKeyboardButton("üìá –î—ñ–∑–Ω–∞—Ç–∏—Å—è –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏", callback_data="client_find_card")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏",              callback_data="deposit")],
        [InlineKeyboardButton("üí∏ –í–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤",            callback_data="withdraw")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",            callback_data="home")],
    ]
    await q.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=InlineKeyboardMarkup(kb))

    if q.data == "client_profile":
        await q.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:", reply_markup=nav_buttons())
        context.user_data["profile_mode"] = "direct"
        return STEP_PROFILE_ENTER_CARD
    if q.data == "client_find_card":
        await q.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=nav_buttons())
        context.user_data["profile_mode"] = "find"
        return STEP_PROFILE_ENTER_PHONE

    return STEP_CLIENT_MENU


# ‚Äî‚Äî‚Äî –ú–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def show_authorized_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("üéÅ –ó–Ω—è—Ç–∏ –∫–µ—à–±–µ–∫",    callback_data="cashback")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏",       callback_data="deposit")],
        [InlineKeyboardButton("üí∏ –í–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤",    callback_data="withdraw")],
        [InlineKeyboardButton("üìñ –Ü—Å—Ç–æ—Ä—ñ—è",         callback_data="history")],
        [InlineKeyboardButton("üîí –í–∏–π—Ç–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é", callback_data="logout")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞",        callback_data="help")],
    ]
    text = "–í—ñ—Ç–∞—î–º–æ –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ!"
    await update.effective_chat.send_message(text, reply_markup=InlineKeyboardMarkup(kb))
    return STEP_CLIENT_AUTH


# ‚Äî‚Äî‚Äî –û–±—Ä–æ–±–∫–∞ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def authorized_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q       = update.callback_query; await q.answer()
    data    = q.data
    user_id = q.from_user.id

    if data == "cashback":
        await q.message.reply_text("–°—Ü–µ–Ω–∞—Ä—ñ–π –∑–Ω—è—Ç—Ç—è –∫–µ—à–±–µ–∫—É —Ç—É—Ç‚Ä¶")
        return STEP_CLIENT_AUTH

    if data == "deposit":
        with sqlite3.connect(DB_NAME) as conn:
            row = conn.execute("SELECT card FROM clients WHERE user_id=?", (user_id,)).fetchone()
        if row and row[0]:
            context.user_data["card"] = row[0]
            kb = [[InlineKeyboardButton(p, callback_data=p)] for p in PROVIDERS]
            kb.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
                       InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")])
            await q.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(kb))
            return STEP_PROVIDER
        await q.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:", reply_markup=nav_buttons())
        return STEP_CLIENT_CARD

    if data == "withdraw":
        with sqlite3.connect(DB_NAME) as conn:
            row = conn.execute("SELECT card FROM clients WHERE user_id=?", (user_id,)).fetchone()
        if row and row[0]:
            context.user_data["card"] = row[0]
        await q.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏–≤–µ–¥–µ–Ω–Ω—è:", reply_markup=nav_buttons())
        return STEP_WITHDRAW_AMOUNT

    if data == "history":
        await q.message.reply_text("–¢—É—Ç –±—É–¥–µ —ñ—Å—Ç–æ—Ä—ñ—è –æ–ø–µ—Ä–∞—Ü—ñ–π‚Ä¶")
        return STEP_CLIENT_AUTH

    if data == "logout":
        with sqlite3.connect(DB_NAME) as conn:
            conn.execute("UPDATE clients SET authorized=0 WHERE user_id=?", (user_id,))
            conn.commit()
        await q.message.reply_text("–í–∏ –≤–∏–π—à–ª–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é.", reply_markup=nav_buttons())
        return await start(update, context)

    if data == "help":
        await q.message.reply_text("–¢—É—Ç –±—É–¥–µ –¥–æ–≤—ñ–¥–∫–∞‚Ä¶")
        return STEP_CLIENT_AUTH

    if data in ("home", "back"):
        return await start(update, context)

    await q.message.reply_text("–©–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ‚Ä¶")
    return STEP_CLIENT_AUTH


# ‚Äî‚Äî‚Äî –°—Ü–µ–Ω–∞—Ä—ñ–π ‚Äú–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å‚Äù ‚Äî –ø—Ä—è–º–∏–π –≤–≤—ñ–¥ –∫–∞—Ä—Ç–∫–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def profile_enter_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card = update.message.text.strip()
    if not re.fullmatch(r"\d{4,7}", card):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–∫–∏.", reply_markup=nav_buttons())
        return STEP_PROFILE_ENTER_CARD
    context.user_data["profile_card"] = card
    await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=nav_buttons())
    return STEP_PROFILE_ENTER_PHONE


# ‚Äî‚Äî‚Äî ‚Äú–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å‚Äù ‚Äî –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def profile_enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not re.fullmatch(r"\d{10}", phone):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É.", reply_markup=nav_buttons())
        return STEP_PROFILE_ENTER_PHONE

    mode    = context.user_data.get("profile_mode")
    user_id = update.effective_user.id

    if mode == "direct":
        card = context.user_data["profile_card"]
        await context.bot.send_message(
            ADMIN_ID, f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞\n–ö–∞—Ä—Ç–∫–∞: {card}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        )
        with sqlite3.connect(DB_NAME) as conn:
            conn.execute(
                "INSERT OR REPLACE INTO clients(user_id,phone,card,authorized) VALUES(?,?,?,1)",
                (user_id, phone, card)
            )
            conn.commit()
        await update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞ ‚úÖ", reply_markup=nav_buttons())
        return await show_authorized_menu(update, context)

    # —Ä–µ–∂–∏–º ‚Äúfind‚Äù
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            "INSERT OR REPLACE INTO clients(user_id,phone,authorized) VALUES(?,?,0)",
            (user_id, phone)
        )
        conn.commit()
    await context.bot.send_message(
        ADMIN_ID, f"–•–æ—á–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤—ñ–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —ñ–∑ SMS:", reply_markup=nav_buttons())
    return STEP_PROFILE_ENTER_CODE


# ‚Äî‚Äî‚Äî ‚Äú–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å‚Äù ‚Äî –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def profile_enter_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if not re.fullmatch(r"\d{4}", code):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥.", reply_markup=nav_buttons())
        return STEP_PROFILE_ENTER_CODE

    user_id = update.effective_user.id
    msg = await context.bot.send_message(ADMIN_ID, f"–ö–æ–¥ –¥–ª—è {user_id}: {code}")
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            "INSERT OR REPLACE INTO threads(admin_msg_id,user_id) VALUES(?,?)",
            (msg.message_id, user_id)
        )
        conn.commit()

    await update.message.reply_text("–ö–æ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ß–µ–∫–∞–π—Ç–µ‚Ä¶", reply_markup=nav_buttons())
    return STEP_CLIENT_MENU


# ‚Äî‚Äî‚Äî ‚Äú–î—ñ–∑–Ω–∞—Ç–∏—Å—è –∫–∞—Ä—Ç–∫—É‚Äù –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def profile_find_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not re.fullmatch(r"\d{10}", phone):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É.", reply_markup=nav_buttons())
        return STEP_FIND_CARD_PHONE

    await context.bot.send_message(
        ADMIN_ID, f"–•–æ—á–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤—ñ–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            "INSERT OR REPLACE INTO clients(user_id,phone,authorized) VALUES(?,?,0)",
            (update.effective_user.id, phone)
        )
        conn.commit()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —ñ–∑ SMS:", reply_markup=nav_buttons())
    return STEP_PROFILE_ENTER_CODE


# ‚Äî‚Äî‚Äî –§–ª–æ—É –¥–µ–ø–æ–∑–∏—Ç—É ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def process_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card = update.message.text.strip()
    if not re.fullmatch(r"\d{4,5}", card):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–∫–∏.", reply_markup=nav_buttons())
        return STEP_CLIENT_CARD
    context.user_data["card"] = card
    kb = [[InlineKeyboardButton(p, callback_data=p)] for p in PROVIDERS]
    kb.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
               InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")])
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_PROVIDER

async def process_provider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    if q.data in ("back","home"):
        return await menu_handler(update, context)
    context.user_data["provider"] = q.data
    kb = [[InlineKeyboardButton(p, callback_data=p)] for p in PAYMENTS]
    kb.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
               InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")])
    await q.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_PAYMENT

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    if q.data in ("back","home"):
        return await menu_handler(update, context)
    context.user_data["payment"] = q.data
    await q.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–µ–ø–æ–∑–∏—Ç—É:", reply_markup=nav_buttons())
    return STEP_DEPOSIT_AMOUNT

async def process_deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amt = float(update.message.text.strip())
        if amt <= 0:
            raise ValueError()
    except:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞.", reply_markup=nav_buttons())
        return STEP_DEPOSIT_AMOUNT
    context.user_data["deposit_amount"] = amt
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (–¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ):", reply_markup=nav_buttons())
    return STEP_CONFIRM_FILE

async def process_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["file"] = update.message
    kb = [
        [InlineKeyboardButton("‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="confirm")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
         InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")],
    ]
    await update.message.reply_text("–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è:",	reply_markup=InlineKeyboardMarkup(kb))
    return STEP_CONFIRMATION

async def confirm_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q       = update.callback_query; await q.answer()
    user    = q.from_user
    card    = context.user_data["card"]
    prov    = context.user_data["provider"]
    pay     = context.user_data["payment"]
    amount  = context.user_data["deposit_amount"]
    file_msg: Message = context.user_data["file"]
    caption = (f"–î–µ–ø–æ–∑–∏—Ç:\n–ö–∞—Ä—Ç–∫–∞: {card}\n–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {prov}\n–û–ø–ª–∞—Ç–∞: {pay}\n–°—É–º–∞: {amount}")
    admin_msg = await file_msg.copy(chat_id=ADMIN_ID, caption=caption)
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            "INSERT OR REPLACE INTO threads(admin_msg_id,user_id) VALUES(?,?)",
            (admin_msg.message_id, user.id)
        )
        conn.execute(
            "INSERT INTO deposits(user_id,username,card,provider,payment,amount,file_type) "
            "VALUES(?,?,?,?,?,?,?)",
            (user.id, user.username or "", card, prov, pay, amount,
             file_msg.effective_attachment.__class__.__name__)
        )
        conn.commit()
    await q.message.reply_text("–î–µ–ø–æ–∑–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ‚úÖ", reply_markup=nav_buttons())
    return STEP_CLIENT_MENU


# ‚Äî‚Äî‚Äî –§–ª–æ—É –≤–∏–≤–µ–¥–µ–Ω–Ω—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def process_withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amt = float(update.message.text.strip())
        if amt <= 0:
            raise ValueError()
    except:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞.", reply_markup=nav_buttons())
        return STEP_WITHDRAW_AMOUNT
    context.user_data["withdraw_amount"] = amt
    kb = [[InlineKeyboardButton(p, callback_data=p)] for p in PAYMENTS]
    kb.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
               InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")])
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_WITHDRAW_METHOD

async def process_withdraw_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    if q.data in ("back","home"):
        return await menu_handler(update, context)
    context.user_data["withdraw_method"] = q.data
    await q.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏:", reply_markup=nav_buttons())
    return STEP_WITHDRAW_DETAILS

async def process_withdraw_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    details = update.message.text.strip()
    context.user_data["withdraw_details"] = details
    amt    = context.user_data["withdraw_amount"]
    method = context.user_data["withdraw_method"]
    text = f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è?\n–°—É–º–∞: {amt}\n–ú–µ—Ç–æ–¥: {method}\n–†–µ–∫–≤—ñ–∑–∏—Ç–∏: {details}"
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_withdraw")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
         InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")],
    ])
    await update.message.reply_text(text, reply_markup=kb)
    return STEP_WITHDRAW_CONFIRM

async def confirm_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q       = update.callback_query; await q.answer()
    user    = q.from_user
    amt     = context.user_data["withdraw_amount"]
    method  = context.user_data["withdraw_method"]
    details = context.user_data["withdraw_details"]
    summary = f"–í–∏–≤–µ–¥–µ–Ω–Ω—è:\n–°—É–º–∞: {amt}\n–ú–µ—Ç–æ–¥: {method}\n–†–µ–∫–≤—ñ–∑–∏—Ç–∏: {details}"
    admin_msg = await context.bot.send_message(chat_id=ADMIN_ID, text=summary)
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            "INSERT INTO withdrawals(user_id,username,amount,method,details) VALUES(?,?,?,?,?)",
            (user.id, user.username or "", amt, method, details)
        )
        conn.execute(
            "INSERT OR REPLACE INTO threads(admin_msg_id,user_id) VALUES(?,?)",
            (admin_msg.message_id, user.id)
        )
        conn.commit()
    await q.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ ‚úÖ", reply_markup=nav_buttons())
    return STEP_CLIENT_MENU


# ‚Äî‚Äî‚Äî –§–ª–æ—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["reg_name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω:", reply_markup=nav_buttons())
    return STEP_REG_PHONE

async def register_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not re.fullmatch(r"\d{10}", phone):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É.", reply_markup=nav_buttons())
        return STEP_REG_PHONE
    name    = context.user_data["reg_name"]
    user_id = update.effective_user.id
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"–ù–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è\n–Ü–º'—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            "INSERT INTO registrations(user_id,name,phone) VALUES(?,?,?)",
            (user_id, name, phone)
        )
        conn.commit()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å 4-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥ —ñ–∑ SMS:", reply_markup=nav_buttons())
    return STEP_REG_CODE

async def register_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if not re.fullmatch(r"\d{4}", code):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥.", reply_markup=nav_buttons())
        return STEP_REG_CODE
    name    = context.user_data["reg_name"]
    user_id = update.effective_user.id
    msg = await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"–ö–æ–¥ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó {code} –≤—ñ–¥ {name} ({user_id})"
    )
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            "INSERT OR REPLACE INTO threads(admin_msg_id,user_id) VALUES(?,?)",
            (msg.message_id, user_id)
        )
        conn.commit()
    await update.message.reply_text("–ö–æ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ß–µ–∫–∞–π—Ç–µ‚Ä¶", reply_markup=nav_buttons())
    return STEP_MENU


# ‚Äî‚Äî‚Äî –ê–¥–º—ñ–Ω: –†–æ–∑—Å–∏–ª–∫–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    with sqlite3.connect(DB_NAME) as conn:
        u1 = {r[0] for r in conn.execute("SELECT user_id FROM clients")}
        u2 = {r[0] for r in conn.execute("SELECT user_id FROM registrations")}
    recipients = u1.union(u2)
    count = 0
    for uid in recipients:
        try:
            await context.bot.send_message(chat_id=uid, text=text)
            count += 1
        except:
            pass
    await update.message.reply_text(f"–†–æ–∑—Å–∏–ª–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.", reply_markup=nav_buttons())
    return STEP_MENU


# ‚Äî‚Äî‚Äî –ê–¥–º—ñ–Ω: –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def admin_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —á–∏—Å–ª–æ–≤–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.", reply_markup=nav_buttons())
        return STEP_ADMIN_SEARCH
    uid = int(text)
    with sqlite3.connect(DB_NAME) as conn:
        client = conn.execute("SELECT phone,card,authorized FROM clients WHERE user_id=?", (uid,)).fetchone()
        regs   = conn.execute("SELECT name,phone,status,timestamp FROM registrations WHERE user_id=?", (uid,)).fetchall()
        deps   = conn.execute("SELECT card,provider,payment,amount,timestamp FROM deposits WHERE user_id=?", (uid,)).fetchall()
        wds    = conn.execute("SELECT amount,method,details,timestamp FROM withdrawals WHERE user_id=?", (uid,)).fetchall()
    parts = [f"üÜî ID: {uid}"]
    if client:
        parts.append(f"üìá –ö–ª—ñ—î–Ω—Ç: —Ç–µ–ª={client[0]}, –∫–∞—Ä—Ç–∞={client[1]}, auth={bool(client[2])}")
    else:
        parts.append("üìá –ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
    parts.append("\nüìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
    if regs:
        for r in regs:
            parts.append(f"  ‚Ä¢ {r[3]} ‚Äî {r[0]}/{r[1]} ({r[2]})")
    else:
        parts.append("  ‚Äî –Ω–µ–º–∞—î")
    parts.append("\nüí∞ –î–µ–ø–æ–∑–∏—Ç–∏:")
    if deps:
        for r in deps:
            parts.append(f"  ‚Ä¢ {r[4]} ‚Äî –∫–∞—Ä—Ç–∫–∞ {r[0]}, {r[1]}, {r[2]}, —Å—É–º–∞ {r[3]}")
    else:
        parts.append("  ‚Äî –Ω–µ–º–∞—î")
    parts.append("\nüí∏ –í–∏–≤–µ–¥–µ–Ω–Ω—è:")
    if wds:
        for r in wds:
            parts.append(f"  ‚Ä¢ {r[3]} ‚Äî {r[1]}, —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ {r[2]}, —Å—É–º–∞ {r[0]}")
    else:
        parts.append("  ‚Äî –Ω–µ–º–∞—î")
    await update.message.reply_text("\n".join(parts), reply_markup=nav_buttons())
    return STEP_MENU


# ‚Äî‚Äî‚Äî –ê–¥–º—ñ–Ω-reply ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    orig = update.message.reply_to_message.message_id
    with sqlite3.connect(DB_NAME) as conn:
        row = conn.execute("SELECT user_id FROM threads WHERE admin_msg_id=?", (orig,)).fetchone()
    if not row:
        await update.message.reply_text("–õ–∞–Ω—Ü—é–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    tgt = row[0]
    with sqlite3.connect(DB_NAME) as conn:
        auth = conn.execute("SELECT authorized FROM clients WHERE user_id=?", (tgt,)).fetchone()
    if auth and auth[0] == 0:
        card = update.message.text.strip()
        with sqlite3.connect(DB_NAME) as conn:
            conn.execute("UPDATE clients SET card=?,authorized=1 WHERE user_id=?", (card, tgt))
            conn.commit()
        await context.bot.send_message(tgt, f"–í–∞—à –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: {card}\n–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞ ‚úÖ")
        return
    await context.bot.send_message(tgt, update.message.text)
    await update.message.reply_text("‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
