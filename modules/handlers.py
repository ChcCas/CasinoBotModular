import os
import re
import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Message
from telegram.constants import ParseMode
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from modules.config import ADMIN_ID, DB_NAME

PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
GIF_PATH     = os.path.join(PROJECT_ROOT, "welcome.gif")

PROVIDERS = ["üèÜ CHAMPION", "üé∞ SUPEROMATIC"]
PAYMENTS  = ["–ö–∞—Ä—Ç–∞", "–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑"]

(
    STEP_MENU,
    STEP_CLIENT_MENU,
    STEP_PROFILE_ENTER_CARD,
    STEP_PROFILE_ENTER_PHONE,
    STEP_PROFILE_ENTER_CODE,
    STEP_FIND_CARD_PHONE,
    STEP_CLIENT_AUTH,
    STEP_CLIENT_CARD,
    STEP_PROVIDER,
    STEP_PAYMENT,
    STEP_DEPOSIT_AMOUNT,
    STEP_CONFIRM_FILE,
    STEP_CONFIRMATION,
    STEP_WITHDRAW_AMOUNT,
    STEP_WITHDRAW_METHOD,
    STEP_WITHDRAW_DETAILS,
    STEP_WITHDRAW_CONFIRM,
    STEP_REG_NAME,
    STEP_REG_PHONE,
    STEP_REG_CODE,
    STEP_ADMIN_BROADCAST,
    STEP_ADMIN_SEARCH,
) = range(22)

def init_db():
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("CREATE TABLE IF NOT EXISTS threads (admin_msg_id INTEGER PRIMARY KEY, user_id INTEGER)")
        conn.execute("CREATE TABLE IF NOT EXISTS clients (user_id INTEGER PRIMARY KEY, phone TEXT, card TEXT, authorized INTEGER DEFAULT 0)")
        conn.execute("CREATE TABLE IF NOT EXISTS deposits (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, username TEXT, card TEXT, provider TEXT, payment TEXT, amount REAL, file_type TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)")
        conn.execute("CREATE TABLE IF NOT EXISTS withdrawals (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, username TEXT, amount REAL, method TEXT, details TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)")
        conn.execute("CREATE TABLE IF NOT EXISTS registrations (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, name TEXT, phone TEXT, status TEXT DEFAULT 'pending', timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)")
        conn.commit()

def setup_handlers(app):
    init_db()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(menu_handler))
    app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID) & filters.REPLY, admin_reply), group=1)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üé≤ –ö–õ–Ü–Ñ–ù–¢", callback_data="client")],
        [InlineKeyboardButton("üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", callback_data="register")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏", callback_data="deposit")],
        [InlineKeyboardButton("üí∏ –í–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤", callback_data="withdraw")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ]
    if update.effective_user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üõ† –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    caption = "–í—ñ—Ç–∞—î–º–æ —É *BIG GAME MONEY!* –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"

    if update.message:
        with open(GIF_PATH, "rb") as gif:
            await update.message.reply_animation(gif, caption=caption, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.answer()
        with open(GIF_PATH, "rb") as gif:
            await update.callback_query.message.reply_animation(gif, caption=caption, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

    return STEP_MENU


async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "admin_panel":
        return await show_admin_panel(query)

    elif data == "admin_deposits":
        await query.message.reply_text("üì• –û—Å—Ç–∞–Ω–Ω—ñ –¥–µ–ø–æ–∑–∏—Ç–∏:\n(–ø—ñ–¥–∫–ª—é—á–∏ –ª–æ–≥—ñ–∫—É)", reply_markup=admin_nav())
        return STEP_MENU

    elif data == "admin_users":
        await query.message.reply_text("üë• –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n(–ø—ñ–¥–∫–ª—é—á–∏ –ª–æ–≥—ñ–∫—É)", reply_markup=admin_nav())
        return STEP_MENU

    elif data == "admin_withdrawals":
        await query.message.reply_text("üì§ –ó–∞–ø–∏—Ç–∏ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:\n(–ø—ñ–¥–∫–ª—é—á–∏ –ª–æ–≥—ñ–∫—É)", reply_markup=admin_nav())
        return STEP_MENU

    elif data == "admin_stats":
        await query.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n(–ø—ñ–¥–∫–ª—é—á–∏ –ª–æ–≥—ñ–∫—É)", reply_markup=admin_nav())
        return STEP_MENU

    elif data == "admin_search":
        await query.message.reply_text("üîç –í–≤–µ–¥—ñ—Ç—å ID –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=admin_nav())
        return STEP_ADMIN_SEARCH

    elif data == "admin_broadcast":
        await query.message.reply_text("üì¢ –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:", reply_markup=admin_nav())
        return STEP_ADMIN_BROADCAST

    elif data == "home" or data == "back":
        return await start(update, context)

    elif data == "client":
        await query.message.reply_text("üí≥ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n(–ø—ñ–¥–∫–ª—é—á–∏ –ª–æ–≥—ñ–∫—É –ø—Ä–æ—Ñ—ñ–ª—é)", reply_markup=client_nav())
        return STEP_MENU

    elif data == "deposit":
        await query.message.reply_text("üí∏ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:", reply_markup=client_nav())
        return STEP_MENU

    elif data == "withdraw":
        await query.message.reply_text("üí≥ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è:", reply_markup=client_nav())
        return STEP_MENU

    elif data == "register":
        await query.message.reply_text("üìù –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:", reply_markup=client_nav())
        return STEP_MENU

    elif data == "help":
        await query.message.reply_text("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞:\n/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\nüì≤ –ü–∏—Ç–∞–Ω–Ω—è ‚Äî —á–µ—Ä–µ–∑ —á–∞—Ç", reply_markup=client_nav())
        return STEP_MENU

    return STEP_MENU


async def show_admin_panel(query):
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –î–µ–ø–æ–∑–∏—Ç–∏", callback_data="admin_deposits"),
            InlineKeyboardButton("üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
        ],
        [
            InlineKeyboardButton("üìÑ –í–∏–≤–µ–¥–µ–Ω–Ω—è", callback_data="admin_withdrawals"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        ],
        [
            InlineKeyboardButton("üîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞", callback_data="admin_search"),
            InlineKeyboardButton("üì¢ –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast"),
        ],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")],
    ]
    await query.message.reply_text("üõ† –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))
    return STEP_MENU


def admin_nav():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")],
    ])


def client_nav():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="client")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")],
    ])
# ‚Äî‚Äî‚Äî –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    context.user_data["reg_name"] = name
    await update.message.reply_text("üìû –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (0XXXXXXXXX):", reply_markup=client_nav())
    return STEP_REG_PHONE

async def register_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not re.match(r"^0\d{9}$", phone):
        await update.message.reply_text("‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:", reply_markup=client_nav())
        return STEP_REG_PHONE
    context.user_data["reg_phone"] = phone
    await update.message.reply_text("üîë –í–≤–µ–¥—ñ—Ç—å 4-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:", reply_markup=client_nav())
    return STEP_REG_CODE

async def register_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if not re.match(r"^\d{4}$", code):
        await update.message.reply_text("‚ùóÔ∏è –ö–æ–¥ –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏—Å—å –∑ 4 —Ü–∏—Ñ—Ä.", reply_markup=client_nav())
        return STEP_REG_CODE

    user_id = update.effective_user.id
    name = context.user_data.get("reg_name")
    phone = context.user_data.get("reg_phone")

    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("INSERT INTO registrations (user_id, name, phone) VALUES (?, ?, ?)", (user_id, name, phone))
        conn.commit()

    await update.message.reply_text("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=client_nav())
    return STEP_MENU


# ‚Äî‚Äî‚Äî –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def process_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card = update.message.text.strip().replace(" ", "")
    if not re.match(r"^\d{16}$", card):
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π 16-–∑–Ω–∞—á–Ω–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:", reply_markup=client_nav())
        return STEP_CLIENT_CARD
    context.user_data["card"] = card

    keyboard = [[InlineKeyboardButton(p, callback_data=p)] for p in PROVIDERS]
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")
    ])
    await update.message.reply_text("üé∞ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    return STEP_PROVIDER


async def process_provider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    provider = update.callback_query.data
    context.user_data["provider"] = provider

    keyboard = [[InlineKeyboardButton(p, callback_data=p)] for p in PAYMENTS]
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")
    ])
    await update.callback_query.message.reply_text("üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    return STEP_PAYMENT


async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["payment"] = update.callback_query.data
    await update.callback_query.message.reply_text("üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:", reply_markup=client_nav())
    return STEP_DEPOSIT_AMOUNT


async def process_deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É:", reply_markup=client_nav())
        return STEP_DEPOSIT_AMOUNT

    context.user_data["amount"] = amount
    await update.message.reply_text("üìé –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∞–±–æ –≤—ñ–¥–µ–æ):", reply_markup=client_nav())
    return STEP_CONFIRM_FILE


async def process_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_type = "unknown"
    if update.message.document:
        file_type = "document"
    elif update.message.photo:
        file_type = "photo"
    elif update.message.video:
        file_type = "video"

    context.user_data["file_type"] = file_type
    await update.message.reply_text("‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏:", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]
    ]))
    return STEP_CONFIRMATION


async def confirm_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    card     = context.user_data.get("card")
    provider = context.user_data.get("provider")
    payment  = context.user_data.get("payment")
    amount   = context.user_data.get("amount")
    ftype    = context.user_data.get("file_type")

    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("""
            INSERT INTO deposits (user_id, username, card, provider, payment, amount, file_type)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (user.id, user.username, card, provider, payment, amount, ftype))
        conn.commit()

    await update.callback_query.message.reply_text("üí∏ –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", reply_markup=client_nav())
    return STEP_MENU


# ‚Äî‚Äî‚Äî –í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def process_withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.strip())
        context.user_data["withdraw_amount"] = amount
        kb = [[InlineKeyboardButton(p, callback_data=p)] for p in PAYMENTS]
        kb.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
                   InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")])
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(kb))
        return STEP_WITHDRAW_METHOD
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É:", reply_markup=client_nav())
        return STEP_WITHDRAW_AMOUNT


async def process_withdraw_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    method = update.callback_query.data
    context.user_data["withdraw_method"] = method
    await update.callback_query.message.reply_text("üí≥ –í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –∞–±–æ –≥–∞–º–∞–Ω–µ—Ü—å):", reply_markup=client_nav())
    return STEP_WITHDRAW_DETAILS


async def process_withdraw_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["withdraw_details"] = update.message.text.strip()
    await update.message.reply_text("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è?", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_withdraw")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]
    ]))
    return STEP_WITHDRAW_CONFIRM


async def confirm_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    amount = context.user_data.get("withdraw_amount")
    method = context.user_data.get("withdraw_method")
    details = context.user_data.get("withdraw_details")

    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("""
            INSERT INTO withdrawals (user_id, username, amount, method, details)
            VALUES (?, ?, ?, ?, ?)
        """, (user.id, user.username, amount, method, details))
        conn.commit()

    await update.callback_query.message.reply_text("‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!", reply_markup=client_nav())
    return STEP_MENU