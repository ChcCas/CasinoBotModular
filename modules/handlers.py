import re
import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Message
from telegram.ext import (
    CommandHandler, CallbackQueryHandler, ConversationHandler,
    MessageHandler, filters, ContextTypes
)
from modules.config import ADMIN_ID, DB_NAME

# ‚Äî‚Äî‚Äî –°—Ç–∞–Ω–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
(
    STEP_MENU,
    STEP_DEPOSIT_CHOICE,
    STEP_CLIENT_CHOICE,
    STEP_CLIENT_CARD,
    STEP_PROVIDER,
    STEP_PAYMENT,
    STEP_CRYPTO_TYPE,
    STEP_CONFIRM_FILE,
    STEP_CONFIRMATION,
    STEP_WITHDRAW_CODE,
    STEP_WITHDRAW_AMOUNT,
    STEP_WITHDRAW_DEST,
    STEP_WITHDRAW_CONFIRM,
    STEP_WITHDRAW_ACK,
    STEP_REG_NAME,
    STEP_REG_PHONE,
    STEP_REG_CODE,
    STEP_ADMIN_BROADCAST_MESSAGE,
    STEP_ADMIN_SEARCH_PROMPT,
    STEP_USER_HISTORY,
) = range(20)

PROVIDERS = ["üèÜ CHAMPION", "üé∞ SUPEROMATIC"]
PAYMENTS = ["–ö–∞—Ä—Ç–∞", "–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑"]

def setup_handlers(application):
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={

            # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            STEP_MENU: [CallbackQueryHandler(menu_handler)],

            # –ü–æ–ø–æ–≤–Ω–∏—Ç–∏: –≤–∏–±—ñ—Ä —Å—Ü–µ–Ω–∞—Ä—ñ—é
            STEP_DEPOSIT_CHOICE: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                CallbackQueryHandler(deposit_choice_handler),
            ],

            # –ö–ª—ñ—î–Ω—Ç: –≤–∏–±—ñ—Ä
            STEP_CLIENT_CHOICE: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                CallbackQueryHandler(client_choice_handler),
            ],

            # –§–ª–æ—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
            STEP_CLIENT_CARD: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_card),
            ],
            STEP_PROVIDER: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                CallbackQueryHandler(process_provider),
            ],
            STEP_PAYMENT: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                CallbackQueryHandler(process_payment),
            ],
            STEP_CRYPTO_TYPE: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                CallbackQueryHandler(process_crypto_choice),
            ],
            STEP_CONFIRM_FILE: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                MessageHandler(filters.Document.ALL | filters.PHOTO | filters.VIDEO, process_file),
            ],
            STEP_CONFIRMATION: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                CallbackQueryHandler(confirm_submission, pattern="^confirm$")
            ],

            # –§–ª–æ—É –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤
            STEP_WITHDRAW_CODE: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, withdraw_code),
            ],
            STEP_WITHDRAW_AMOUNT: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, withdraw_amount),
            ],
            STEP_WITHDRAW_DEST: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, withdraw_dest),
            ],
            STEP_WITHDRAW_CONFIRM: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                CallbackQueryHandler(withdraw_confirm, pattern="^send_withdraw$")
            ],
            STEP_WITHDRAW_ACK: [
                CallbackQueryHandler(withdraw_ack, pattern="^ack_withdraw$")
            ],

            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
            STEP_REG_NAME: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, register_name),
            ],
            STEP_REG_PHONE: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, register_phone),
            ],
            STEP_REG_CODE: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, register_code),
            ],

            # –ê–¥–º—ñ–Ω: —Ä–æ–∑—Å–∏–ª–∫–∞ —Ç–∞ –ø–æ—à—É–∫
            STEP_ADMIN_BROADCAST_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast_send)
            ],
            STEP_ADMIN_SEARCH_PROMPT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_search_execute)
            ],

            # –û—Å–æ–±–∏—Å—Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—è
            STEP_USER_HISTORY: [
                CallbackQueryHandler(user_history, pattern="^history$")
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )
    application.add_handler(conv)
    application.add_handler(
        MessageHandler(filters.TEXT & filters.User(ADMIN_ID) & filters.REPLY, admin_reply),
        group=1
    )

def nav_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]
    ])

# ‚Äî /start ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("üé≤ –ö–ª—ñ—î–Ω—Ç", callback_data="client")],
        [InlineKeyboardButton("üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", callback_data="register")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏", callback_data="deposit")],
        [InlineKeyboardButton("üí∏ –í–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤", callback_data="withdraw")],
        [InlineKeyboardButton("üìú –Ü—Å—Ç–æ—Ä—ñ—è", callback_data="history")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],
    ]
    if update.effective_user.id == ADMIN_ID:
        kb.append([InlineKeyboardButton("üõ† –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    text = "BIG BAME MONEY"
    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(kb))
    else:
        await update.callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(kb))
    return STEP_MENU

# ‚Äî –ú–µ–Ω—é ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    d = query.data

    if d == "admin_panel":
        kb = [
            [InlineKeyboardButton("üë§ –Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π", callback_data="admin_history_reg")],
            [InlineKeyboardButton("üí∞ –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–ø–æ–≤–Ω–µ–Ω—å", callback_data="admin_history_dep")],
            [InlineKeyboardButton("üí∏ –Ü—Å—Ç–æ—Ä—ñ—è –≤–∏–≤–µ–¥–µ–Ω—å", callback_data="admin_history_wd")],
            [InlineKeyboardButton("‚úâÔ∏è –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_search")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")],
        ]
        await query.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=InlineKeyboardMarkup(kb))
        return STEP_MENU

    if d == "history":
        return await user_history(update, context)

    if d == "admin_history_reg":
        with sqlite3.connect(DB_NAME) as conn:
            rows = conn.execute("SELECT id, user_id, name, phone, status, timestamp FROM registrations ORDER BY timestamp DESC").fetchall()
        text = "–ù–µ–º–∞—î —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π." if not rows else "\n\n".join(f"#{r[0]} | uid:{r[1]} | {r[2]} | {r[3]} | {r[4]} | {r[5]}" for r in rows)
        await query.message.edit_text(f"–Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π:\n\n{text}", reply_markup=nav_buttons())
        return STEP_MENU

    if d == "admin_history_dep":
        with sqlite3.connect(DB_NAME) as conn:
            rows = conn.execute("SELECT id, user_id, username, card, provider, payment, timestamp FROM deposits ORDER BY timestamp DESC").fetchall()
        text = "–ù–µ–º–∞—î –ø–æ–ø–æ–≤–Ω–µ–Ω—å." if not rows else "\n\n".join(f"#{r[0]} | uid:{r[1]} | {r[2]} | –∫–∞—Ä—Ç–∫–∞:{r[3]} | {r[4]} | {r[5]} | {r[6]}" for r in rows)
        await query.message.edit_text(f"–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–ø–æ–≤–Ω–µ–Ω—å:\n\n{text}", reply_markup=nav_buttons())
        return STEP_MENU

    if d == "admin_history_wd":
        with sqlite3.connect(DB_NAME) as conn:
            rows = conn.execute("SELECT id, user_id, username, amount, method, details, source_code, timestamp FROM withdrawals ORDER BY timestamp DESC").fetchall()
        text = "–ù–µ–º–∞—î –≤–∏–≤–µ–¥–µ–Ω—å." if not rows else "\n\n".join(f"#{r[0]} | uid:{r[1]} | {r[2]} | {r[3]} | {r[4]} | {r[5]} | –∫–æ–¥:{r[6]} | {r[7]}" for r in rows)
        await query.message.edit_text(f"–Ü—Å—Ç–æ—Ä—ñ—è –≤–∏–≤–µ–¥–µ–Ω—å:\n\n{text}", reply_markup=nav_buttons())
        return STEP_MENU

    if d == "admin_broadcast":
        await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:", reply_markup=nav_buttons())
        return STEP_ADMIN_BROADCAST_MESSAGE

    if d == "admin_search":
        await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å user_id –∞–±–æ username –¥–ª—è –ø–æ—à—É–∫—É:", reply_markup=nav_buttons())
        return STEP_ADMIN_SEARCH_PROMPT

    if d == "deposit":
        kb = [
            [InlineKeyboardButton("–Ø–∫ –∫–ª—ñ—î–Ω—Ç", callback_data="deposit_card")],
            [InlineKeyboardButton("–ì—Ä–∞—Ç–∏ –±–µ–∑ –∫–∞—Ä—Ç–∫–∏", callback_data="no_card")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
             InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")],
        ]
        await query.message.edit_text("–Ø–∫ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏?", reply_markup=InlineKeyboardMarkup(kb))
        return STEP_DEPOSIT_CHOICE

    if d == "withdraw":
        await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑–∞—è–≤–∫–∏ (00-00-00-00-00-00-00):", reply_markup=nav_buttons())
        return STEP_WITHDRAW_CODE

    if d == "client":
        kb = [
            [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏", callback_data="enter_card")],
            [InlineKeyboardButton("–ó–Ω—è—Ç–∏ –∫–µ—à–±–µ–∫", callback_data="withdraw_cashback")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
             InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")],
        ]
        await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=InlineKeyboardMarkup(kb))
        return STEP_CLIENT_CHOICE

    if d == "register":
        await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∞–±–æ –Ω—ñ–∫–Ω–µ–π–º:", reply_markup=nav_buttons())
        return STEP_REG_NAME

    if d in ("back", "home"):
        return await start(update, context)

    await query.message.edit_text("–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.", reply_markup=nav_buttons())
    return STEP_MENU

# ‚Äî –û—Å–æ–±–∏—Å—Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def user_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    uid = query.from_user.id
    with sqlite3.connect(DB_NAME) as conn:
        deps = conn.execute("SELECT card, provider, payment, timestamp FROM deposits WHERE user_id=? ORDER BY timestamp DESC", (uid,)).fetchall()
        wds = conn.execute("SELECT amount, method, details, source_code, timestamp FROM withdrawals WHERE user_id=? ORDER BY timestamp DESC", (uid,)).fetchall()
    deps_text = "\n".join(f"‚Ä¢ {r[3]} ‚Äî {r[1]} / {r[2]} / –∫–∞—Ä—Ç–∫–∞ {r[0]}" for r in deps) or "–Ω–µ–º–∞—î –ø–æ–ø–æ–≤–Ω–µ–Ω—å."
    wds_text = "\n".join(f"‚Ä¢ {r[4]} ‚Äî {r[1]} / {r[2]} / {r[3]}" for r in wds) or "–Ω–µ–º–∞—î –≤–∏–≤–µ–¥–µ–Ω—å."
    text = f"üìú –í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è\n\nüîπ –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:\n{deps_text}\n\nüî∏ –í–∏–≤–µ–¥–µ–Ω–Ω—è:\n{wds_text}"
    await query.message.edit_text(text, reply_markup=nav_buttons())
    return STEP_MENU

# ‚Äî –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def deposit_choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    if query.data == "deposit_card":
        await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:", reply_markup=nav_buttons())
        return STEP_CLIENT_CARD
    kb = [[InlineKeyboardButton(p, callback_data=p)] for p in PROVIDERS] + [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"), InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]]
    await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_PROVIDER

# ‚Äî –ö–ª—ñ—î–Ω—Ç ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def client_choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    if query.data == "enter_card":
        await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∫–ª—É–±—É:", reply_markup=nav_buttons())
        return STEP_CLIENT_CARD
    await query.message.edit_text("–§—É–Ω–∫—Ü—ñ—è –∑–Ω—è—Ç—Ç—è –∫–µ—à–±–µ–∫—É –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=nav_buttons())
    return STEP_MENU

# ‚Äî –§–ª–æ—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def process_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card = update.message.text.strip()
    if not re.fullmatch(r"\d{4,5}", card):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–∫–∏.", reply_markup=nav_buttons())
        return STEP_CLIENT_CARD
    context.user_data["card"] = card
    kb = [[InlineKeyboardButton(p, callback_data=p)] for p in PROVIDERS] + [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"), InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]]
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_PROVIDER

async def process_provider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    if query.data in ("back","home"):
        return await menu_handler(update, context)
    context.user_data["provider"] = query.data
    kb = [[InlineKeyboardButton(p, callback_data=p)] for p in PAYMENTS] + [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"), InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]]
    await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_PAYMENT

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    if query.data in ("back","home"):
        return await menu_handler(update, context)
    choice = query.data
    context.user_data["payment"] = choice
    if choice == "–ö–∞—Ä—Ç–∞":
        text = ("–ü–µ—Ä–µ–∫–∞–∑—É–π—Ç–µ –∫–æ—à—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–∫—É:\n\n–¢–∞—Ä–∞—Å—é–∫ –í—ñ—Ç–∞–ª—ñ–π\n–û—â–∞–¥–±–∞–Ω–∫\n4790 7299 5675 1465\n\n–ü—ñ—Å–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –Ω–∞–¥—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:\n‚Äì —Ñ–æ—Ç–æ/—Å–∫—Ä—ñ–Ω—à–æ—Ç\n‚Äì –¥–æ–∫—É–º–µ–Ω—Ç (PDF)\n‚Äì –≤—ñ–¥–µ–æ")
        await query.message.edit_text(text, reply_markup=nav_buttons())
        return STEP_CONFIRM_FILE
    crypto_kb = [[InlineKeyboardButton("Trustee Plus", callback_data="Trustee Plus")],[InlineKeyboardButton("Telegram Wallet", callback_data="Telegram Wallet")],[InlineKeyboardButton("Coinbase Wallet", callback_data="Coinbase Wallet")],[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]]
    await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –∫—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑—É:", reply_markup=InlineKeyboardMarkup(crypto_kb))
    return STEP_CRYPTO_TYPE

async def process_crypto_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    if query.data in ("back","home"):
        return await menu_handler(update, context)
    choice = query.data
    context.user_data["payment"] = choice
    if choice == "Trustee Plus":
        text = ("–ü–µ—Ä–µ–∫–∞–∑—É–π—Ç–µ USDT –Ω–∞ –∞–∫–∞—É–Ω—Ç Trustee Plus:\n\nID: bgm001\n\n–ü—ñ—Å–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –Ω–∞–¥—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:\n‚Äì —Ñ–æ—Ç–æ\n‚Äì –¥–æ–∫—É–º–µ–Ω—Ç\n‚Äì –≤—ñ–¥–µ–æ")
        await query.message.edit_text(text, reply_markup=nav_buttons())
        return STEP_CONFIRM_FILE
    await query.message.edit_text(f"–ú–µ—Ç–æ–¥ ¬´{choice}¬ª –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.", reply_markup=nav_buttons())
    return STEP_MENU

async def process_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["file"] = update.message
    kb = [[InlineKeyboardButton("‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="confirm")],[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]]
    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_CONFIRMATION

# ‚Äî –û–Ω–æ–≤–ª–µ–Ω–∏–π confirm_submission ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def confirm_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    user      = update.effective_user
    card      = context.user_data.get("card")
    provider  = context.user_data.get("provider", "‚Äî")
    payment   = context.user_data.get("payment", "‚Äî")
    file_msg: Message = context.user_data.get("file")
    lines = ["–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:"]
    if card:
        lines.append(f"‚Ä¢ –ö–∞—Ä—Ç–∫–∞: {card}")
    lines.append(f"‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
    lines.append(f"‚Ä¢ –ú–µ—Ç–æ–¥: {payment}")
    caption = "\n".join(lines)
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("""CREATE TABLE IF NOT EXISTS threads (
            admin_msg_id INTEGER PRIMARY KEY, user_id INTEGER, user_msg_id INTEGER, provider TEXT
        )""")
        conn.execute("""CREATE TABLE IF NOT EXISTS deposits (
            id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, username TEXT,
            card TEXT, provider TEXT, payment TEXT, file_type TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )""")
        conn.commit()
    admin_msg = await file_msg.copy(chat_id=ADMIN_ID, caption=caption)
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("INSERT OR REPLACE INTO threads(admin_msg_id,user_id,user_msg_id,provider) VALUES (?,?,?,?)",
                     (admin_msg.message_id, user.id, file_msg.message_id, provider))
        conn.execute("INSERT INTO deposits(user_id,username,card,provider,payment,file_type) VALUES (?,?,?,?,?,?)",
                     (user.id, user.username or "", card or "", provider, payment,
                      file_msg.effective_attachment.__class__.__name__))
        conn.commit()
    await query.message.edit_text("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞.", reply_markup=nav_buttons())
    return STEP_MENU

# ‚Äî –§–ª–æ—É –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def withdraw_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if not re.fullmatch(r'(?:\d{2}-){6}\d{2}', code):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥—É.", reply_markup=nav_buttons())
        return STEP_WITHDRAW_CODE
    context.user_data["withdraw_code"] = code
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏–≤–æ–¥—É (–º—ñ–Ω—ñ–º—É–º 200):", reply_markup=nav_buttons())
    return STEP_WITHDRAW_AMOUNT

async def withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amt = update.message.text.strip()
    if not amt.isdigit() or int(amt) < 200:
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞.", reply_markup=nav_buttons())
        return STEP_WITHDRAW_AMOUNT
    context.user_data["withdraw_amount"] = amt
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏:\n‚Äì 16 —Ü–∏—Ñ—Ä –∫–∞—Ä—Ç–∏\n‚Äì –∞–±–æ –∫—Ä–∏–ø—Ç–æ-–∞–¥—Ä–µ—Å—É", reply_markup=nav_buttons())
    return STEP_WITHDRAW_DEST

async def withdraw_dest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dest = update.message.text.strip()
    method = 'card' if re.fullmatch(r'\d{16}', dest) else 'crypto'
    context.user_data["withdraw_method"] = method
    context.user_data["withdraw_dest"] = dest
    kb = [[InlineKeyboardButton("‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤–∫—É", callback_data="send_withdraw")],[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]]
    await update.message.reply_text("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –π –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤–∫—É':", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_WITHDRAW_CONFIRM

async def withdraw_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    user = update.effective_user
    code = context.user_data["withdraw_code"]
    amount = context.user_data["withdraw_amount"]
    method = context.user_data["withdraw_method"]
    dest = context.user_data["withdraw_dest"]
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("""CREATE TABLE IF NOT EXISTS withdrawals (
            id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, username TEXT,
            amount TEXT, method TEXT, details TEXT, source_code TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )""")
        conn.execute("INSERT INTO withdrawals(user_id,username,amount,method,details,source_code) VALUES (?,?,?,?,?,?)",
                     (user.id, user.username or "", amount, method, dest, code))
        conn.commit()
    notify = f"üõé –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:\n–ö–æ–¥: {code}\n–°—É–º–∞: {amount}\n–†–µ–∫–≤—ñ–∑–∏—Ç–∏: {dest}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=notify)
    kb = [[InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é –æ—Ç—Ä–∏–º–∞–Ω–Ω—è", callback_data="ack_withdraw")]]
    await query.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_WITHDRAW_ACK

async def withdraw_ack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    user = update.effective_user
    await context.bot.send_message(chat_id=ADMIN_ID, text=f"‚úîÔ∏è @{user.username or user.id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤.")
    await query.message.edit_text("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è!", reply_markup=nav_buttons())
    return STEP_MENU

# ‚Äî –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["reg_name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (0XXXXXXXXX):", reply_markup=nav_buttons())
    return STEP_REG_PHONE

async def register_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not re.fullmatch(r"0\d{9}", phone):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω.", reply_markup=nav_buttons())
        return STEP_REG_PHONE
    context.user_data["reg_phone"] = phone
    name = context.user_data["reg_name"]
    await context.bot.send_message(chat_id=ADMIN_ID, text=f"–ù–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {name} | {phone}")
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("""CREATE TABLE IF NOT EXISTS registrations (
            id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, name TEXT,
            phone TEXT, status TEXT DEFAULT 'pending', timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )""")
        conn.execute("INSERT INTO registrations(user_id,name,phone) VALUES (?,?,?)", (update.effective_user.id, name, phone))
        conn.commit()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å 4-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:", reply_markup=nav_buttons())
    return STEP_REG_CODE

async def register_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if not re.fullmatch(r"\d{4}", code):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥.", reply_markup=nav_buttons())
        return STEP_REG_CODE
    name = context.user_data["reg_name"]
    user = update.effective_user
    await context.bot.send_message(chat_id=ADMIN_ID, text=f"–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ {name} ({user.id}): {code}")
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏", callback_data="deposit")],[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]])
    await update.message.reply_text("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!", reply_markup=kb)
    return STEP_MENU

# ‚Äî –†–æ–∑—Å–∏–ª–∫–∞ –∞–¥–º—ñ–Ω–æ–º ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def admin_broadcast_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text.strip()
    with sqlite3.connect(DB_NAME) as conn:
        users = conn.execute("SELECT DISTINCT user_id FROM registrations").fetchall()
    for (uid,) in users:
        try:
            await context.bot.send_message(chat_id=uid, text=msg)
        except:
            pass
    await update.message.reply_text("‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞.", reply_markup=nav_buttons())
    return STEP_MENU

# ‚Äî –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–¥–º—ñ–Ω) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def admin_search_execute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    param = update.message.text.strip()
    uid = int(param) if param.isdigit() else None
    with sqlite3.connect(DB_NAME) as conn:
        cur = conn.cursor()
        if uid:
            regs = cur.execute("SELECT id,user_id,name,phone,status,timestamp FROM registrations WHERE user_id=?", (uid,)).fetchall()
            deps = cur.execute("SELECT id,user_id,username,card,provider,payment,timestamp FROM deposits WHERE user_id=?", (uid,)).fetchall()
            wds = cur.execute("SELECT id,user_id,username,amount,method,details,source_code,timestamp FROM withdrawals WHERE user_id=?", (uid,)).fetchall()
            hdr = f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è user_id={uid}"
        else:
            regs = cur.execute("SELECT id,user_id,name,phone,status,timestamp FROM registrations WHERE name LIKE ?", (f"%{param}%",)).fetchall()
            deps = cur.execute("SELECT id,user_id,username,card,provider,payment,timestamp FROM deposits WHERE username LIKE ?", (f"%{param}%",)).fetchall()
            wds = cur.execute("SELECT id,user_id,username,amount,method,details,source_code,timestamp FROM withdrawals WHERE username LIKE ?", (f"%{param}%",)).fetchall()
            hdr = f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è '{param}'"
    secs = [f"üîé {hdr}"]
    secs.append("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:\n" + ("\n".join(f"#{r[0]} uid:{r[1]} {r[2]}|{r[3]}|{r[4]}|{r[5]}" for r in regs) if regs else "–Ω–µ–º–∞—î"))
    secs.append("–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:\n" + ("\n".join(f"#{r[0]} uid:{r[1]} {r[2]}|{r[3]}|{r[4]}|{r[5]}|{r[6]}" for r in deps) if deps else "–Ω–µ–º–∞—î"))
    secs.append("–í–∏–≤–µ–¥–µ–Ω–Ω—è:\n" + ("\n".join(f"#{r[0]} uid:{r[1]} {r[2]}|{r[3]}|{r[4]}|{r[5]}|–∫–æ–¥:{r[6]}|{r[7]}" for r in wds) if wds else "–Ω–µ–º–∞—î"))
    await update.message.reply_text("\n\n".join(secs), reply_markup=nav_buttons())
    return STEP_MENU

# ‚Äî –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω–∞ –Ω–∞ –∑–∞—è–≤–∫—É ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    orig = update.message.reply_to_message
    admin_msg_id = orig.message_id
    with sqlite3.connect(DB_NAME) as conn:
        row = conn.execute("SELECT user_id,provider FROM threads WHERE admin_msg_id=?", (admin_msg_id,)).fetchone()
    if not row:
        await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    user_id, provider = row
    text = update.message.text.strip()
    if provider == "üé∞ SUPEROMATIC":
        note = ("–î–ª—è –≥—Ä–∏ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\nhttps://kod.greenhost.pw\n–Ø–∫—â–æ –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è ‚Äî —É–≤—ñ–º–∫–Ω—ñ—Ç—å VPN.\n–î–µ—Ç–∞–ª—ñ ‚Äî —É ¬´–î–æ–ø–æ–º–æ–≥–∞¬ª.")
    else:
        note = ("–î—è–∫—É—î–º–æ –∑–∞ CHAMPION!\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üé∞ –∑–≤–µ—Ä—Ö—É –∑–ª—ñ–≤–∞ —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥.")
    await context.bot.send_message(chat_id=user_id, text=f"{text}\n\n{note}")
    await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
