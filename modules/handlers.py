import re
import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Message
from telegram.ext import (
    CommandHandler, CallbackQueryHandler, ConversationHandler,
    MessageHandler, filters, ContextTypes
)
from modules.config import ADMIN_ID, DB_NAME

# ‚Äî‚Äî‚Äî –°—Ç–∞–Ω–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
(
    STEP_MENU,
    STEP_CLIENT_CHOICE,
    STEP_CLIENT_CARD,
    STEP_PROVIDER,
    STEP_PAYMENT,
    STEP_CRYPTO_TYPE,
    STEP_CONFIRM_FILE,
    STEP_CONFIRMATION,
    STEP_REG_NAME,
    STEP_REG_PHONE,
    STEP_REG_CODE,
) = range(11)

PROVIDERS = ["üèÜ CHAMPION", "üé∞ SUPEROMATIC"]
PAYMENTS = ["–ö–∞—Ä—Ç–∞", "–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑"]


def setup_handlers(application):
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            STEP_MENU: [
                CallbackQueryHandler(menu_handler)
            ],

            # –í–∏–±—ñ—Ä –¥—ñ—ó ¬´–ö–ª—ñ—î–Ω—Ç¬ª
            STEP_CLIENT_CHOICE: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                CallbackQueryHandler(client_choice_handler),
            ],

            # –§–ª–æ—É ¬´–Ø –ö–ª—ñ—î–Ω—Ç¬ª
            STEP_CLIENT_CARD: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_card),
            ],
            STEP_PROVIDER: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                CallbackQueryHandler(process_provider),
            ],
            STEP_PAYMENT: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                CallbackQueryHandler(process_payment),
            ],
            STEP_CRYPTO_TYPE: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                CallbackQueryHandler(process_crypto_choice),
            ],
            STEP_CONFIRM_FILE: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                MessageHandler(filters.Document.ALL | filters.PHOTO | filters.VIDEO, process_file),
            ],
            STEP_CONFIRMATION: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                CallbackQueryHandler(confirm_submission, pattern="^confirm$"),
            ],

            # –§–ª–æ—É ¬´–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è¬ª
            STEP_REG_NAME: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, register_name),
            ],
            STEP_REG_PHONE: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, register_phone),
            ],
            STEP_REG_CODE: [
                CallbackQueryHandler(menu_handler, pattern="^(back|home)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, register_code),
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )
    application.add_handler(conv)

    # –ê–¥–º—ñ–Ω –º–æ–∂–µ reply –Ω–∞ –∑–∞—è–≤–∫—É –±–µ–∑ –∫–æ–º–∞–Ω–¥
    application.add_handler(
        MessageHandler(
            filters.TEXT & filters.User(ADMIN_ID) & filters.REPLY,
            admin_reply
        ),
        group=1
    )


def nav_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]
    ])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üé≤ –ö–ª—ñ—î–Ω—Ç", callback_data="client")],
        [InlineKeyboardButton("üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", callback_data="register")],
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏", callback_data="deposit")],
        [InlineKeyboardButton("üí∏ –í–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤", callback_data="withdraw")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],
    ]
    if update.effective_user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üõ† –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    text = "BIG BAME MONEY"
    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return STEP_MENU


async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "admin_panel":
        kb = [
            [InlineKeyboardButton("üí∞ –£—Å—ñ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", callback_data="admin_deposits")],
            [InlineKeyboardButton("üë§ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users")],
            [InlineKeyboardButton("üìÑ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è", callback_data="admin_withdrawals")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")],
        ]
        await query.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=InlineKeyboardMarkup(kb))
        return STEP_MENU

    # –Ø –ö–ª—ñ—î–Ω—Ç ‚Üí –≤–∏–±—ñ—Ä –¥—ñ—ó
    if data == "client":
        kb = [
            [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏", callback_data="enter_card")],
            [InlineKeyboardButton("–ó–Ω—è—Ç–∏ –∫–µ—à–±–µ–∫", callback_data="withdraw_cashback")],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
                InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")
            ]
        ]
        await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –¥—ñ—é:", reply_markup=InlineKeyboardMarkup(kb))
        return STEP_CLIENT_CHOICE

    if data == "register":
        await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∞–±–æ –Ω—ñ–∫–Ω–µ–π–º:", reply_markup=nav_buttons())
        return STEP_REG_NAME

    if data in ("back", "home"):
        return await start(update, context)

    await query.message.edit_text("–¶—è —Ñ—É–Ω–∫—Ü—ñ—è —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.", reply_markup=nav_buttons())
    return STEP_MENU


async def client_choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "enter_card":
        await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∫–ª—É–±—É:", reply_markup=nav_buttons())
        return STEP_CLIENT_CARD

    if data == "withdraw_cashback":
        await query.message.edit_text(
            "–§—É–Ω–∫—Ü—ñ—è –∑–Ω—è—Ç—Ç—è –∫–µ—à–±–µ–∫—É –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n"
            "–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏.",
            reply_markup=nav_buttons()
        )
        return STEP_MENU


async def process_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card = update.message.text.strip()
    if not re.fullmatch(r"\d{4,5}", card):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=nav_buttons())
        return STEP_CLIENT_CARD
    context.user_data["card"] = card

    kb = [[InlineKeyboardButton(p, callback_data=p)] for p in PROVIDERS] + [[
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")
    ]]
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_PROVIDER


async def process_provider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data in ("back", "home"):
        return await menu_handler(update, context)
    context.user_data["provider"] = query.data

    kb = [[InlineKeyboardButton(p, callback_data=p)] for p in PAYMENTS] + [[
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")
    ]]
    await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_PAYMENT


async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data
    if choice in ("back", "home"):
        return await menu_handler(update, context)
    context.user_data["payment"] = choice

    if choice == "–ö–∞—Ä—Ç–∞":
        text = (
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∫–∞–∑—É–π—Ç–µ –∫–æ—à—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–∫—É:\n\n"
            "üè∑ –¢–∞—Ä–∞—Å—é–∫ –í—ñ—Ç–∞–ª—ñ–π\n"
            "üè¶ –û—â–∞–¥–±–∞–Ω–∫\n"
            "üí≥ 4790 7299 5675 1465\n\n"
            "–ü—ñ—Å–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
            "‚Ä¢ —Ñ–æ—Ç–æ —á–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç\n‚Ä¢ –¥–æ–∫—É–º–µ–Ω—Ç (PDF)\n‚Ä¢ –≤—ñ–¥–µ–æ"
        )
        await query.message.edit_text(text, reply_markup=nav_buttons())
        return STEP_CONFIRM_FILE

    # –ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑
    crypto_kb = [
        [InlineKeyboardButton("Trustee Plus", callback_data="Trustee Plus")],
        [InlineKeyboardButton("Telegram Wallet", callback_data="Telegram Wallet")],
        [InlineKeyboardButton("Coinbase Wallet", callback_data="Coinbase Wallet")],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
            InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")
        ],
    ]
    await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –∫—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑—É:", reply_markup=InlineKeyboardMarkup(crypto_kb))
    return STEP_CRYPTO_TYPE


async def process_crypto_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data
    if choice in ("back", "home"):
        return await menu_handler(update, context)
    context.user_data["payment"] = choice

    if choice == "Trustee Plus":
        text = (
            "–ü–µ—Ä–µ–∫–∞–∑—É–π—Ç–µ USDT –Ω–∞ –≤–∞—à –∞–∫–∞—É–Ω—Ç Trustee Plus:\n\n"
            "üîë ID: bgm001\n\n"
            "–ü—ñ—Å–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–∏ –≤—ñ–¥–µ–æ."
        )
        await query.message.edit_text(text, reply_markup=nav_buttons())
        return STEP_CONFIRM_FILE

    await query.message.edit_text(
        f"–ú–µ—Ç–æ–¥ ¬´{choice}¬ª –Ω–∞—Ä–∞–∑—ñ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–±.",
        reply_markup=nav_buttons()
    )
    return STEP_MENU


async def process_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["file"] = update.message
    kb = [
        [InlineKeyboardButton("‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="confirm")],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
            InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")
        ],
    ]
    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(kb))
    return STEP_CONFIRMATION


async def confirm_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    card = context.user_data.get("card")
    provider = context.user_data.get("provider")
    payment = context.user_data.get("payment")
    file_msg: Message = context.user_data.get("file")

    caption = (
        f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n"
        f"‚Ä¢ –ö–∞—Ä—Ç–∫–∞: {card}\n"
        f"‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}\n"
        f"‚Ä¢ –ú–µ—Ç–æ–¥: {payment}"
    )

    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS threads (
                admin_msg_id INTEGER PRIMARY KEY,
                user_id       INTEGER,
                user_msg_id   INTEGER,
                provider      TEXT
            )
        """)
        conn.commit()

    admin_msg = await file_msg.copy(chat_id=ADMIN_ID, caption=caption)
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            "INSERT OR REPLACE INTO threads(admin_msg_id, user_id, user_msg_id, provider) VALUES (?, ?, ?, ?)",
            (admin_msg.message_id, user.id, file_msg.message_id, provider)
        )
        conn.commit()

    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS deposits (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                card TEXT,
                provider TEXT,
                payment TEXT,
                file_type TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.execute(
            "INSERT INTO deposits(user_id, username, card, provider, payment, file_type) VALUES (?, ?, ?, ?, ?, ?)",
            (user.id, user.username or "", card, provider, payment,
             file_msg.effective_attachment.__class__.__name__)
        )
        conn.commit()

    await query.message.edit_text("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞.", reply_markup=nav_buttons())
    return STEP_MENU


# ‚Äî‚Äî‚Äî –§–ª–æ—É ‚Äú–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è‚Äù ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["reg_name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—Ñ–æ—Ä–º–∞—Ç 0XXXXXXXXX):", reply_markup=nav_buttons())
    return STEP_REG_PHONE

async def register_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not re.fullmatch(r"0\d{9}", phone):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=nav_buttons())
        return STEP_REG_PHONE

    context.user_data["reg_phone"] = phone
    name = context.user_data["reg_name"]
    await context.bot.send_message(chat_id=ADMIN_ID, text=f"–ù–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:\nüë§ {name}\nüìû {phone}")

    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS registrations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                name TEXT,
                phone TEXT,
                status TEXT DEFAULT 'pending',
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.execute("INSERT INTO registrations(user_id, name, phone) VALUES (?, ?, ?)",
                     (update.effective_user.id, name, phone))
        conn.commit()

    await update.message.reply_text("–î—è–∫—É—î–º–æ! –í–≤–µ–¥—ñ—Ç—å 4-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:", reply_markup=nav_buttons())
    return STEP_REG_CODE

async def register_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if not re.fullmatch(r"\d{4}", code):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –í–≤–µ–¥—ñ—Ç—å 4 —Ü–∏—Ñ—Ä–∏:", reply_markup=nav_buttons())
        return STEP_REG_CODE

    name = context.user_data["reg_name"]
    user = update.effective_user
    await context.bot.send_message(chat_id=ADMIN_ID, text=f"–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ {name} ({user.id}): {code}")

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏", callback_data="deposit")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")]
    ])
    await update.message.reply_text("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!", reply_markup=kb)
    return STEP_MENU


async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    orig = update.message.reply_to_message
    admin_msg_id = orig.message_id

    with sqlite3.connect(DB_NAME) as conn:
        row = conn.execute(
            "SELECT user_id, provider FROM threads WHERE admin_msg_id = ?",
            (admin_msg_id,)
        ).fetchone()

    if not row:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
        return

    user_id, provider = row
    admin_text = update.message.text.strip()

    if provider == "üé∞ SUPEROMATIC":
        note = (
            "–î–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n"
            "https://kod.greenhost.pw\n\n"
            "–Ø–∫—â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è ‚Äî —É–≤—ñ–º–∫–Ω—ñ—Ç—å VPN.\n"
            "–ë—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó ‚Äî —É —Ä–æ–∑–¥—ñ–ª—ñ ¬´–î–æ–ø–æ–º–æ–≥–∞¬ª."
        )
    else:  # provider == "üèÜ CHAMPION"
        note = (
            "–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–±—ñ—Ä CHAMPION!\n\n"
            "–©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –≥—Ä—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —ñ–∫–æ–Ω–∫—É üé∞\n"
            "—É –ª—ñ–≤–æ–º—É –≤–µ—Ä—Ö–Ω—å–æ–º—É –∫—É—Ç–∫—É –µ–∫—Ä–∞–Ω—É –±–æ—Ç–∞ —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥."
        )

    final_text = f"{admin_text}\n\n{note}"
    await context.bot.send_message(chat_id=user_id, text=final_text)
    await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
