# modules/handlers/withdraw.py

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)
from modules.keyboards import nav_buttons, payment_buttons, client_menu
from modules.callbacks import CB
from modules.states import (
    STEP_WITHDRAW_AMOUNT,
    STEP_WITHDRAW_METHOD,
    STEP_WITHDRAW_DETAILS,
    STEP_WITHDRAW_CONFIRM,
)

# 1) –°—Ç–∞—Ä—Ç —Å—Ü–µ–Ω–∞—Ä—ñ—é –≤–∏–≤–µ–¥–µ–Ω–Ω—è
async def withdraw_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    msg = await update.callback_query.message.reply_text(
        "üí∏ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è:",
        reply_markup=nav_buttons()
    )
    context.user_data['base_msg'] = msg.message_id
    return STEP_WITHDRAW_AMOUNT

# 2) –û—Ç—Ä–∏–º—É—î–º–æ —Å—É–º—É
async def withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount = update.message.text.strip()
    context.user_data['withdraw_amount'] = amount
    base_id = context.user_data['base_msg']

    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=base_id,
        text=f"üí∏ –°—É–º–∞ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è: {amount}\n–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥:",
        reply_markup=payment_buttons()  # –ö–∞—Ä—Ç–∞ / –ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑ + nav
    )
    return STEP_WITHDRAW_METHOD

# 3) –û—Ç—Ä–∏–º—É—î–º–æ –º–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
async def withdraw_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    method = update.callback_query.data
    context.user_data['withdraw_method'] = method
    base_id = context.user_data['base_msg']

    await update.callback_query.message.edit_text(
        text=f"üí∏ –ú–µ—Ç–æ–¥: {method}\n–í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ ({method}):",
        reply_markup=nav_buttons()
    )
    return STEP_WITHDRAW_DETAILS

# 4) –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏
async def withdraw_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    details = update.message.text.strip()
    context.user_data['withdraw_details'] = details
    base_id = context.user_data['base_msg']

    confirm_kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=CB.WITHDRAW_CONFIRM.value)],
        [InlineKeyboardButton("üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏",    callback_data=CB.BACK.value)],
    ])

    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=base_id,
        text=(
            f"üí∏ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∏–≤–µ–¥–µ–Ω–Ω—è:\n"
            f"‚Ä¢ –°—É–º–∞: {context.user_data['withdraw_amount']}\n"
            f"‚Ä¢ –ú–µ—Ç–æ–¥: {context.user_data['withdraw_method']}\n"
            f"‚Ä¢ –†–µ–∫–≤—ñ–∑–∏—Ç–∏: {details}"
        ),
        reply_markup=confirm_kb
    )
    return STEP_WITHDRAW_CONFIRM

# 5) –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def withdraw_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    amt    = context.user_data['withdraw_amount']
    method = context.user_data['withdraw_method']
    details= context.user_data['withdraw_details']

    # TODO: —à–ª–µ–º–æ –∞–¥–º—ñ–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞—è–≤–∫—É
    # await notify_admin_withdraw(update.effective_user.id, amt, method, details)

    await update.callback_query.message.edit_text(
        f"üéâ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è {amt} –∑–∞ –º–µ—Ç–æ–¥–æ–º {method} –ø—Ä–∏–π–Ω—è—Ç–æ.\n"
        "–î—è–∫—É—î–º–æ –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è CasinoBot!",
        reply_markup=client_menu(is_authorized=True)
    )

    context.user_data.clear()
    return ConversationHandler.END

# ConversationHandler –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è
withdraw_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(withdraw_start, pattern=f"^{CB.WITHDRAW_START.value}$")],
    states={
        STEP_WITHDRAW_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, withdraw_amount)],
        STEP_WITHDRAW_METHOD: [CallbackQueryHandler(withdraw_method, pattern="^–ö–∞—Ä—Ç–∞$|^–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑$")],
        STEP_WITHDRAW_DETAILS:[MessageHandler(filters.TEXT & ~filters.COMMAND, withdraw_details)],
        STEP_WITHDRAW_CONFIRM:[CallbackQueryHandler(withdraw_confirm, pattern=f"^{CB.WITHDRAW_CONFIRM.value}$")],
    },
    fallbacks=[CallbackQueryHandler(withdraw_start, pattern=f"^{CB.BACK.value}$")],
    per_message=True,
)
