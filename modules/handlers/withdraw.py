# modules/handlers/withdraw.py

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
    Application
)
from modules.config import DB_NAME
from modules.callbacks import CB
from modules.keyboards import nav_buttons, payment_buttons
from modules.states import (
    STEP_WITHDRAW_AMOUNT,
    STEP_WITHDRAW_METHOD,
    STEP_WITHDRAW_DETAILS,
    STEP_WITHDRAW_CONFIRM
)

async def withdraw_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Entry point: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ¬´üí∏ –í–∏–≤–µ—Å—Ç–∏ –∫–æ—à—Ç–∏¬ª (callback_data="withdraw_start").
    –ü—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º—É.
    """
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "üí≥ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è:", 
        reply_markup=nav_buttons()
    )
    return STEP_WITHDRAW_AMOUNT

async def process_withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö—Ä–æ–∫ STEP_WITHDRAW_AMOUNT: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —Å—É–º—É.
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ, —ñ –ø–∏—Ç–∞—î–º–æ –º–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è.
    """
    text = update.message.text.strip()
    try:
        amount = float(text)
    except ValueError:
        await update.message.reply_text(
            "‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
            reply_markup=nav_buttons()
        )
        return STEP_WITHDRAW_AMOUNT

    context.user_data["withdraw_amount"] = amount

    # –ü–∏—Ç–∞—î–º–æ –º–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è (–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ payment_buttons)
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:", 
        reply_markup=payment_buttons()
    )
    return STEP_WITHDRAW_METHOD

async def process_withdraw_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö—Ä–æ–∫ STEP_WITHDRAW_METHOD: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –Ω–∞ –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ –º–µ—Ç–æ–¥—É
    (callback_data == "–ö–∞—Ä—Ç–∞" –∞–±–æ "–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑").
    """
    await update.callback_query.answer()
    method = update.callback_query.data
    context.user_data["withdraw_method"] = method

    # –î–∞–ª—ñ ‚Äì –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –∞–±–æ –≥–∞–º–∞–Ω–µ—Ü—å)
    await update.callback_query.message.reply_text(
        "üí≥ –í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –∞–±–æ –≥–∞–º–∞–Ω–µ—Ü—å):", 
        reply_markup=nav_buttons()
    )
    return STEP_WITHDRAW_DETAILS

async def process_withdraw_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö—Ä–æ–∫ STEP_WITHDRAW_DETAILS: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç (—Ä–µ–∫–≤—ñ–∑–∏—Ç–∏).
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è¬ª.
    """
    details = update.message.text.strip()
    context.user_data["withdraw_details"] = details

    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è", 
                             callback_data=CB.WITHDRAW_CONFIRM.value)
    ]])
    await update.message.reply_text(
        "‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è¬ª, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏.",
        reply_markup=kb
    )
    return STEP_WITHDRAW_CONFIRM

async def confirm_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö—Ä–æ–∫ STEP_WITHDRAW_CONFIRM: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è¬ª.
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç —É –ë–î (—Ç–∞–±–ª–∏—Ü—è withdrawals) —ñ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ, —â–æ —á–µ–∫–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É.
    """
    await update.callback_query.answer()
    user = update.effective_user

    amount  = context.user_data.get("withdraw_amount")
    method  = context.user_data.get("withdraw_method")
    details = context.user_data.get("withdraw_details")

    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            "INSERT INTO withdrawals (user_id, username, amount, method, details) VALUES (?, ?, ?, ?, ?)",
            (user.id, user.username, amount, method, details)
        )
        conn.commit()

    await update.callback_query.message.reply_text(
        "üí∏ –í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=nav_buttons()
    )
    return ConversationHandler.END

withdraw_conv = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(withdraw_start, pattern=f"^{CB.WITHDRAW_START.value}$")
    ],
    states={
        STEP_WITHDRAW_AMOUNT:  [MessageHandler(filters.TEXT & ~filters.COMMAND, process_withdraw_amount)],
        STEP_WITHDRAW_METHOD:  [CallbackQueryHandler(process_withdraw_method, pattern="^(" + "|".join(PAYMENTS) + ")$")],
        STEP_WITHDRAW_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_withdraw_details)],
        STEP_WITHDRAW_CONFIRM: [CallbackQueryHandler(confirm_withdraw, pattern=f"^{CB.WITHDRAW_CONFIRM.value}$")],
    },
    fallbacks=[
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.BACK.value}$"),
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.HOME.value}$"),
    ],
    per_chat=True,
)

def register_withdraw_handlers(app: Application) -> None:
    """
    –†–µ—î—Å—Ç—Ä—É—î withdraw_conv (ConversationHandler) —É –≥—Ä—É–ø—ñ 0.
    """
    app.add_handler(withdraw_conv, group=0)
