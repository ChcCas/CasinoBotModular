# modules/handlers/withdraw.py

import sqlite3
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
    Application
)
from modules.config import DB_NAME
from modules.callbacks import CB
from modules.keyboards import nav_buttons, payment_buttons
from modules.states import (
    STEP_WITHDRAW_AMOUNT,
    STEP_WITHDRAW_METHOD,
    STEP_WITHDRAW_DETAILS,
    STEP_WITHDRAW_CONFIRM,
    STEP_MENU
)

async def start_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—Ö—ñ–¥ —É —Å—Ü–µ–Ω–∞—Ä—ñ–π ¬´–í–∏–≤–µ—Å—Ç–∏ –∫–æ—à—Ç–∏¬ª.
    –ü–∏—Ç–∞—î–º–æ —Å—É–º—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è.
    """
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "üí≥ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è:",
        reply_markup=nav_buttons()
    )
    return STEP_WITHDRAW_AMOUNT

async def process_withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–ª–∏ –∫–ª—ñ—î–Ω—Ç –≤–≤—ñ–≤ —Å—É–º—É:
    1) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—ó –≤ user_data
    2) –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –º–µ—Ç–æ–¥—É (Card / Crypto)
    """
    text = update.message.text.strip()
    try:
        amount = float(text)
    except ValueError:
        await update.message.reply_text(
            "‚ùóÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤—ñ—Ä–Ω—É —á–∏—Å–ª–æ–≤—É —Å—É–º—É:",
            reply_markup=nav_buttons()
        )
        return STEP_WITHDRAW_AMOUNT

    context.user_data["withdraw_amount"] = amount
    await update.message.reply_text(
        "üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:", reply_markup=payment_buttons()
    )
    return STEP_WITHDRAW_METHOD

async def process_withdraw_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–ª–∏ –∫–ª—ñ—î–Ω—Ç –æ–±—Ä–∞–≤ –º–µ—Ç–æ–¥ ¬´–ö–∞—Ä—Ç–∞¬ª –∞–±–æ ¬´–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑¬ª.
    –ü–∏—Ç–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ –∞–±–æ –≥–∞–º–∞–Ω–µ—Ü—å).
    """
    method = update.callback_query.data
    context.user_data["withdraw_method"] = method

    await update.callback_query.message.reply_text(
        f"üí≥ –í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è {method} (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –∞–±–æ –∞–¥—Ä–µ—Å –≥–∞–º–∞–Ω—Ü—è):",
        reply_markup=nav_buttons()
    )
    return STEP_WITHDRAW_DETAILS

async def process_withdraw_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–ª–∏ –∫–ª—ñ—î–Ω—Ç –≤–≤—ñ–≤ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏.
    –ü—Ä–æ—Å–∏–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è.
    """
    details = update.message.text.strip()
    context.user_data["withdraw_details"] = details

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è", callback_data="withdraw_confirm")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CB.BACK.value)],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=CB.HOME.value)],
    ])

    amt = context.user_data.get("withdraw_amount")
    method = context.user_data.get("withdraw_method")
    await update.message.reply_text(
        f"üí≥ –í–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–≤–µ—Å—Ç–∏ {amt} UAH —á–µ—Ä–µ–∑ {method} ({details}).\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è¬ª, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏.",
        reply_markup=kb
    )
    return STEP_WITHDRAW_CONFIRM

async def confirm_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–ª–∏ –∫–ª—ñ—î–Ω—Ç –Ω–∞—Ç–∏—Å–Ω—É–≤ ¬´‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è¬ª (callback_data="withdraw_confirm").
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Ç–∞–±–ª–∏—Ü—é withdrawals —ñ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    await update.callback_query.answer()
    user_id = update.effective_user.id
    amount = context.user_data.get("withdraw_amount")
    method = context.user_data.get("withdraw_method")
    details = context.user_data.get("withdraw_details")

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO withdrawals (user_id, amount, method, details)
        VALUES (?, ?, ?, ?)
    """, (user_id, amount, method, details))
    conn.commit()
    conn.close()

    text = f"üí∏ –í–∞—à–µ –≤–∏–≤–µ–¥–µ–Ω–Ω—è {amount} UAH —á–µ—Ä–µ–∑ {method} ({details}) —Å—Ç–≤–æ—Ä–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
    keyboard = nav_buttons()
    await update.callback_query.message.reply_text(text, reply_markup=keyboard)
    return STEP_MENU

def register_withdraw_handlers(app: Application) -> None:
    """
    –†–µ–≥—ñ—Å—Ç—Ä—É—î–º–æ ConversationHandler(¬´–í–∏–≤–µ—Å—Ç–∏¬ª) —É –≥—Ä—É–ø—ñ 0.
    """
    withdraw_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_withdraw, pattern=f"^{CB.WITHDRAW_START.value}$")
        ],
        states={
            STEP_WITHDRAW_AMOUNT:  [MessageHandler(filters.TEXT & ~filters.COMMAND, process_withdraw_amount)],
            STEP_WITHDRAW_METHOD:  [CallbackQueryHandler(process_withdraw_method,
                                                          pattern="^(" + "|".join(["–ö–∞—Ä—Ç–∞", "–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑"]) + ")$")],
            STEP_WITHDRAW_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_withdraw_details)],
            STEP_WITHDRAW_CONFIRM: [CallbackQueryHandler(confirm_withdraw, pattern="^withdraw_confirm$")],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.BACK.value}$"),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.HOME.value}$"),
        ],
        per_chat=True
    )

    app.add_handler(withdraw_conv, group=0)
