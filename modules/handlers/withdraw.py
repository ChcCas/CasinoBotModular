# modules/handlers/withdraw.py

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
    Application
)
from modules.config import DB_NAME
from modules.callbacks import CB
from modules.keyboards import nav_buttons, payment_buttons, PAYMENTS
from modules.states import (
    STEP_WITHDRAW_AMOUNT,
    STEP_WITHDRAW_METHOD,
    STEP_WITHDRAW_DETAILS,
    STEP_WITHDRAW_CONFIRM
)

async def withdraw_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚Äúüí∏ –í–∏–≤–µ—Å—Ç–∏ –∫–æ—à—Ç–∏‚Äù (callback_data="withdraw_start").
    –ü—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è.
    """
    await update.callback_query.answer()
    text = "üí≥ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è:"
    sent = await update.callback_query.message.reply_text(
        text,
        reply_markup=nav_buttons()
    )
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_WITHDRAW_AMOUNT

async def process_withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–≤—ñ–≤ —Å—É–º—É –≤–∏–≤–µ–¥–µ–Ω–Ω—è.
    –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó ‚Äî –ø—Ä–æ—Å–∏–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏.
    –Ü–Ω–∞–∫—à–µ ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—É–º—É —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –º–µ—Ç–æ–¥—É.
    """
    text_in = update.message.text.strip()
    try:
        amount = float(text_in)
    except ValueError:
        base_id = context.user_data.get("base_msg_id")
        if base_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=base_id,
                    text="‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100):",
                    reply_markup=nav_buttons()
                )
            except BadRequest as e:
                # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ —Ñ–∞–∫—Ç–∏—á–Ω–æ –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–µ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
                msg = str(e)
                if "Message is not modified" not in msg and "Message to edit not found" not in msg:
                    raise
        return STEP_WITHDRAW_AMOUNT

    context.user_data["withdraw_amount"] = amount
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text="üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:",
                reply_markup=payment_buttons()
            )
        except BadRequest as e:
            msg = str(e)
            if "Message is not modified" not in msg and "Message to edit not found" not in msg:
                raise
    return STEP_WITHDRAW_METHOD

async def process_withdraw_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤ –º–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è (callback_data ‚àà PAYMENTS).
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ —ñ –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—ñ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –∞–±–æ –≥–∞–º–∞–Ω–µ—Ü—å).
    """
    await update.callback_query.answer()
    method = update.callback_query.data
    context.user_data["withdraw_method"] = method

    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text="üí≥ –í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –∞–±–æ –≥–∞–º–∞–Ω–µ—Ü—å):",
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            msg = str(e)
            if "Message is not modified" not in msg and "Message to edit not found" not in msg:
                raise
    return STEP_WITHDRAW_DETAILS

async def process_withdraw_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ —Å–≤–æ—ó —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ (—Ç–µ–∫—Å—Ç).
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—Ö —ñ –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏¬ª.
    """
    details = update.message.text.strip()
    context.user_data["withdraw_details"] = details

    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=CB.WITHDRAW_CONFIRM.value)
    ]])
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text="‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏¬ª, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏:",
                reply_markup=kb
            )
        except BadRequest as e:
            msg = str(e)
            if "Message is not modified" not in msg and "Message to edit not found" not in msg:
                raise
    return STEP_WITHDRAW_CONFIRM

async def confirm_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏¬ª (callback_data="withdraw_confirm").
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—é withdrawals —ñ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ
    —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è.
    """
    await update.callback_query.answer()
    user = update.effective_user
    amount  = context.user_data.get("withdraw_amount")
    method  = context.user_data.get("withdraw_method")
    details = context.user_data.get("withdraw_details")

    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            """
            INSERT INTO withdrawals
              (user_id, username, amount, method, details)
            VALUES (?, ?, ?, ?, ?)
            """,
            (user.id, user.username, amount, method, details)
        )
        conn.commit()

    base_id = context.user_data.get("base_msg_id")
    final_text = "üí∏ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –æ–±—Ä–æ–±–∫–∏."
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=final_text,
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            msg = str(e)
            if "Message is not modified" not in msg and "Message to edit not found" not in msg:
                raise

    context.user_data.pop("base_msg_id", None)
    return ConversationHandler.END

withdraw_conv = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(withdraw_start, pattern=f"^{CB.WITHDRAW_START.value}$")
    ],
    states={
        STEP_WITHDRAW_AMOUNT:  [MessageHandler(filters.TEXT & ~filters.COMMAND, process_withdraw_amount)],
        STEP_WITHDRAW_METHOD:  [CallbackQueryHandler(process_withdraw_method, pattern="^(" + "|".join(PAYMENTS) + ")$")],
        STEP_WITHDRAW_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_withdraw_details)],
        STEP_WITHDRAW_CONFIRM: [CallbackQueryHandler(confirm_withdraw, pattern=f"^{CB.WITHDRAW_CONFIRM.value}$")],
    },
    fallbacks=[
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.BACK.value}$"),
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.HOME.value}$"),
    ],
    per_chat=True,
)

def register_withdraw_handlers(app: Application) -> None:
    """
    –†–µ–≥—ñ—Å—Ç—Ä—É—î ConversationHandler –¥–ª—è —Å—Ü–µ–Ω–∞—Ä—ñ—é –≤–∏–≤–µ–¥–µ–Ω–Ω—è (–≥—Ä—É–ø–∞ 0).
    """
    app.add_handler(withdraw_conv, group=0)
