import re
import sqlite3
from telegram import Update
from telegram.ext import (
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    Application
)
from modules.config import DB_NAME
from modules.keyboards import nav_buttons, payment_buttons
from modules.callbacks import CB
from modules.states import (
    STEP_WITHDRAW_AMOUNT,
    STEP_WITHDRAW_METHOD,
    STEP_WITHDRAW_DETAILS,
    STEP_WITHDRAW_CONFIRM,
)
from datetime import datetime

async def start_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—Ö—ñ–¥ —É —Å—Ü–µ–Ω–∞—Ä—ñ–π ¬´–í–∏–≤–µ—Å—Ç–∏ –∫–æ—à—Ç–∏¬ª (callback_data="withdraw_start").
    –ü–∏—Ç–∞—î–º–æ —Å—É–º—É.
    """
    await update.callback_query.answer()
    text = "üí≥ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è:"
    sent = await update.callback_query.message.reply_text(text, reply_markup=nav_buttons())
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_WITHDRAW_AMOUNT

async def process_withdraw_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–ª—ñ—î–Ω—Ç –≤–≤–æ–¥–∏—Ç—å —Å—É–º—É –≤–∏–≤–µ–¥–µ–Ω–Ω—è.
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –º–µ—Ç–æ–¥—É –≤–∏–≤–µ–¥–µ–Ω–Ω—è.
    """
    try:
        amount = float(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É:", reply_markup=nav_buttons())
        return STEP_WITHDRAW_AMOUNT

    context.user_data["withdraw_amount"] = amount
    text = "–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è:"
    sent = await update.message.reply_text(text, reply_markup=payment_buttons())
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_WITHDRAW_METHOD

async def process_withdraw_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–ª—ñ—î–Ω—Ç –æ–±–∏—Ä–∞—î –º–µ—Ç–æ–¥ (¬´–ö–∞—Ä—Ç–∞¬ª –∞–±–æ ¬´–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑¬ª).
    –ó–∞–ø–∏—Ç—É—î–º–æ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ / –≥–∞–º–∞–Ω–µ—Ü—å).
    """
    method = update.callback_query.data
    context.user_data["withdraw_method"] = method
    await update.callback_query.answer()

    text = "üí≥ –í–≤–µ–¥—ñ—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –∞–±–æ –≥–∞–º–∞–Ω–µ—Ü—å):"
    sent = await update.callback_query.message.reply_text(text, reply_markup=nav_buttons())
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_WITHDRAW_DETAILS

async def process_withdraw_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–ª—ñ—î–Ω—Ç –Ω–∞–¥—Å–∏–ª–∞—î —Ç–µ–∫—Å—Ç —ñ–∑ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ (—Ä—è–¥–æ–∫).
    –ú–∏ –∑–±–µ—Ä–µ–º–æ –≤—Å–µ –≤ –ë–î.
    """
    details = update.message.text.strip()
    user = update.effective_user
    user_id = user.id
    amount = context.user_data.get("withdraw_amount")
    method = context.user_data.get("withdraw_method")
    now = datetime.utcnow().isoformat()

    # –ó–∞–ø–∏—Å—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —É —Ç–∞–±–ª–∏—Ü—é transactions
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO transactions (user_id, type, amount, info, timestamp) VALUES (?, ?, ?, ?, ?)",
        (user_id, "withdraw", amount, f"{method}: {details}", now)
    )
    conn.commit()
    conn.close()

    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞:
    text = "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
    keyboard = client_menu(is_authorized=True)
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=text,
                reply_markup=keyboard
            )
        except Exception as e:
            # –Ø–∫—â–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ ‚Üí –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –Ω–æ–≤–µ
            sent = await update.message.reply_text(text, reply_markup=keyboard)
            context.user_data["base_msg_id"] = sent.message_id
    else:
        sent = await update.message.reply_text(text, reply_markup=keyboard)
        context.user_data["base_msg_id"] = sent.message_id

    context.user_data.pop("base_msg_id", None)
    return ConversationHandler.END

def register_withdraw_handlers(app: Application) -> None:
    withdraw_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_withdraw, pattern=f"^{CB.WITHDRAW_START.value}$")
        ],
        states={
            STEP_WITHDRAW_AMOUNT:  [MessageHandler(filters.TEXT & ~filters.COMMAND, process_withdraw_amount)],
            STEP_WITHDRAW_METHOD:  [CallbackQueryHandler(process_withdraw_method, pattern="^(–ö–∞—Ä—Ç–∞|–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑)$")],
            STEP_WITHDRAW_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_withdraw_details)],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.BACK.value}$"),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.HOME.value}$"),
        ],
        per_chat=True,
    )
    app.add_handler(withdraw_conv, group=0)
