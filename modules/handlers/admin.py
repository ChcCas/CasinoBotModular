# modules/handlers/admin.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters, Application
from modules.keyboards import admin_panel_kb, client_menu, nav_buttons
from modules.callbacks import CB
from modules.states import STEP_MENU, STEP_ADMIN_SEARCH, STEP_ADMIN_BROADCAST
from modules.db import authorize_card, search_user, broadcast_to_all

async def admin_confirm_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    CallbackQueryHandler –¥–ª—è ‚Äúadmin_confirm_card:<user_id>:<card>‚Äù.
    –ê–¥–º—ñ–Ω –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚Äú‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É‚Äù.
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–∞—Ä—Ç–∫—É, –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞, —Ä–µ–¥–∞–≥—É—î–º–æ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    await update.callback_query.answer()
    _, user_id_str, card = update.callback_query.data.split(":", 2)
    user_id = int(user_id_str)

    authorize_card(user_id, card)

    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞
    await context.bot.send_message(
        chat_id=user_id,
        text=f"üéâ –í–∞—à–∞ –∫–∞—Ä—Ç–∫–∞ {card} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞. –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.",
        reply_markup=client_menu(is_authorized=True)
    )

    # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    try:
        await update.callback_query.message.edit_text(
            text=f"‚úÖ –ö–∞—Ä—Ç–∫–∞ {card} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞."
        )
    except BadRequest as e:
        if "Message is not modified" not in str(e):
            raise
    return

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    CallbackQueryHandler –¥–ª—è ‚Äúadmin_panel‚Äù.
    –ù–∞–¥—Å–∏–ª–∞—î–º–æ/—Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª–ª—é —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ message_id.
    """
    await update.callback_query.answer()

    text = "üõ† –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:"
    sent = await update.callback_query.message.reply_text(
        text,
        reply_markup=admin_panel_kb()
    )
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_ADMIN_SEARCH

async def admin_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    CallbackQueryHandler –¥–ª—è ‚Äúadmin_search‚Äù (–Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è ‚Äúüîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞‚Äù).
    –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: ‚Äú–í–≤–µ–¥—ñ—Ç—å ID –∞–±–æ –∫–∞—Ä—Ç–∫—É –¥–ª—è –ø–æ—à—É–∫—É‚Äù.
    """
    await update.callback_query.answer()
    base_id = context.user_data.get("base_msg_id")
    new_text = "üîç –í–≤–µ–¥—ñ—Ç—å ID –∞–±–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –ø–æ—à—É–∫—É:"
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=new_text,
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                raise
    return STEP_ADMIN_BROADCAST

async def admin_search_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    MessageHandler –ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    –í–∏–∫–æ–Ω—É—î–º–æ search_user —ñ —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
    """
    query = update.message.text.strip()
    user = search_user(query)
    if user:
        text = (
            f"üë§ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞:\n"
            f"‚Ä¢ user_id: {user['user_id']}\n"
            f"‚Ä¢ card: {user['card']}\n"
            f"‚Ä¢ phone: {user['phone'] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}"
        )
    else:
        text = "‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –∑ —Ç–∞–∫–∏–º ID –∞–±–æ –∫–∞—Ä—Ç–∫–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=text,
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                raise
    return STEP_MENU

async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    1) CallbackQueryHandler: –∞–¥–ºi–Ω –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚Äúüì¢ –†–æ–∑—Å–∏–ª–∫–∞‚Äù ‚Üí —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–∏—Ç–∞—î–º–æ —Ç–µ–∫—Å—Ç.
    2) MessageHandler: –∞–¥–ºi–Ω –≤–≤—ñ–≤ —Ç–µ–∫—Å—Ç ‚Üí –≤–∏–∫–æ–Ω—É—î–º–æ broadcast_to_all —ñ —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º.
    """
    if update.callback_query:
        await update.callback_query.answer()
        base_id = context.user_data.get("base_msg_id")
        new_text = "üì¢ –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º:"
        if base_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=base_id,
                    text=new_text,
                    reply_markup=nav_buttons()
                )
            except BadRequest as e:
                if "Message is not modified" not in str(e):
                    raise
        return STEP_ADMIN_BROADCAST

    # –Ø–∫—â–æ —Ü–µ —Ç–µ–∫—Å—Ç –≤—ñ–¥ –∞–¥–º—ñ–Ω—É (—Ä–æ–∑—Å–∏–ª–∫–∞)
    text_to_send = update.message.text.strip()
    broadcast_to_all(text_to_send)

    base_id = context.user_data.get("base_msg_id")
    final_text = "‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º."
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=final_text,
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                raise
    return STEP_MENU

def register_admin_handlers(app: Application) -> None:
    app.add_handler(
        CallbackQueryHandler(admin_confirm_card, pattern=r"^admin_confirm_card:\d+:.+"),
        group=0
    )
    app.add_handler(
        CallbackQueryHandler(show_admin_panel, pattern="^admin_panel$"),
        group=0
    )
    app.add_handler(
        CallbackQueryHandler(admin_search, pattern=f"^{CB.ADMIN_SEARCH.value}$"),
        group=0
    )
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_search_result),
        group=0
    )
    app.add_handler(
        CallbackQueryHandler(admin_broadcast, pattern=f"^{CB.ADMIN_BROADCAST.value}$"),
        group=0
    )
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast),
        group=0
    )
