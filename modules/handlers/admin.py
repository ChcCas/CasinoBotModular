# modules/handlers/navigation.py

import os
import re
import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from modules.config import ADMIN_ID, DB_NAME
from keyboards import PROVIDERS, PAYMENTS, nav_buttons, provider_buttons, payment_buttons
from states import (
    STEP_MENU,
    STEP_CLIENT_CARD,
    STEP_PROVIDER,
    STEP_PAYMENT,
    STEP_DEPOSIT_AMOUNT,
    STEP_CONFIRM_FILE,
    STEP_CONFIRMATION,
    STEP_WITHDRAW_AMOUNT,
    STEP_WITHDRAW_METHOD,
    STEP_WITHDRAW_DETAILS,
    STEP_WITHDRAW_CONFIRM,
    STEP_REG_NAME,
    STEP_REG_PHONE,
    STEP_REG_CODE,
    STEP_ADMIN_SEARCH,
    STEP_ADMIN_BROADCAST,
)
from .start import start_command
return await show_admin_panel(query)
from modules.db import search_user, broadcast_message

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—ñ threads
def _init_threads():
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS threads (
            user_id INTEGER PRIMARY KEY,
            base_msg_id INTEGER
        )
        """)
        conn.commit()

def register_navigation_handlers(app):
    _init_threads()

    conv = ConversationHandler(
        entry_points=[
            CommandHandler("start", start_command),
            CallbackQueryHandler(start_command, pattern="^(home|back)$", per_message=True),
        ],
        states={
            STEP_MENU: [
                CallbackQueryHandler(menu_handler, pattern=".*", per_message=True)
            ],
            # ‚Äî –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚Äî
            STEP_REG_NAME:  [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
            STEP_REG_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_phone)],
            STEP_REG_CODE:  [MessageHandler(filters.TEXT & ~filters.COMMAND, register_code)],
            # ‚Äî –ü—Ä–æ—Ñ—ñ–ª—å (–≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏) ‚Äî
            STEP_CLIENT_CARD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_card)],
            STEP_PROVIDER: [
                CallbackQueryHandler(
                    process_provider,
                    pattern="^(" + "|".join(map(re.escape, PROVIDERS)) + ")$",
                    per_message=True,
                )
            ],
            STEP_PAYMENT: [
                CallbackQueryHandler(
                    process_payment,
                    pattern="^(" + "|".join(map(re.escape, PAYMENTS)) + ")$",
                    per_message=True,
                )
            ],
            # ‚Äî –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è ‚Äî
            STEP_DEPOSIT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_deposit_amount)],
            STEP_CONFIRM_FILE:   [MessageHandler(filters.PHOTO | filters.Document.ALL | filters.VIDEO, process_file)],
            STEP_CONFIRMATION:   [CallbackQueryHandler(confirm_submission, pattern="^confirm$", per_message=True)],
            # ‚Äî –í–∏–≤–µ–¥–µ–Ω–Ω—è ‚Äî
            STEP_WITHDRAW_AMOUNT:  [MessageHandler(filters.TEXT & ~filters.COMMAND, process_withdraw_amount)],
            STEP_WITHDRAW_METHOD:  [CallbackQueryHandler(
                                      process_withdraw_method,
                                      pattern="^(" + "|".join(map(re.escape, PAYMENTS)) + ")$",
                                      per_message=True
                                   )],
            STEP_WITHDRAW_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_withdraw_details)],
            STEP_WITHDRAW_CONFIRM: [CallbackQueryHandler(confirm_withdrawal, pattern="^confirm_withdraw$", per_message=True)],
            # ‚Äî –ê–¥–º—ñ–Ω ‚Äî
            STEP_ADMIN_SEARCH:    [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_search)],
            STEP_ADMIN_BROADCAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast)],
        },
        fallbacks=[
            CallbackQueryHandler(start_command, pattern="^(home|back)$", per_message=True),
        ],
        per_message=True,
        per_chat=True,
        name="casino_conversation",
    )

    app.add_handler(conv, group=1)


async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    # ‚Äî –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å ‚Äî
    if data == "admin_panel":
        return await show_admin_panel(query)

    # ‚Äî –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é / –Ω–∞–∑–∞–¥ ‚Äî
    if data in ("home", "back"):
        return await start_command(update, context)

    # ‚Äî –ü—Ä–æ—Ñ—ñ–ª—å –∫–ª—ñ—î–Ω—Ç–∞ ‚Äî
    if data == "client_profile":
        from .profile import start_profile
        return await start_profile(update, context)

    if data == "client_find_card":
        from .profile import find_card
        return await find_card(update, context)

    # ‚Äî –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è ‚Äî
    if data == "deposit":
        await query.message.reply_text("üí∏ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:", reply_markup=nav_buttons())
        return STEP_DEPOSIT_AMOUNT

    # ‚Äî –í–∏–≤–µ–¥–µ–Ω–Ω—è ‚Äî
    if data in ("withdraw", "WITHDRAW_START"):
        await query.message.reply_text("üí≥ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è:", reply_markup=nav_buttons())
        return STEP_WITHDRAW_AMOUNT

    # ‚Äî –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚Äî
    if data == "register":
        await query.message.reply_text("üìù –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:", reply_markup=nav_buttons())
        return STEP_REG_NAME

    # ‚Äî –î–æ–ø–æ–º–æ–≥–∞ ‚Äî
    if data == "help":
        await query.message.reply_text(
            "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞:\n/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n–ö–æ–Ω—Ç–∞–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: @admin",
            reply_markup=nav_buttons()
        )
        return STEP_MENU

    return STEP_MENU


# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    context.user_data["reg_name"] = name
    await update.message.reply_text("üìû –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (0XXXXXXXXX):", reply_markup=nav_buttons())
    return STEP_REG_PHONE

async def register_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not re.match(r"^0\\d{9}$", phone):
        await update.message.reply_text("‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:", reply_markup=nav_buttons())
        return STEP_REG_PHONE
    context.user_data["reg_phone"] = phone
    await update.message.reply_text("üîë –í–≤–µ–¥—ñ—Ç—å 4-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:", reply_markup=nav_buttons())
    return STEP_REG_CODE

async def register_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–æ–¥ ‚Äî —Ü–µ —Ä—ñ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä–∏
    if not re.match(r"^\d{4}$", code):
        await update.message.reply_text(
            "‚ùóÔ∏è –ö–æ–¥ –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 4 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
            reply_markup=nav_buttons()
        )
        return STEP_REG_CODE

    # –î–∞–ª—ñ –≤–∞—à–∞ –ª–æ–≥—ñ–∫–∞: –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–¥—É, –≤—Å—Ç–∞–≤–∫–∞ –≤ –ë–î —Ç–æ—â–æ
    user_id = update.effective_user.id
    name = context.user_data.get("reg_name")
    phone = context.user_data.get("reg_phone")

    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            "INSERT INTO registrations (user_id, name, phone) VALUES (?, ?, ?)",
            (user_id, name, phone)
        )
        conn.commit()

    await update.message.reply_text(
        "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –û–±–µ—Ä—ñ—ñ—Ç—å –¥—ñ—é:",
        reply_markup=nav_buttons()
    )
    return STEP_MENU