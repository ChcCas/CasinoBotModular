# modules/handlers/admin.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters, Application
from modules.config import ADMIN_ID
from modules.db import authorize_card, search_user, broadcast_to_all
from modules.keyboards import admin_panel_kb, nav_buttons, client_menu
from modules.callbacks import CB
from modules.states import STEP_MENU, STEP_ADMIN_SEARCH, STEP_ADMIN_BROADCAST

async def admin_confirm_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫, –∫–æ–ª–∏ –∞–¥–º—ñ–Ω –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É¬ª.
    callback_data = "admin_confirm_card:<user_id>:<card>"
    """
    await update.callback_query.answer()
    data = update.callback_query.data  # ¬´admin_confirm_card:123456:4999887766554433¬ª
    _, user_id_str, card = data.split(":", 2)
    user_id = int(user_id_str)

    # 1) –î–æ–¥–∞—î–º–æ / –æ–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—ñ clients
    authorize_card(user_id, card)

    # 2) –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—É –∫–∞—Ä—Ç–∫—É
    await context.bot.send_message(
        chat_id=user_id,
        text=f"üéâ –í–∞—à–∞ –∫–∞—Ä—Ç–∫–∞ {card} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞. –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ!",
        reply_markup=client_menu(is_authorized=True)
    )

    # 3) –û–Ω–æ–≤–ª—é—î–º–æ (—Ä–µ–¥–∞–≥—É—î–º–æ) –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        await update.callback_query.message.edit_text(
            f"‚úÖ –ö–∞—Ä—Ç–∫–∞ {card} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞."
        )
    except BadRequest as e:
        msg = str(e).lower()
        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ —á–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
        if ("message to edit not found" in msg) or ("message is not modified" in msg):
            pass
        else:
            raise

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫, –∫–æ–ª–∏ –∞–¥–º—ñ–Ω –Ω–∞—Ç–∏—Å–Ω—É–≤ ¬´üõ† –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å¬ª.
    –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∞–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—ñ.
    """
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "üõ† –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_panel_kb()
    )
    return STEP_ADMIN_SEARCH

async def admin_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫, –∫–æ–ª–∏ –∞–¥–º—ñ–Ω –æ–±—Ä–∞–≤ ¬´üîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞¬ª.
    –ó–∞–ø–∏—Ç—É—î–º–æ ID –∞–±–æ –∫–∞—Ä—Ç–∫—É –¥–ª—è –ø–æ—à—É–∫—É.
    """
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "üîç –í–≤–µ–¥—ñ—Ç—å ID –∞–±–æ –∫–∞—Ä—Ç–∫—É –¥–ª—è –ø–æ—à—É–∫—É:",
        reply_markup=nav_buttons()
    )
    return STEP_ADMIN_SEARCH

async def do_admin_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç (ID –∞–±–æ –∫–∞—Ä—Ç–∫–∞), —à—É–∫–∞—î–º–æ —É –ë–î —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    query_text = update.message.text.strip()
    found = search_user(query_text)
    if found:
        await update.message.reply_text(
            f"üü¢ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞:\n"
            f"ID: {found['user_id']}\n"
            f"–ö–∞—Ä—Ç–∫–∞: {found['card']}"
        )
    else:
        await update.message.reply_text("‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    return STEP_MENU

async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫, –∫–æ–ª–∏ –∞–¥–º—ñ–Ω –æ–±—Ä–∞–≤ ¬´üì¢ –†–æ–∑—Å–∏–ª–∫–∞¬ª.
    –ü–∏—Ç–∞—î–º–æ, —è–∫–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏.
    """
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "üì¢ –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:", reply_markup=nav_buttons()
    )
    return STEP_ADMIN_BROADCAST

async def do_admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–∫—Å—Ç —ñ –≤–∏–∫–æ–Ω—É—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —ñ–∑ —Ç–∞–±–ª–∏—Ü—ñ clients.
    """
    text = update.message.text.strip()
    broadcast_to_all(text)
    await update.message.reply_text("üì¢ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.", reply_markup=nav_buttons())
    return STEP_MENU

def register_admin_handlers(app: Application) -> None:
    """
    –†–µ–≥—ñ—Å—Ç—Ä—É—î–º–æ –≤—Å—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≥—Ä—É–ø–∞ 0):
      1) –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ (admin_confirm_card)
      2) –ö–Ω–æ–ø–∫–∞ ¬´–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å¬ª (show_admin_panel)
      3) –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ (admin_search + do_admin_search)
      4) –†–æ–∑—Å–∏–ª–∫–∞ (admin_broadcast + do_admin_broadcast)
    """
    # 1) –ö–æ–ª–∏ –∞–¥–º—ñ–Ω –Ω–∞—Ç–∏—Å–∫–∞—î ¬´‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É¬ª
    app.add_handler(
        CallbackQueryHandler(admin_confirm_card, pattern=r"^admin_confirm_card:\d+:.+"),
        group=0
    )

    # 2) –ö–æ–ª–∏ –∞–¥–º—ñ–Ω –Ω–∞—Ç–∏—Å–∫–∞—î ¬´üõ† –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å¬ª
    app.add_handler(
        CallbackQueryHandler(show_admin_panel, pattern="^admin_panel$"),
        group=0
    )

    # 3) –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞: entry (callback) + message (Text)
    app.add_handler(
        CallbackQueryHandler(admin_search, pattern=f"^{CB.ADMIN_SEARCH.value}$"),
        group=0
    )
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, do_admin_search),
        group=0
    )

    # 4) –†–æ–∑—Å–∏–ª–∫–∞: entry (callback) + message (Text)
    app.add_handler(
        CallbackQueryHandler(admin_broadcast, pattern=f"^{CB.ADMIN_BROADCAST.value}$"),
        group=0
    )
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, do_admin_broadcast),
        group=0
    )
