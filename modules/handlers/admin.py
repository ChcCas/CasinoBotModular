# modules/handlers/admin.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters, Application
from modules.config import ADMIN_ID
from modules.db import authorize_card, search_user, broadcast_to_all
from modules.keyboards import client_menu, nav_buttons, admin_panel_kb
from modules.callbacks import CB
from modules.states import STEP_MENU, STEP_ADMIN_SEARCH, STEP_ADMIN_BROADCAST

async def admin_confirm_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î callback_data="admin_confirm_card:<user_id>:<card>".
    1) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–∞—Ä—Ç–∫—É —É –±–∞–∑—ñ (authorize_card).
    2) –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞, —â–æ –∫–∞—Ä—Ç–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞, —ñ –ø–æ–∫–∞–∑—É—î–º–æ client_menu(is_authorized=True).
    3) –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É.
    """
    await update.callback_query.answer()
    _, user_id_str, card = update.callback_query.data.split(":", 2)
    user_id = int(user_id_str)

    # 1) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–∞—Ä—Ç–∫—É
    authorize_card(user_id, card)

    # 2) –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞
    await context.bot.send_message(
        chat_id=user_id,
        text=f"üéâ –í–∞—à–∞ –∫–∞—Ä—Ç–∫–∞ {card} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞. –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.",
        reply_markup=client_menu(is_authorized=True)
    )

    # 3) –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    try:
        await update.callback_query.message.edit_text(
            text=f"‚úÖ –ö–∞—Ä—Ç–∫–∞ {card} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞."
        )
    except BadRequest as e:
        msg = str(e)
        if "Message is not modified" not in msg and "Message to edit not found" not in msg:
            raise
    return

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é admin_panel_kb.
    """
    await update.callback_query.answer()
    text = "üõ† –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:"
    sent = await update.callback_query.message.reply_text(
        text,
        reply_markup=admin_panel_kb()
    )
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_ADMIN_SEARCH

async def admin_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–ª–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚Äúüîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞‚Äù (callback_data="admin_search").
    –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ —É —Å—Ç–∞–Ω STEP_ADMIN_BROADCAST (–æ—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è).
    """
    await update.callback_query.answer()
    base_id = context.user_data.get("base_msg_id")
    new_text = "üîç –í–≤–µ–¥—ñ—Ç—å ID –∞–±–æ –∫–∞—Ä—Ç–∫—É –¥–ª—è –ø–æ—à—É–∫—É:"
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=new_text,
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            msg = str(e)
            if "Message to edit not found" in msg or "Message is not modified" in msg:
                sent = await update.callback_query.message.reply_text(
                    new_text,
                    reply_markup=nav_buttons()
                )
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    return STEP_ADMIN_BROADCAST

async def admin_search_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è admin (MessageHandler). –ü–æ—à—É–∫ —É –ë–î —á–µ—Ä–µ–∑ search_user.
    """
    query = update.message.text.strip()
    user = search_user(query)
    if user:
        text = (
            f"üë§ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞:\n"
            f"‚Ä¢ user_id: {user['user_id']}\n"
            f"‚Ä¢ card: {user['card']}\n"
            f"‚Ä¢ phone: {user['phone'] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}"
        )
    else:
        text = "‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –∑ —Ç–∞–∫–∏–º ID –∞–±–æ –∫–∞—Ä—Ç–∫–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=text,
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            msg = str(e)
            if "Message to edit not found" in msg or "Message is not modified" in msg:
                sent = await update.message.reply_text(
                    text,
                    reply_markup=nav_buttons()
                )
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    return STEP_MENU

async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î callback ‚Äúüì¢ –†–æ–∑—Å–∏–ª–∫–∞‚Äù —Ç–∞ —Å–∞–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:
    - –Ø–∫—â–æ —Ü–µ callback_query ‚Üí –∑–∞–ø–∏—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.
    - –Ø–∫—â–æ —Ü–µ MessageHandler (–∞–¥–º—ñ–Ω –≤—Å—Ç–∞–≤–∏–≤ —Ç–µ–∫—Å—Ç) ‚Üí —Ä–æ–±–∏–º–æ broadcast_to_all.
    """
    if update.callback_query:
        await update.callback_query.answer()
        base_id = context.user_data.get("base_msg_id")
        new_text = "üì¢ –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º:"
        if base_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=base_id,
                    text=new_text,
                    reply_markup=nav_buttons()
                )
            except BadRequest as e:
                msg = str(e)
                if "Message to edit not found" in msg or "Message is not modified" in msg:
                    sent = await update.callback_query.message.reply_text(
                        new_text,
                        reply_markup=nav_buttons()
                    )
                    context.user_data["base_msg_id"] = sent.message_id
                else:
                    raise
        return STEP_ADMIN_BROADCAST

    # –Ø–∫—â–æ —Ü–µ —Ç–µ–∫—Å—Ç (MessageHandler)
    text_to_send = update.message.text.strip()
    broadcast_to_all(text_to_send)

    base_id = context.user_data.get("base_msg_id")
    final_text = "‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º."
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=final_text,
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            msg = str(e)
            if "Message to edit not found" in msg or "Message is not modified" in msg:
                sent = await update.message.reply_text(
                    final_text,
                    reply_markup=nav_buttons()
                )
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    return STEP_MENU

def register_admin_handlers(app: Application) -> None:
    """
    –†–µ–≥—ñ—Å—Ç—Ä—É—î–º–æ –≤—Å—ñ –∞–¥–º—ñ–Ω—Å—å–∫—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ (–≥—Ä—É–ø–∞ 0):
      1) admin_confirm_card
      2) show_admin_panel
      3) admin_search + admin_search_result
      4) admin_broadcast (callback + —Ç–µ–∫—Å—Ç)
    """
    app.add_handler(
        CallbackQueryHandler(admin_confirm_card, pattern=r"^admin_confirm_card:\d+:.+"),
        group=0
    )
    app.add_handler(
        CallbackQueryHandler(show_admin_panel, pattern="^admin_panel$"),
        group=0
    )
    app.add_handler(
        CallbackQueryHandler(admin_search, pattern=f"^{CB.ADMIN_SEARCH.value}$"),
        group=0
    )
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_search_result),
        group=0
    )
    app.add_handler(
        CallbackQueryHandler(admin_broadcast, pattern=f"^{CB.ADMIN_BROADCAST.value}$"),
        group=0
    )
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast),
        group=0
    )
