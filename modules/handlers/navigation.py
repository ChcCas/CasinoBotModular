import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler, ContextTypes, Application
from modules.config import DB_NAME, ADMIN_ID
from modules.callbacks import CB
from modules.keyboards import (
    PROVIDERS,
    PAYMENTS,
    nav_buttons,
    provider_buttons,
    payment_buttons,
    admin_panel_kb
)
from modules.states import (
    STEP_MENU,
    STEP_DEPOSIT_AMOUNT,
    STEP_WITHDRAW_AMOUNT,
    STEP_REG_NAME,
    STEP_ADMIN_SEARCH,
    STEP_ADMIN_BROADCAST
)
from .start import start_command
from .admin import show_admin_panel, admin_search, admin_broadcast
from .handlers import register_name, register_phone, register_code  # —è–∫—â–æ —É –≤–∞—Å —î —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è

# (–Ø–∫—â–æ –≤–∞–º –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω –æ–∫—Ä–µ–º–∏–π ‚ÄúThreads‚Äù table, —Ç–æ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏.)
def _init_threads():
    conn = sqlite3.connect(DB_NAME)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS threads (
            user_id INTEGER PRIMARY KEY,
            base_msg_id INTEGER
        )
    """)
    conn.commit()
    conn.close()

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    # –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:
    if data == "admin_panel":
        return await show_admin_panel(update, context)

    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è ¬´–¥–æ–¥–æ–º—É¬ª –∞–±–æ ¬´–Ω–∞–∑–∞–¥¬ª:
    if data in (CB.HOME.value, CB.BACK.value):
        return await start_command(update, context)

    # –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:
    if data == CB.DEPOSIT_START.value:
        return await start_deposit(update, context)

    # –í–∏–≤–µ–¥–µ–Ω–Ω—è:
    if data == CB.WITHDRAW_START.value:
        return await start_withdraw(update, context)

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è (—è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è):
    if data == "register":
        return await register_name(update, context)

    # –î–æ–ø–æ–º–æ–≥–∞:
    if data == CB.HELP.value:
        await query.message.reply_text(
            "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞:\n/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\nüì≤ –ü–∏—Ç–∞–Ω–Ω—è ‚Äî —á–µ—Ä–µ–∑ —á–∞—Ç",
            reply_markup=nav_buttons()
        )
        return STEP_MENU

    # –ê–¥–º—ñ–Ω—Å—å–∫—ñ –¥—ñ—ó:
    if data == CB.ADMIN_SEARCH.value:
        return await admin_search(update, context)

    if data == CB.ADMIN_BROADCAST.value:
        return await admin_broadcast(update, context)

    # –Ø–∫—â–æ –∂–æ–¥–Ω–∞ –∑ –∫–Ω–æ–ø–æ–∫ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞:
    return await start_command(update, context)

def register_navigation_handlers(app: Application):
    _init_threads()

    # –°–ø–µ—Ä—à—É –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–ª–∞—Å–Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è ‚Äúhome‚Äù —Ç–∞ ‚Äúback‚Äù
    app.add_handler(CallbackQueryHandler(start_command, pattern="^home$"), group=1)
    app.add_handler(CallbackQueryHandler(start_command, pattern="^back$"), group=1)

    # –¢–µ–ø–µ—Ä –±–µ—Ä–µ–º–æ –≤—Å—ñ —ñ–Ω—à—ñ –∫–Ω–æ–ø–∫–∏:
    app.add_handler(CallbackQueryHandler(menu_handler, pattern=".*"), group=1)
