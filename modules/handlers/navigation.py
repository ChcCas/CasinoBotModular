import sqlite3
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackQueryHandler, ContextTypes, Application
from modules.config import ADMIN_ID, DB_NAME
from modules.callbacks import CB
from modules.keyboards import (
    PROVIDERS,
    PAYMENTS,
    nav_buttons,
    provider_buttons,
    payment_buttons,
    admin_panel_kb
)
from modules.states import (
    STEP_MENU,
    STEP_DEPOSIT_AMOUNT,
    STEP_WITHDRAW_AMOUNT,
    STEP_REG_NAME,
    STEP_ADMIN_SEARCH,
    STEP_ADMIN_BROADCAST
)
from .start import start_command
from .admin import show_admin_panel, admin_search, admin_broadcast

# –Ø–∫—â–æ —É –≤–∞—Å –Ω–µ–º–∞—î –æ–∫—Ä–µ–º–æ–≥–æ –º–æ–¥—É–ª—è registration.py, –≤–∏–¥–∞–ª—ñ—Ç—å —Ü–µ–π —Ä—è–¥–æ–∫:
# from .registration import register_name, register_phone, register_code

# === –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç–∞–±–ª–∏—Ü—è threads ===
def _init_threads():
    conn = sqlite3.connect(DB_NAME)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS threads (
            user_id INTEGER PRIMARY KEY,
            base_msg_id INTEGER
        )
    """)
    conn.commit()
    conn.close()

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    # ‚îÄ‚îÄ‚îÄ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å ‚îÄ‚îÄ‚îÄ
    if data == "admin_panel":
        return await show_admin_panel(update, context)

     # ‚îÄ‚îÄ‚îÄ –ù–∞–∑–∞–¥ / –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ‚îÄ‚îÄ‚îÄ 
    if data in (CB.HOME.value, CB.BACK.value):
        return await start_command(update, context)

    # ‚îÄ‚îÄ‚îÄ –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è ‚îÄ‚îÄ‚îÄ
    if data == CB.DEPOSIT_START.value:
        # —ñ–º–ø–æ—Ä—Ç—É—î–º–æ start_deposit —ñ–∑ deposit.py, —è–∫—â–æ —Ç—Ä–µ–±–∞
        from .deposit import start_deposit
        return await start_deposit(update, context)

    # ‚îÄ‚îÄ‚îÄ –í–∏–≤–µ–¥–µ–Ω–Ω—è ‚îÄ‚îÄ‚îÄ
    if data == CB.WITHDRAW_START.value:
        from .withdraw import start_withdraw
        return await start_withdraw(update, context)

    # ‚îÄ‚îÄ‚îÄ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è (—è–∫—â–æ —É –≤–∞—Å —î registration.py) ‚îÄ‚îÄ‚îÄ
    # if data == "register":
    #     return await register_name(update, context)

    # ‚îÄ‚îÄ‚îÄ –î–æ–ø–æ–º–æ–≥–∞ ‚îÄ‚îÄ‚îÄ
    if data == CB.HELP.value:
        await query.message.reply_text(
            "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞:\n/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\nüì≤ –ü–∏—Ç–∞–Ω–Ω—è ‚Äî —á–µ—Ä–µ–∑ —á–∞—Ç",
            reply_markup=nav_buttons()
        )
        return STEP_MENU

    # ‚îÄ‚îÄ‚îÄ –ê–¥–º—ñ–Ω—Å—å–∫–∏–π –ø–æ—à—É–∫ ‚îÄ‚îÄ‚îÄ
    if data == CB.ADMIN_SEARCH.value:
        return await admin_search(update, context)

    # ‚îÄ‚îÄ‚îÄ –ê–¥–º—ñ–Ω—Å—å–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ ‚îÄ‚îÄ‚îÄ
    if data == CB.ADMIN_BROADCAST.value:
        return await admin_broadcast(update, context)

    # ‚îÄ‚îÄ‚îÄ –Ø–∫—â–æ –∂–æ–¥–Ω–∏–π —ñ–∑ –ø—É–Ω–∫—Ç—ñ–≤ –≤–∏—â–µ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ ‚îÄ‚îÄ‚îÄ
    return await start_command(update, context)

def register_navigation_handlers(app: Application):
    _init_threads()

    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ ‚Äúhome‚Äù / ‚Äúback‚Äù –æ–∫—Ä–µ–º–æ (–≤–æ–Ω–∏ –æ–¥—Ä–∞–∑—É –∫–∏–¥–∞—é—Ç—å –Ω–∞ start_command)
    app.add_handler(CallbackQueryHandler(start_command, pattern="^home$"), group=1)
    app.add_handler(CallbackQueryHandler(start_command, pattern="^back$"), group=1)

    # –î–∞–ª—ñ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ callback_query —á–µ—Ä–µ–∑ menu_handler
    app.add_handler(CallbackQueryHandler(menu_handler, pattern=".*"), group=1)
