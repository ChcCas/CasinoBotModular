# modules/handlers/profile.py

import re
import sqlite3
from telegram import Update
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from modules.config import ADMIN_ID, DB_NAME
from keyboards import nav_buttons, client_menu
from states import (
    STEP_MENU,
    STEP_PROFILE_ENTER_CARD,
    STEP_PROFILE_ENTER_PHONE,
    STEP_PROFILE_CASHBACK_REQUEST,
    STEP_PROFILE_CASHBACK_CODE,
)


def register_profile_handlers(app):
    # 1) –ù–∞—Ç–∏—Å–∫ ¬´–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å¬ª ‚Äì –≤–≤–æ–¥–∏–º–æ –∫–∞—Ä—Ç—É
    app.add_handler(
        CallbackQueryHandler(_enter_profile, pattern="^client_profile$"),
        group=0,
    )
    # 2) –í–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, profile_enter_card),
        group=1,
    )
    # 3) –í–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, profile_enter_phone),
        group=1,
    )
    # 4) –ó–∞–ø–∏—Ç –∫–µ—à–±–µ–∫—É
    app.add_handler(
        CallbackQueryHandler(profile_cashback_request, pattern="^cashback$"),
        group=1,
    )
    # 5) –í–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É –¥–ª—è –∫–µ—à–±–µ–∫—É
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, profile_cashback_code),
        group=1,
    )


async def _enter_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç: –∑–∞–ø–∏—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–∫–∏."""
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∫–∏:",
        reply_markup=nav_buttons()
    )
    return STEP_PROFILE_ENTER_CARD


async def profile_enter_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–æ–¥—É –∫–∞—Ä—Ç–∫–∏: –∑–Ω—ñ–º–∞—î–º–æ –≤—Å–µ, –∫—Ä—ñ–º —Ü–∏—Ñ—Ä, –ø–æ—Ç—ñ–º –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É."""
    text = update.message.text or ""
    # –≤–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏, –¥–µ—Ñ—ñ—Å–∏, —ñ–Ω—à—ñ —Å–∏–º–≤–æ–ª–∏
    card = re.sub(r"\D", "", text)

    if not (4 <= len(card) <= 7):
        await update.message.reply_text(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–∫–∏. –ú–∞—î –±—É—Ç–∏ –≤—ñ–¥ 4 –¥–æ 7 —Ü–∏—Ñ—Ä, –±–µ–∑ –ª—ñ—Ç–µ—Ä —Ç–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤.",
            reply_markup=nav_buttons()
        )
        return STEP_PROFILE_ENTER_CARD

    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ "—á–∏—Å—Ç–∏–π" –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏
    context.user_data["profile_card"] = card

    await update.message.reply_text(
        "–î—è–∫—É—é! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 0 —Ç–∞ –º–∞—Ç–∏ 10 —Ü–∏—Ñ—Ä):",
        reply_markup=nav_buttons()
    )
    return STEP_PROFILE_ENTER_PHONE


async def profile_enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω—É: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É 0XXXXXXXXX."""
    text = update.message.text or ""
    phone = re.sub(r"\D", "", text)

    if not re.fullmatch(r"0\d{9}", phone):
        await update.message.reply_text(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ú–∞—î –±—É—Ç–∏ 10 —Ü–∏—Ñ—Ä, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 0.",
            reply_markup=nav_buttons()
        )
        return STEP_PROFILE_ENTER_PHONE

    # –∑–∞–ø–∏—Å —É –±–∞–∑—É
    card = context.user_data["profile_card"]
    user_id = update.effective_user.id

    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE,
                card TEXT,
                phone TEXT,
                is_authorized INTEGER DEFAULT 0
            )
        """)
        conn.execute("""
            INSERT INTO users(user_id, card, phone, is_authorized)
            VALUES (?, ?, ?, 1)
            ON CONFLICT(user_id) DO UPDATE SET
              card=excluded.card,
              phone=excluded.phone,
              is_authorized=1
        """, (user_id, card, phone))
        conn.commit()

    context.user_data["is_authorized"] = True

    await update.message.reply_text(
        "–í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ! –û—Å—å –≤–∞—à–µ –º–µ–Ω—é:",
        reply_markup=client_menu(authorized=True)
    )
    return STEP_MENU


async def profile_cashback_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É –Ω–∞ –∫–µ—à–±–µ–∫ —ñ –≤—ñ–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É."""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    with sqlite3.connect(DB_NAME) as conn:
        row = conn.execute(
            "SELECT card FROM users WHERE user_id=?", (user_id,)
        ).fetchone()

    if not row:
        await query.message.reply_text(
            "–°–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—è —á–µ—Ä–µ–∑ ¬´–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å¬ª.",
            reply_markup=nav_buttons()
        )
        return STEP_MENU

    card = row[0]
    msg = await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"üö® –ó–∞–ø–∏—Ç –∫–µ—à–±–µ–∫—É –≤—ñ–¥ {update.effective_user.full_name} ({user_id}):\n"
            f"–ö–∞—Ä—Ç–∫–∞: {card}\n\n"
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–¥–æ–º."
        )
    )
    context.bot_data["last_cashback_request_id"] = msg.message_id

    await query.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, 4-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥ –¥–ª—è –∫–µ—à–±–µ–∫—É:",
        reply_markup=nav_buttons()
    )
    return STEP_PROFILE_CASHBACK_CODE


async def profile_cashback_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É –∫–µ—à–±–µ–∫—É ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω—É –≤ thread."""
    text = update.message.text or ""
    code = re.sub(r"\D", "", text)

    if not re.fullmatch(r"\d{4}", code):
        await update.message.reply_text(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –ú–∞—î –±—É—Ç–∏ 4 —Ü–∏—Ñ—Ä–∏.",
            reply_markup=nav_buttons()
        )
        return STEP_PROFILE_CASHBACK_CODE

    reply_to = context.bot_data.get("last_cashback_request_id")
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üîë –ö–æ–¥ –∫–µ—à–±–µ–∫—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {code}",
        reply_to_message_id=reply_to
    )
    context.bot_data.pop("last_cashback_request_id", None)

    await update.message.reply_text(
        "–í–∞—à –∫–æ–¥ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=client_menu(authorized=True)
    )
    return STEP_MENU
