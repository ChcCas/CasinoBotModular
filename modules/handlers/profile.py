# modules/handlers/profile.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
    Application
)
from modules.config import ADMIN_ID
from modules.db import authorize_card, search_user
from modules.keyboards import nav_buttons, client_menu
from modules.callbacks import CB
from modules.states import STEP_FIND_CARD_PHONE, STEP_MENU

async def start_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    1) –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚Äúüí≥ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å‚Äù (callback_data="client_profile").
    2) –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ –ë–î: —è–∫—â–æ –≤–∂–µ —î –∑–∞–ø–∏—Å –∑ –∫–∞—Ä—Ç–∫–æ—é ‚Üí –æ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
       –Ü–Ω–∞–∫—à–µ ‚Äî –∑–∞–ø–∏—Ç—É—î–º–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏.
    """
    await update.callback_query.answer()
    user_id = update.effective_user.id
    user_record = search_user(str(user_id))

    if user_record and user_record.get("card"):
        # ‚Äî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π (–º–∞—î –∫–∞—Ä—Ç–∫—É –≤ –ë–î).
        card = user_record["card"]
        text = (
            f"üéâ –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ!\n"
            f"–í–∞—à–∞ –∫–∞—Ä—Ç–∫–∞: {card}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        keyboard = client_menu(is_authorized=True)

        base_id = context.user_data.get("base_msg_id")
        if base_id:
            # –ü—Ä–∞—Ü—é—î–º–æ –∑ —ñ—Å–Ω—É—é—á–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º, —è–∫—â–æ –≤–æ–Ω–æ —â–µ —î
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=base_id,
                    text=text,
                    reply_markup=keyboard
                )
            except BadRequest as e:
                msg = str(e)
                # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –∑–º—ñ–Ω–µ–Ωe ‚Äî –≤ –æ–±–æ—Ö –≤–∏–ø–∞–¥–∫–∞—Ö –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
                if "Message to edit not found" in msg or "Message is not modified" in msg:
                    sent = await update.callback_query.message.reply_text(
                        text,
                        reply_markup=keyboard
                    )
                    context.user_data["base_msg_id"] = sent.message_id
                else:
                    # –Ø–∫—â–æ —è–∫–∞—Å—å —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ ‚Äî –∫–∏–¥–∞—î–º–æ –¥–∞–ª—ñ
                    raise
        else:
            # –Ø–∫—â–æ base_msg_id –Ω–µ–º–∞—î ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
            sent = await update.callback_query.message.reply_text(
                text,
                reply_markup=keyboard
            )
            context.user_data["base_msg_id"] = sent.message_id

        return STEP_MENU

    # –Ø–∫—â–æ –∫–∞—Ä—Ç–∫–∏ —â–µ –Ω–µ–º–∞—î ‚Üí –∑–∞–ø–∏—Ç—É—î–º–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏
    prompt = "üí≥ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ—ó –∫–ª—É–±–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏:"
    sent = await update.callback_query.message.reply_text(
        prompt,
        reply_markup=nav_buttons()
    )
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_FIND_CARD_PHONE

async def find_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    1) –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ –∫–∞—Ä—Ç–∫—É. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ: —á–∏ –≤–∂–µ —î —Ç–∞–∫–∞ –∫–∞—Ä—Ç–∫–∞ –≤ –ë–î?
       - –Ø–∫—â–æ —î ‚Üí –æ–¥—Ä–∞–∑—É –∞–≤—Ç–æ—Ä–∏–∑—É—î–º–æ, —Ä–µ–¥–∞–≥—É—î–º–æ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∫–ª—ñ—î–Ω—Ç–∞.
       - –Ø–∫—â–æ –Ω–µ–º–∞—î ‚Üí –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –∑–∞–ø–∏—Ç —ñ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç—É.
    2) –£ –±—É–¥—å‚Äì—è–∫–æ–º—É —Ä–∞–∑—ñ –∑–∞–≤–µ—Ä—à—É—î–º–æ ConversationHandler (END).
    """
    card = update.message.text.strip()
    user_id = update.effective_user.id
    full_name = update.effective_user.full_name

    # 1) –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–∞—Ä—Ç–∫–∞ –≤ –±–∞–∑—ñ
    existing = search_user(card)
    if existing:
        # ‚Äî –Ø–∫—â–æ –∫–∞—Ä—Ç–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ (–π–º–æ–≤—ñ—Ä–Ω–æ, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ä–∞–Ω—ñ—à–µ)
        authorize_card(user_id, card)
        text = f"üéâ –ö–∞—Ä—Ç–∫–∞ {card} –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑—ñ. –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ."
        keyboard = client_menu(is_authorized=True)

        base_id = context.user_data.get("base_msg_id")
        if base_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=base_id,
                    text=text,
                    reply_markup=keyboard
                )
            except BadRequest as e:
                msg = str(e)
                if "Message to edit not found" in msg or "Message is not modified" in msg:
                    # –Ø–∫—â–æ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –Ω–µ–º–∞—î –∞–±–æ –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
                    sent = await update.message.reply_text(
                        text,
                        reply_markup=keyboard
                    )
                    context.user_data["base_msg_id"] = sent.message_id
                else:
                    raise
        else:
            sent = await update.message.reply_text(
                text,
                reply_markup=keyboard
            )
            context.user_data["base_msg_id"] = sent.message_id

        context.user_data.pop("base_msg_id", None)
        return ConversationHandler.END

    # 2) –Ø–∫—â–æ —Ç–∞–∫–æ—ó –∫–∞—Ä—Ç–∫–∏ —â–µ –Ω–µ–º–∞—î –≤ –ë–î ‚Üí –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –∑–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton(
            "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É",
            callback_data=f"admin_confirm_card:{user_id}:{card}"
        )
    ]])
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {full_name} (ID {user_id})\n"
            f"–≤–≤—ñ–≤ –∫–∞—Ä—Ç–∫—É: {card}\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É¬ª."
        ),
        reply_markup=kb
    )

    # 3) –†–µ–¥–∞–≥—É—î–º–æ (–∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ) –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
    confirmation_text = "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=confirmation_text,
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            msg = str(e)
            if "Message to edit not found" in msg or "Message is not modified" in msg:
                sent = await update.message.reply_text(
                    confirmation_text,
                    reply_markup=nav_buttons()
                )
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    else:
        sent = await update.message.reply_text(
            confirmation_text,
            reply_markup=nav_buttons()
        )
        context.user_data["base_msg_id"] = sent.message_id

    # 4) –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ü–µ–Ω–∞—Ä—ñ–π —Ç–∞ –æ—á–∏—â—É—î–º–æ base_msg_id
    context.user_data.pop("base_msg_id", None)
    return ConversationHandler.END

profile_conv = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(start_profile, pattern=f"^{CB.CLIENT_PROFILE.value}$")
    ],
    states={
        STEP_FIND_CARD_PHONE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, find_card)
        ],
    },
    fallbacks=[
        # –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –Ω–∞—Ç–∏—Å–Ω–µ ‚Äú–ù–∞–∑–∞–¥‚Äù / ‚Äú–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é‚Äù –ø—ñ–¥ —á–∞—Å —É–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.BACK.value}$"),
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.HOME.value}$"),
    ],
    per_chat=True,
)

def register_profile_handlers(app: Application) -> None:
    """
    –†–µ–≥—ñ—Å—Ç—Ä—É—î ConversationHandler (–≥—Ä—É–ø–∞ 0), —â–æ–± –æ–±—Ä–æ–±–∏—Ç–∏
    callback_data="client_profile" –ø–µ—Ä–µ–¥ –∑–∞–≥–∞–ª—å–Ω–∏–º –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏–º handler-–æ–º.
    """
    app.add_handler(profile_conv, group=0)
