from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
    Application
)
from modules.config import ADMIN_ID
from modules.db import authorize_card, search_user, get_user_history
from modules.keyboards import nav_buttons, client_menu
from modules.callbacks import CB
from modules.states import STEP_FIND_CARD_PHONE, STEP_MENU

async def start_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚Äúüí≥ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å‚Äù (callback_data="client_profile").
    1) –Ø–∫—â–æ —î –∑–∞–ø–∏—Å –≤ clients –∑ user_id —ñ –ø–æ–ª–µ–º card ‚Üí –≤—ñ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    2) –Ø–∫—â–æ –∫–∞—Ä—Ç–∫–∏ –Ω–µ–º–∞ ‚Üí –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏.
    """
    await update.callback_query.answer()
    user_id = update.effective_user.id

    user_record = search_user(str(user_id))
    if user_record and user_record.get("card"):
        # –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
        card = user_record["card"]
        text = (
            f"üéâ –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ!\n"
            f"–í–∞—à–∞ –∫–∞—Ä—Ç–∫–∞: {card}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        keyboard = client_menu(is_authorized=True)
        base_id = context.user_data.get("base_msg_id")

        if base_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=base_id,
                    text=text,
                    reply_markup=keyboard
                )
            except BadRequest as e:
                if "Message to edit not found" in str(e) or "Message is not modified" in str(e):
                    sent = await update.callback_query.message.reply_text(text, reply_markup=keyboard)
                    context.user_data["base_msg_id"] = sent.message_id
                else:
                    raise
        else:
            sent = await update.callback_query.message.reply_text(text, reply_markup=keyboard)
            context.user_data["base_msg_id"] = sent.message_id

        return STEP_MENU

    # –Ø–∫—â–æ –∫–∞—Ä—Ç–∫–∏ –Ω–µ–º–∞ ‚Äî –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–∞—Ä—Ç–∫—É:
    prompt = "üí≥ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ—ó –∫–ª—É–±–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏:"
    sent = await update.callback_query.message.reply_text(prompt, reply_markup=nav_buttons())
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_FIND_CARD_PHONE

async def find_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –∫–ª—ñ—î–Ω—Ç –≤–≤–æ–¥–∏—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:
     ‚Äì —è–∫—â–æ —Ç–∞–∫–∏–π –Ω–æ–º–µ—Ä —É–∂–µ –≤ –ë–î (–ø–æ–ª–µ card) ‚Üí ‚Äú–∞–≤—Ç–æ—Ä–∏–∑—É—î–º–æ‚Äù –π–æ–≥–æ (authorize_card) —ñ –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ.
     ‚Äì —è–∫—â–æ –∫–∞—Ä—Ç–∫–∏ –≤ –ë–î –Ω–µ–º–∞ ‚Üí –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É –∑–∞–ø–∏—Ç –∑ –∫–Ω–æ–ø–∫–æ—é ‚Äúadmin_confirm_card:<user_id>:<card>‚Äù.
    """
    card = update.message.text.strip()
    user_id = update.effective_user.id
    full_name = update.effective_user.full_name

    existing = search_user(card)
    if existing:
        # –Ø–∫—â–æ –∫–∞—Ä—Ç–∫–∞ –≤–∂–µ —î –≤ –ë–î (–≤ —è–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —ó—ó –≤–Ω—ñ—Å —Ä–∞–Ω—ñ—à–µ)
        authorize_card(user_id, card)
        text = f"üéâ –ö–∞—Ä—Ç–∫–∞ {card} –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑—ñ. –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ."
        keyboard = client_menu(is_authorized=True)
        base_id = context.user_data.get("base_msg_id")
        if base_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=base_id,
                    text=text,
                    reply_markup=keyboard
                )
            except BadRequest as e:
                if "Message to edit not found" in str(e) or "Message is not modified" in str(e):
                    sent = await update.message.reply_text(text, reply_markup=keyboard)
                    context.user_data["base_msg_id"] = sent.message_id
                else:
                    raise
        else:
            sent = await update.message.reply_text(text, reply_markup=keyboard)
            context.user_data["base_msg_id"] = sent.message_id

        context.user_data.pop("base_msg_id", None)
        return ConversationHandler.END

    # –Ø–∫—â–æ –≤ –ë–î —Ç–∞–∫–æ—ó –∫–∞—Ä—Ç–∫–∏ –Ω–µ–º–∞ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –∑–∞–ø–∏—Ç —ñ–∑ –∫–Ω–æ–ø–∫–æ—é
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton(
            "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É",
            callback_data=f"admin_confirm_card:{user_id}:{card}"
        )
    ]])
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {full_name} (ID {user_id})\n"
            f"–≤–≤—ñ–≤ –∫–∞—Ä—Ç–∫—É: {card}\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —ñ, —è–∫—â–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É¬ª."
        ),
        reply_markup=kb
    )

    # –Ü–Ω—Ñ–æ—Ä–º—É—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞:
    confirmation_text = "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=confirmation_text,
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            if "Message to edit not found" in str(e) or "Message is not modified" in str(e):
                sent = await update.message.reply_text(confirmation_text, reply_markup=nav_buttons())
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    else:
        sent = await update.message.reply_text(confirmation_text, reply_markup=nav_buttons())
        context.user_data["base_msg_id"] = sent.message_id

    context.user_data.pop("base_msg_id", None)
    return ConversationHandler.END

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:
async def cashback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    text = "üéÅ –í–∞—à –∫–µ—à–±–µ–∫: 0 UAH (–ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–µ—à–±–µ–∫—ñ–≤)."
    keyboard = client_menu(is_authorized=True)
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=text,
                reply_markup=keyboard
            )
        except BadRequest as e:
            if "Message to edit not found" in str(e) or "Message is not modified" in str(e):
                sent = await update.callback_query.message.reply_text(text, reply_markup=keyboard)
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    else:
        sent = await update.callback_query.message.reply_text(text, reply_markup=keyboard)
        context.user_data["base_msg_id"] = sent.message_id

async def history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    user_id = update.effective_user.id
    history = get_user_history(user_id)
    if not history:
        text = "üìñ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π."
    else:
        lines = ["üìñ –û—Å—Ç–∞–Ω–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó:"]
        for op in history:
            t = op["timestamp"]
            amt = op["amount"]
            info = op["info"]
            if op["type"] == "deposit":
                lines.append(f"‚Ä¢ [–î–µ–ø–æ–∑–∏—Ç] {amt} UAH (–ø—Ä–æ–≤–∞–π–¥–µ—Ä: {info}) –æ {t}")
            else:
                lines.append(f"‚Ä¢ [–í–∏–≤–µ–¥–µ–Ω–Ω—è] {amt} UAH (–º–µ—Ç–æ–¥: {info}) –æ {t}")
        text = "\n".join(lines)

    keyboard = client_menu(is_authorized=True)
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=text,
                reply_markup=keyboard
            )
        except BadRequest as e:
            if "Message to edit not found" in str(e) or "Message is not modified" in str(e):
                sent = await update.callback_query.message.reply_text(text, reply_markup=keyboard)
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    else:
        sent = await update.callback_query.message.reply_text(text, reply_markup=keyboard)
        context.user_data["base_msg_id"] = sent.message_id

async def logout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    # –ö–ª—ñ—î–Ω—Ç –≤–∏—Ö–æ–¥–∏—Ç—å —ñ–∑ ¬´—Å–µ—Å—ñ—ó¬ª ‚Äî –º–∏ –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞—î–º–æ base_msg_id
    context.user_data.pop("base_msg_id", None)

    text = "üîí –í–∏ –≤–∏–π—à–ª–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ ‚Äúüí≥ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å‚Äù –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó."
    keyboard = client_menu(is_authorized=False)
    sent = await update.callback_query.message.reply_text(text, reply_markup=keyboard)
    context.user_data["base_msg_id"] = sent.message_id

async def help_auth_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    text = "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞:\n/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\nüì≤ –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —è–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è."
    keyboard = client_menu(is_authorized=True)
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=text,
                reply_markup=keyboard
            )
        except BadRequest as e:
            if "Message to edit not found" in str(e) or "Message is not modified" in str(e):
                sent = await update.callback_query.message.reply_text(text, reply_markup=keyboard)
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    else:
        sent = await update.callback_query.message.reply_text(text, reply_markup=keyboard)
        context.user_data["base_msg_id"] = sent.message_id

# ConversationHandler –¥–ª—è ‚Äú–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å‚Äù
profile_conv = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(start_profile, pattern=f"^{CB.CLIENT_PROFILE.value}$")
    ],
    states={
        STEP_FIND_CARD_PHONE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, find_card)
        ],
        STEP_MENU: [
            CallbackQueryHandler(cashback_handler, pattern=r"^cashback$"),
            CallbackQueryHandler(history_handler, pattern=r"^history$"),
            CallbackQueryHandler(logout_handler, pattern=r"^logout$"),
            CallbackQueryHandler(help_auth_handler, pattern=f"^{CB.HELP.value}$"),
            # —Ä–µ—à—Ç–∞ –∫–Ω–æ–ø–æ–∫ (deposit_start, withdraw_start) ‚Äî —î —É —ñ–Ω—à–∏—Ö ConversationHandler
        ],
    },
    fallbacks=[
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.BACK.value}$"),
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.HOME.value}$"),
    ],
    per_chat=True,
)

def register_profile_handlers(app: Application) -> None:
    app.add_handler(profile_conv, group=0)
