# modules/handlers/profile.py

import re
import sqlite3
from telegram import Update
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from modules.config import ADMIN_ID, DB_NAME
from keyboards import nav_buttons, client_menu
from states import (
    STEP_MENU,
    STEP_PROFILE_ENTER_CARD,
    STEP_PROFILE_ENTER_PHONE,
    STEP_PROFILE_CASHBACK_REQUEST,
    STEP_PROFILE_CASHBACK_CODE,
)

def register_profile_handlers(app):
    # 1) –í—Ö—ñ–¥ —É –ø—Ä–æ—Ñ—ñ–ª—å ‚Äî –∑–∞–ø–∏—Ç –∫–∞—Ä—Ç–∏
    app.add_handler(
        CallbackQueryHandler(_enter_profile, pattern="^client_profile$"),
        group=0,
    )
    # 2) –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, profile_enter_card),
        group=1,
    )
    # 3) –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, profile_enter_phone),
        group=1,
    )
    # 4) –ó–∞–ø–∏—Ç –∫–µ—à–±–µ–∫—É ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É —ñ –ø—Ä–æ—Å–∏–º–æ –∫–æ–¥
    app.add_handler(
        CallbackQueryHandler(profile_cashback_request, pattern="^cashback$"),
        group=1,
    )
    # 5) –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—É –∫–µ—à–±–µ–∫—É
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, profile_cashback_code),
        group=1,
    )

async def _enter_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç —Å—Ü–µ–Ω–∞—Ä—ñ—é ‚Äî –∑–∞–ø–∏—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–∫–∏."""
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∫–∏:",
        reply_markup=nav_buttons()
    )
    return STEP_PROFILE_ENTER_CARD

async def profile_enter_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    card = update.message.text.strip()
    # –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏, –¥–æ–≤–∂–∏–Ω–∞ 4‚Äì7
    if not re.fullmatch(r"\d{4,7}", card):
        await update.message.reply_text(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–∫–∏. –ú–∞—î –±—É—Ç–∏ 4‚Äì7 —Ü–∏—Ñ—Ä, –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤.",
            reply_markup=nav_buttons()
        )
        return STEP_PROFILE_ENTER_CARD

    context.user_data["profile_card"] = card
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0, –≤—Å—å–æ–≥–æ 10 —Ü–∏—Ñ—Ä):",
        reply_markup=nav_buttons()
    )
    return STEP_PROFILE_ENTER_PHONE

async def profile_enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    # –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0 —Ç–∞ 9 —Ü–∏—Ñ—Ä –¥–∞–ª—ñ
    if not re.fullmatch(r"0\d{9}", phone):
        await update.message.reply_text(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ú–∞—î –±—É—Ç–∏ 10 —Ü–∏—Ñ—Ä, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 0.",
            reply_markup=nav_buttons()
        )
        return STEP_PROFILE_ENTER_PHONE

    card = context.user_data["profile_card"]
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE,
                card TEXT,
                phone TEXT,
                is_authorized INTEGER DEFAULT 0
            )
        """)
        conn.execute("""
            INSERT INTO users(user_id, card, phone, is_authorized)
            VALUES (?, ?, ?, 1)
            ON CONFLICT(user_id) DO UPDATE SET
              card=excluded.card,
              phone=excluded.phone,
              is_authorized=1
        """, (update.effective_user.id, card, phone))
        conn.commit()

    # –ê–≤—Ç–æ—Ä–∏–∑—É—î–º–æ –≤ user_data
    context.user_data["is_authorized"] = True

    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await update.message.reply_text(
        "–í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ! –û—Å—å –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:",
        reply_markup=client_menu(authorized=True)
    )
    return STEP_MENU

async def profile_cashback_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–ª—ñ—î–Ω—Ç –Ω–∞—Ç–∏—Å–Ω—É–≤ ¬´üéÅ –ö–µ—à–±–µ–∫¬ª ‚Äî –≤–∏—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –∑–∞—è–≤–∫—É."""
    query = update.callback_query
    await query.answer()

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑ –±–∞–∑–∏ –∫–∞—Ä—Ç–∫—É
    with sqlite3.connect(DB_NAME) as conn:
        row = conn.execute(
            "SELECT card FROM users WHERE user_id = ?",
            (update.effective_user.id,)
        ).fetchone()

    card = row[0] if row else None
    if not card:
        await query.message.reply_text(
            "–°–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—è —á–µ—Ä–µ–∑ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å.",
            reply_markup=nav_buttons()
        )
        return STEP_MENU

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –∑–∞—è–≤–∫—É
    msg = await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"üö® –ö–ª—ñ—î–Ω—Ç {update.effective_user.full_name} ({update.effective_user.id})\n"
            f"—Ö–æ—á–µ –∑–Ω—è—Ç–∏ –∫–µ—à–±–µ–∫.\n"
            f"–ö–∞—Ä—Ç–∫–∞: {card}\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–¥–æ–º."
        )
    )
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id –¥–ª—è ¬´–ª–∞–Ω—Ü—é–∂–∫–∞¬ª
    context.bot_data["last_cashback_request_id"] = msg.message_id

    # –ü–∏—Ç–∞—î–º–æ –∫–æ–¥
    await query.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å 4-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:",
        reply_markup=nav_buttons()
    )
    return STEP_PROFILE_CASHBACK_CODE

async def profile_cashback_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip()
    if not re.fullmatch(r"\d{4}", code):
        await update.message.reply_text(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –ú–∞—î –±—É—Ç–∏ 4 —Ü–∏—Ñ—Ä–∏.",
            reply_markup=nav_buttons()
        )
        return STEP_PROFILE_CASHBACK_CODE

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω—É –≤ –ª–∞–Ω—Ü—é–∂–∫—É
    reply_to = context.bot_data.get("last_cashback_request_id")
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üîë –ö–æ–¥ –¥–ª—è –∫–µ—à–±–µ–∫—É: {code}",
        reply_to_message_id=reply_to
    )
    context.bot_data.pop("last_cashback_request_id", None)

    await update.message.reply_text(
        "–í–∞—à –∫–æ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ß–µ–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
        reply_markup=client_menu(authorized=True)
    )
    return STEP_MENU
