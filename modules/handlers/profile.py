# modules/handlers/profile.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
    Application
)
from modules.config import ADMIN_ID
from modules.db import search_user, authorize_card
from modules.keyboards import nav_buttons, client_menu
from modules.callbacks import CB
from modules.states import STEP_FIND_CARD_PHONE, STEP_MENU

async def start_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚Äúüí≥ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å‚Äù (callback_data="client_profile").
    1) –Ø–∫—â–æ –≤ clients —î –∑–∞–ø–∏—Å –∑ –≤–∞–ª—ñ–¥–Ω–æ—é –∫–∞—Ä—Ç–∫–æ—é ‚Üí –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ.
    2) –Ü–Ω–∞–∫—à–µ ‚Üí –∑–∞–ø–∏—Ç—É—î–º–æ ‚Äúüí≥ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:‚Äù.
    """
    await update.callback_query.answer()
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # 1) –®—É–∫–∞—î–º–æ –∑–∞ user_id —É –ë–î (—è–∫—â–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–Ω—ñ—à–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –∫–∞—Ä—Ç–∫—É)
    user_record = search_user(str(user_id))
    if user_record and user_record.get("card"):
        card = user_record["card"]
        text = (
            f"üéâ –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ!\n"
            f"–í–∞—à–∞ –∫–∞—Ä—Ç–∫–∞: {card}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        keyboard = client_menu(is_authorized=True)

        base_id = context.user_data.get("base_msg_id")
        if base_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=base_id,
                    text=text,
                    reply_markup=keyboard
                )
            except BadRequest as e:
                msg = str(e).lower()
                if ("message to edit not found" in msg) or ("message is not modified" in msg):
                    sent = await update.callback_query.message.reply_text(
                        text,
                        reply_markup=keyboard
                    )
                    context.user_data["base_msg_id"] = sent.message_id
                else:
                    raise
        else:
            sent = await update.callback_query.message.reply_text(
                text,
                reply_markup=keyboard
            )
            context.user_data["base_msg_id"] = sent.message_id

        return STEP_MENU

    # 2) –Ø–∫—â–æ –∫–∞—Ä—Ç–∫–∏ –Ω–µ–º–∞—î –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –∑–∞–ø–∏—Ç—É—î–º–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏
    prompt = "üí≥ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ—ó –∫–ª—É–±–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏:"
    keyboard = nav_buttons()
    base_id = context.user_data.get("base_msg_id")

    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=base_id,
                text=prompt,
                reply_markup=keyboard
            )
        except BadRequest as e:
            msg = str(e).lower()
            if ("message to edit not found" in msg) or ("message is not modified" in msg):
                sent = await update.callback_query.message.reply_text(
                    prompt,
                    reply_markup=keyboard
                )
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    else:
        sent = await update.callback_query.message.reply_text(
            prompt,
            reply_markup=keyboard
        )
        context.user_data["base_msg_id"] = sent.message_id

    return STEP_FIND_CARD_PHONE

async def find_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–≤—ñ–≤ —Å–≤—ñ–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:
    1) –Ø–∫—â–æ —Ç–∞–∫–∞ –∫–∞—Ä—Ç–∫–∞ —î –≤ –ë–î ‚Üí –∞–≤—Ç–æ—Ä–∏–∑—É—î–º–æ, –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ.
    2) –Ø–∫—â–æ –Ω–µ–º–∞—î ‚Üí –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –∑–∞–ø–∏—Ç –∑ callback_data="admin_confirm_card:<user_id>:<card>".
    3) –ó–º—ñ–Ω—é—î–º–æ (–∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ) –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É:
       - —É —Ä–∞–∑—ñ —É—Å–ø—ñ—Ö—É ‚Äî –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ;
       - —É —Ä–∞–∑—ñ –∑–∞–ø–∏—Ç—É ‚Äî —Ç–µ–∫—Å—Ç ‚Äú–í–∞—à –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É‚Äù.
    """
    card = update.message.text.strip()
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    full_name = update.effective_user.full_name

    # 1) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î —Ç–∞–∫–∞ –∫–∞—Ä—Ç–∫–∞ —É clients
    existing = search_user(card)
    if existing:
        # ‚Äî –Ø–∫—â–æ –∫–∞—Ä—Ç–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —Ä–∞–Ω—ñ—à–µ)
        authorize_card(user_id, card)
        text = f"üéâ –ö–∞—Ä—Ç–∫–∞ {card} –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑—ñ. –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ!"
        keyboard = client_menu(is_authorized=True)

        base_id = context.user_data.get("base_msg_id")
        if base_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=base_id,
                    text=text,
                    reply_markup=keyboard
                )
            except BadRequest as e:
                msg = str(e).lower()
                if ("message to edit not found" in msg) or ("message is not modified" in msg):
                    sent = await update.message.reply_text(
                        text,
                        reply_markup=keyboard
                    )
                    context.user_data["base_msg_id"] = sent.message_id
                else:
                    raise
        else:
            sent = await update.message.reply_text(
                text,
                reply_markup=keyboard
            )
            context.user_data["base_msg_id"] = sent.message_id

        # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ü–µ–Ω–∞—Ä—ñ–π
        context.user_data.pop("base_msg_id", None)
        return ConversationHandler.END

    # 2) –Ø–∫—â–æ –∫–∞—Ä—Ç–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –∑–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton(
            "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É",
            callback_data=f"admin_confirm_card:{user_id}:{card}"
        )
    ]])
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {full_name} (ID {user_id})\n"
            f"–≤–≤—ñ–≤ –∫–∞—Ä—Ç–∫—É: {card}\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤ –±–∞–∑—ñ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É¬ª. "
            "–Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ—Ç–µ —Ü—é –∫–∞—Ä—Ç–∫—É, –ø–æ–≤—ñ–¥–æ–º—Ç–µ –∫–ª—ñ—î–Ω—Ç—É –ø—Ä–æ —Ü–µ –æ–∫—Ä–µ–º–æ."
        ),
        reply_markup=kb
    )

    # 3) –Ü–Ω—Ñ–æ—Ä–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    confirmation_text = "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=base_id,
                text=confirmation_text,
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            msg = str(e).lower()
            if ("message to edit not found" in msg) or ("message is not modified" in msg):
                sent = await update.message.reply_text(
                    confirmation_text,
                    reply_markup=nav_buttons()
                )
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    else:
        sent = await update.message.reply_text(
            confirmation_text,
            reply_markup=nav_buttons()
        )
        context.user_data["base_msg_id"] = sent.message_id

    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ü–µ–Ω–∞—Ä—ñ–π
    context.user_data.pop("base_msg_id", None)
    return ConversationHandler.END

async def cashback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ‚ÄúüéÅ –ö–µ—à–±–µ–∫‚Äù –≤ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.
    –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–µ—à–±–µ–∫ —É —Ç–æ–º—É –∂ –≤—ñ–∫–Ω—ñ.
    """
    await update.callback_query.answer()
    text = "üéÅ –í–∞—à –∫–µ—à–±–µ–∫: 0 UAH (–ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–µ—à–±–µ–∫—ñ–≤)."
    keyboard = client_menu(is_authorized=True)
    chat_id = update.effective_chat.id

    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=base_id,
                text=text,
                reply_markup=keyboard
            )
        except BadRequest as e:
            msg = str(e).lower()
            if ("message to edit not found" in msg) or ("message is not modified" in msg):
                sent = await update.callback_query.message.reply_text(
                    text,
                    reply_markup=keyboard
                )
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    else:
        sent = await update.callback_query.message.reply_text(
            text,
            reply_markup=keyboard
        )
        context.user_data["base_msg_id"] = sent.message_id

async def history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ‚Äúüìñ –Ü—Å—Ç–æ—Ä—ñ—è‚Äù –≤ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.
    –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ 10 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π (–¥–µ–ø–æ–∑–∏—Ç—ñ–≤ + –≤–∏–≤–µ–¥–µ–Ω—å).
    """
    await update.callback_query.answer()
    user_id = update.effective_user.id
    from modules.db import get_user_history
    history = get_user_history(user_id)

    if not history:
        text = "üìñ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π."
    else:
        lines = ["üìñ –û—Å—Ç–∞–Ω–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó:"]
        for op in history:
            t = op["timestamp"]
            amt = op["amount"]
            info = op["info"]
            if op["type"] == "deposit":
                lines.append(f"‚Ä¢ [–î–µ–ø–æ–∑–∏—Ç] {amt} UAH ({info}) –æ {t}")
            else:
                lines.append(f"‚Ä¢ [–í–∏–≤–µ–¥–µ–Ω–Ω—è] {amt} UAH ({info}) –æ {t}")
        text = "\n".join(lines)

    keyboard = client_menu(is_authorized=True)
    chat_id = update.effective_chat.id

    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=base_id,
                text=text,
                reply_markup=keyboard
            )
        except BadRequest as e:
            msg = str(e).lower()
            if ("message to edit not found" in msg) or ("message is not modified" in msg):
                sent = await update.callback_query.message.reply_text(
                    text,
                    reply_markup=keyboard
                )
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    else:
        sent = await update.callback_query.message.reply_text(
            text,
            reply_markup=keyboard
        )
        context.user_data["base_msg_id"] = sent.message_id

async def logout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ‚Äúüîí –í–∏–π—Ç–∏‚Äù –≤ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.
    –í–∏–¥–∞–ª—è—î–º–æ 'base_msg_id' —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    await update.callback_query.answer()
    chat_id = update.effective_chat.id

    context.user_data.pop("base_msg_id", None)
    text = "üîí –í–∏ –≤–∏–π—à–ª–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ ¬´üí≥ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å¬ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó."
    keyboard = client_menu(is_authorized=False)

    sent = await update.callback_query.message.reply_text(
        text,
        reply_markup=keyboard
    )
    context.user_data["base_msg_id"] = sent.message_id

async def help_auth_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ‚Äú‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞‚Äù –≤ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.
    –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–æ–ø–æ–º–æ–≥–∏.
    """
    await update.callback_query.answer()
    text = "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞:\n/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\nüì≤ –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —è–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è."
    keyboard = client_menu(is_authorized=True)
    chat_id = update.effective_chat.id

    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=base_id,
                text=text,
                reply_markup=keyboard
            )
        except BadRequest as e:
            msg = str(e).lower()
            if ("message to edit not found" in msg) or ("message is not modified" in msg):
                sent = await update.callback_query.message.reply_text(
                    text,
                    reply_markup=keyboard
                )
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    else:
        sent = await update.callback_query.message.reply_text(
            text,
            reply_markup=keyboard
        )
        context.user_data["base_msg_id"] = sent.message_id


# ‚îÄ‚îÄ‚îÄ ConversationHandler –¥–ª—è ‚Äú–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å‚Äù ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
profile_conv = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(start_profile, pattern=f"^{CB.CLIENT_PROFILE.value}$")
    ],
    states={
        STEP_FIND_CARD_PHONE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, find_card)
        ],
        STEP_MENU: [
            CallbackQueryHandler(cashback_handler, pattern=r"^cashback$"),
            CallbackQueryHandler(history_handler, pattern=r"^history$"),
            CallbackQueryHandler(logout_handler, pattern=r"^logout$"),
            CallbackQueryHandler(help_auth_handler, pattern=f"^{CB.HELP.value}$"),
            # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Å—é–¥–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É deposit_start —Ç–∞ withdraw_start,
            # –∞–ª–µ –≤–æ–Ω–∏ –≤–∂–µ –ø–µ—Ä–µ—Ö–æ–ø–ª—é—é—Ç—å—Å—è –æ–∫—Ä–µ–º–∏–º–∏ ConversationHandler-–∞–º–∏.
        ]
    },
    fallbacks=[
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.BACK.value}$"),
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.HOME.value}$"),
    ],
    per_chat=True,
)

def register_profile_handlers(app: Application) -> None:
    """
    –†–µ–≥—ñ—Å—Ç—Ä—É—î ConversationHandler(‚Äú–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å‚Äù) —É –≥—Ä—É–ø—ñ 0.
    """
    app.add_handler(profile_conv, group=0)
