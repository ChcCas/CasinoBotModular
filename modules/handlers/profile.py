# modules/handlers/profile.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
    Application
)
from modules.config import ADMIN_ID
from modules.db import authorize_card, search_user
from modules.keyboards import nav_buttons, client_menu
from modules.callbacks import CB
from modules.states import STEP_FIND_CARD_PHONE, STEP_MENU, STEP_ENTER_PHONE, STEP_ENTER_CODE

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ì–ª–æ–±–∞–ª—å–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–ª—è ¬´—á–µ–∫–∞–Ω–Ω—è¬ª –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ –∫–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
pending_phone = set()     # –º—ñ—Å—Ç–∏—Ç—å user_id, —è–∫—ñ –∑–∞—Ä–∞–∑ –æ—á—ñ–∫—É—é—Ç—å –≤–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
pending_code  = set()     # –º—ñ—Å—Ç–∏—Ç—å user_id, —è–∫—ñ –∑–∞—Ä–∞–∑ –æ—á—ñ–∫—É—é—Ç—å –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def start_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚Äúüí≥ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å‚Äù (callback_data="client_profile"):
    1) –Ø–∫—â–æ —É clients —î –∑–∞–ø–∏—Å user_id‚Üícard ‚Üí –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.
    2) –Ø–∫—â–æ –∫–∞—Ä—Ç–∫–∏ –Ω–µ–º–∞ ‚Üí –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–∞—Ä—Ç–∫—É.
    3) –Ø–∫—â–æ user_id –≤ pending_phone ‚Üí –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω.
    4) –Ø–∫—â–æ user_id –≤ pending_code ‚Üí –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥.
    """
    await update.callback_query.answer()
    user_id = update.effective_user.id

    # –Ø–∫—â–æ –∑–∞—Ä–∞–∑ –æ—á—ñ–∫—É—î–º–æ –≤—ñ–¥ –Ω—å–æ–≥–æ –≤–≤–æ–¥–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    if user_id in pending_phone:
        prompt = "üìû –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (0XXXXXXXXX):"
        sent = await update.callback_query.message.reply_text(prompt, reply_markup=nav_buttons())
        context.user_data["base_msg_id"] = sent.message_id
        return STEP_ENTER_PHONE

    # –Ø–∫—â–æ –∑–∞—Ä–∞–∑ –æ—á—ñ–∫—É—î–º–æ –≤—ñ–¥ –Ω—å–æ–≥–æ –≤–≤–æ–¥–∏—Ç–∏ –∫–æ–¥
    if user_id in pending_code:
        prompt = "üîë –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —è–∫–∏–π –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏:"
        sent = await update.callback_query.message.reply_text(prompt, reply_markup=nav_buttons())
        context.user_data["base_msg_id"] = sent.message_id
        return STEP_ENTER_CODE

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ: —á–∏ —î –≤–∂–µ –≤ –±–∞–∑—ñ (user_id ‚Üí card)?
    user_record = search_user(str(user_id))
    if user_record and user_record.get("card"):
        # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Üí –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ
        card = user_record["card"]
        text = (
            f"üéâ –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ!\n"
            f"–í–∞—à–∞ –∫–∞—Ä—Ç–∫–∞: {card}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        keyboard = client_menu(is_authorized=True)

        base_id = context.user_data.get("base_msg_id")
        if base_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=base_id,
                    text=text,
                    reply_markup=keyboard
                )
            except BadRequest as e:
                msg = str(e)
                if "Message to edit not found" in msg or "Message is not modified" in msg:
                    sent = await update.callback_query.message.reply_text(text, reply_markup=keyboard)
                    context.user_data["base_msg_id"] = sent.message_id
                else:
                    raise
        else:
            sent = await update.callback_query.message.reply_text(text, reply_markup=keyboard)
            context.user_data["base_msg_id"] = sent.message_id

        return STEP_MENU

    # –Ø–∫—â–æ —â–µ –Ω–µ –±—É–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó ‚Üí –∑–∞–ø–∏—Ç—É—î–º–æ –∫–∞—Ä—Ç–∫—É
    prompt = "üí≥ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ—ó –∫–ª—É–±–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏:"
    sent = await update.callback_query.message.reply_text(prompt, reply_markup=nav_buttons())
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_FIND_CARD_PHONE


async def find_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –∫–∞—Ä—Ç–∫—É:
    1) –Ø–∫—â–æ –∫–∞—Ä—Ç–∫–∞ —î —É –ë–î (search_user) ‚Üí authorize_card(user_id, card) ‚Üí –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ.
    2) –Ø–∫—â–æ –∫–∞—Ä—Ç–∫–∏ –Ω–µ–º–∞—î ‚Üí –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–≤–æ–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏:
         ‚Ä¢ ‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É
         ‚Ä¢ ‚ùå –ö–∞—Ä—Ç–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞
       —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ‚Äú–ó–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.‚Äù
    3) –ó–∞–≤–µ—Ä—à—É—î–º–æ ConversationHandler.END.
    """
    card = update.message.text.strip()
    user_id = update.effective_user.id
    full_name = update.effective_user.full_name

    # 1) –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–∞—Ä—Ç–∫–∞ –≤–∂–µ —î –≤ –±–∞–∑—ñ
    existing = search_user(card)
    if existing:
        # –Ø–∫—â–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–Ω—ñ—à–µ –≤–∂–µ –¥–æ–¥–∞–≤ —Ç–∞–∫—É –∫–∞—Ä—Ç–∫—É ‚Üí –∞–≤—Ç–æ—Ä–∏–∑–æ–≤—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        authorize_card(user_id, card)
        text = f"üéâ –ö–∞—Ä—Ç–∫–∞ {card} –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑—ñ. –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ."
        keyboard = client_menu(is_authorized=True)

        base_id = context.user_data.get("base_msg_id")
        if base_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=base_id,
                    text=text,
                    reply_markup=keyboard
                )
            except BadRequest as e:
                msg = str(e)
                if "Message to edit not found" in msg or "Message is not modified" in msg:
                    sent = await update.message.reply_text(text, reply_markup=keyboard)
                    context.user_data["base_msg_id"] = sent.message_id
                else:
                    raise
        else:
            sent = await update.message.reply_text(text, reply_markup=keyboard)
            context.user_data["base_msg_id"] = sent.message_id

        # –ó–∞–≤–µ—Ä—à—É—î–º–æ (ConversationHandler.END) —Ç–∞ –æ—á–∏—â–∞—î–º–æ –±–∞–∑–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        context.user_data.pop("base_msg_id", None)
        return ConversationHandler.END

    # 2) –Ø–∫—â–æ –∫–∞—Ä—Ç–∫–∏ –Ω–µ–º–∞—î ‚Üí –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –∑–∞–ø–∏—Ç —ñ –¥–∞—î–º–æ –¥–≤—ñ –∫–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(
                "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É",
                callback_data=f"admin_confirm_card:{user_id}:{card}"
            ),
            InlineKeyboardButton(
                "‚ùå –ö–∞—Ä—Ç–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞",
                callback_data=f"admin_deny_card:{user_id}:{card}"
            ),
        ]
    ])
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {full_name} (ID {user_id})\n"
            f"–≤–≤—ñ–≤ –∫–∞—Ä—Ç–∫—É: {card}\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤ –±–∞–∑—ñ. –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–∞ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É¬ª,\n"
            "—è–∫—â–æ –∫–∞—Ä—Ç–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚ùå –ö–∞—Ä—Ç–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞¬ª. "
        ),
        reply_markup=kb
    )

    # –Ü–Ω—Ñ–æ—Ä–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ –∑–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É
    confirmation_text = "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∫–∞—Ä—Ç–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=confirmation_text,
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            msg = str(e)
            if "Message to edit not found" in msg or "Message is not modified" in msg:
                sent = await update.message.reply_text(confirmation_text, reply_markup=nav_buttons())
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    else:
        sent = await update.message.reply_text(confirmation_text, reply_markup=nav_buttons())
        context.user_data["base_msg_id"] = sent.message_id

    context.user_data.pop("base_msg_id", None)
    return ConversationHandler.END


async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º:
    1) –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç (0XXXXXXXXX). –Ø–∫—â–æ –Ω–µ–≤—ñ—Ä–Ω–æ ‚Äî –ø–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç STEP_ENTER_PHONE.
    2) –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É:
         "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á X (ID) –Ω–∞–¥–∞–≤ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: +380XXXXXXXXX".
       –Ü–Ω—Ñ–æ—Ä–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "–ù–∞ –≤–∞—à –Ω–æ–º–µ—Ä –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ."
    3) –î–æ–¥–∞—î–º–æ user_id —É pending_code, –≤–∏–¥–∞–ª—è—î–º–æ –∑ pending_phone, –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ STEP_ENTER_CODE.
    """
    phone = update.message.text.strip()
    user_id = update.effective_user.id
    full_name = update.effective_user.full_name

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç: –º—É—Å–∏—Ç—å –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ '0' —ñ 10 —Ü–∏—Ñ—Ä
    import re
    if not re.fullmatch(r"^0\d{9}$", phone):
        error_text = "‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ù–æ–º–µ—Ä –º–∞—î –≤–∏–≥–ª—è–¥ 0XXXXXXXXX. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        base_id = context.user_data.get("base_msg_id")
        if base_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=base_id,
                    text=error_text,
                    reply_markup=nav_buttons()
                )
            except BadRequest as e:
                msg = str(e)
                if "Message to edit not found" in msg or "Message is not modified" in msg:
                    sent = await update.message.reply_text(error_text, reply_markup=nav_buttons())
                    context.user_data["base_msg_id"] = sent.message_id
                else:
                    raise
        return STEP_ENTER_PHONE

    # 1) –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {full_name} (ID {user_id}) –Ω–∞–¥–∞–≤ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –π–æ–º—É –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∑–∞ –±–æ—Ç–æ–º, "
            "–ø—ñ—Å–ª—è —á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–µ–¥–µ —Ü–µ–π –∫–æ–¥ —É —á–∞—Ç—ñ."
        )
    )

    # 2) –Ü–Ω—Ñ–æ—Ä–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_text = "‚úÖ –ù–∞ –≤–∞—à –Ω–æ–º–µ—Ä –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ:"
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=user_text,
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            msg = str(e)
            if "Message to edit not found" in msg or "Message is not modified" in msg:
                sent = await update.message.reply_text(user_text, reply_markup=nav_buttons())
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    else:
        sent = await update.message.reply_text(user_text, reply_markup=nav_buttons())
        context.user_data["base_msg_id"] = sent.message_id

    # 3) –ü–µ—Ä–µ–º—ñ—â–∞—î–º–æ user_id –∑ pending_phone ‚Üí pending_code
    pending_phone.discard(user_id)
    pending_code.add(user_id)

    return STEP_ENTER_CODE


async def enter_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–¥, —è–∫–∏–π –≤–≤—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:
    1) –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ü–µ 4 —Ü–∏—Ñ—Ä–∏; —è–∫—â–æ –Ω—ñ ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ—Å—è –≤ STEP_ENTER_CODE.
    2) –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É:
         "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á X (ID) –≤–≤—ñ–≤ –∫–æ–¥: 1234".
    3) –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "–û—á—ñ–∫—É–π—Ç–µ, –º–∏ –∑–Ω–∞–π–¥–µ–º–æ –≤–∞—à—É –∫–∞—Ä—Ç–∫—É —ñ –Ω–∞–¥—ñ—à–ª–µ–º–æ."
    4) –û—á–∏—â–∞—î–º–æ pending_code —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î–º–æ.
    """
    code = update.message.text.strip()
    user_id = update.effective_user.id
    full_name = update.effective_user.full_name

    import re
    if not re.fullmatch(r"^\d{4}$", code):
        error_text = "‚ùóÔ∏è –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 4 —Ü–∏—Ñ—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        base_id = context.user_data.get("base_msg_id")
        if base_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=base_id,
                    text=error_text,
                    reply_markup=nav_buttons()
                )
            except BadRequest as e:
                msg = str(e)
                if "Message to edit not found" in msg or "Message is not modified" in msg:
                    sent = await update.message.reply_text(error_text, reply_markup=nav_buttons())
                    context.user_data["base_msg_id"] = sent.message_id
                else:
                    raise
        return STEP_ENTER_CODE

    # 1) –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –∫–æ–¥
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {full_name} (ID {user_id}) –≤–≤—ñ–≤ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {code}"
    )

    # 2) –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ –¥–∞–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –∑–Ω–∞–π–¥–µ –∫–∞—Ä—Ç–∫—É
    user_text = "‚ÑπÔ∏è –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. –û—á—ñ–∫—É–π—Ç–µ, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –∑–Ω–∞–π–¥–µ –≤–∞—à—É –∫–∞—Ä—Ç–∫—É —ñ –Ω–∞–¥—ñ—à–ª–µ —ó—ó –≤–∞–º."
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=user_text,
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            msg = str(e)
            if "Message to edit not found" in msg or "Message is not modified" in msg:
                sent = await update.message.reply_text(user_text, reply_markup=nav_buttons())
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    else:
        sent = await update.message.reply_text(user_text, reply_markup=nav_buttons())
        context.user_data["base_msg_id"] = sent.message_id

    # 3) –û—á–∏—â–∞—î–º–æ pending_code
    pending_code.discard(user_id)
    return ConversationHandler.END


# ‚îÄ‚îÄ‚îÄ ConversationHandler –¥–ª—è ‚Äú–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å‚Äù ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
profile_conv = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(start_profile, pattern=f"^{CB.CLIENT_PROFILE.value}$")
    ],
    states={
        STEP_FIND_CARD_PHONE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, find_card)
        ],
        STEP_ENTER_PHONE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, enter_phone)
        ],
        STEP_ENTER_CODE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, enter_code)
        ],
        STEP_MENU: [
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.BACK.value}$"),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.HOME.value}$"),
        ]
    },
    fallbacks=[
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.BACK.value}$"),
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.HOME.value}$"),
    ],
    per_chat=True,
)

def register_profile_handlers(app: Application) -> None:
    """
    –†–µ–≥—ñ—Å—Ç—Ä—É—î ConversationHandler –¥–ª—è ‚Äú–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å‚Äù (–≥—Ä—É–ø–∞ 0),
    —â–æ–± –æ–±—Ä–æ–±–ª—è—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ –∫–æ–¥—É.
    """
    app.add_handler(profile_conv, group=0)
