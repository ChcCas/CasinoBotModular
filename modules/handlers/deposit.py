# modules/handlers/deposit.py

import re
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
    Application
)
from modules.config import DB_NAME
from modules.db import search_user  # –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —ñ—Å–Ω—É—î –∫–∞—Ä—Ç–∫–∞ —É –ë–î
from modules.callbacks import CB
from modules.keyboards import nav_buttons, provider_buttons, payment_buttons
from modules.states import (
    STEP_DEPOSIT_AMOUNT,
    STEP_DEPOSIT_PROVIDER,
    STEP_DEPOSIT_PAYMENT,
    STEP_DEPOSIT_CONFIRM,
    STEP_MENU
)

async def start_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—Ö—ñ–¥ —É —Å—Ü–µ–Ω–∞—Ä—ñ–π ¬´–ü–æ–ø–æ–≤–Ω–∏—Ç–∏¬ª (–∫–ª—ñ—î–Ω—Ç –Ω–∞—Ç–∏—Å–Ω—É–≤ ¬´üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏¬ª).
    –ü–∏—Ç–∞—î–º–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—É–º—É.
    """
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "üí∏ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:",
        reply_markup=nav_buttons()
    )
    return STEP_DEPOSIT_AMOUNT

async def process_deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–ª–∏ –∫–ª—ñ—î–Ω—Ç –≤–≤—ñ–≤ —Å—É–º—É:
    1) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—ó —É user_data
    2) –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    """
    text = update.message.text.strip()
    try:
        amount = float(text)
    except ValueError:
        await update.message.reply_text(
            "‚ùóÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É —á–∏—Å–ª–æ–≤—É —Å—É–º—É:",
            reply_markup=nav_buttons()
        )
        return STEP_DEPOSIT_AMOUNT

    context.user_data["deposit_amount"] = amount
    await update.message.reply_text(
        "üé∞ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", reply_markup=provider_buttons()
    )
    return STEP_DEPOSIT_PROVIDER

async def process_deposit_provider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–ª–∏ –∫–ª—ñ—î–Ω—Ç –æ–±—Ä–∞–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (¬´–°–¢–ê–†–ê –°–ò–°–¢–ï–ú–ê¬ª –∞–±–æ ¬´–ù–û–í–ê –°–ò–°–¢–ï–ú–ê¬ª).
    """
    provider = update.callback_query.data  # ‚Äú–°–¢–ê–†–ê –°–ò–°–¢–ï–ú–ê‚Äù –∞–±–æ ‚Äú–ù–û–í–ê –°–ò–°–¢–ï–ú–ê‚Äù
    context.user_data["deposit_provider"] = provider

    await update.callback_query.message.reply_text(
        "üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:", reply_markup=payment_buttons()
    )
    return STEP_DEPOSIT_PAYMENT

async def process_deposit_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–ª–∏ –∫–ª—ñ—î–Ω—Ç –æ–±—Ä–∞–≤ –º–µ—Ç–æ–¥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ¬´–ö–∞—Ä—Ç–∞¬ª –∞–±–æ ¬´–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑¬ª).
    –ü–∏—Ç–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫ ‚Äì –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
    """
    payment = update.callback_query.data
    context.user_data["deposit_payment"] = payment

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", callback_data="deposit_confirm")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CB.BACK.value)],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=CB.HOME.value)],
    ])
    await update.callback_query.message.reply_text(
        f"üí∞ –í–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ {context.user_data['deposit_amount']} UAH\n"
        f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {context.user_data['deposit_provider']}\n"
        f"–ú–µ—Ç–æ–¥: {context.user_data['deposit_payment']}\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è¬ª, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏.",
        reply_markup=kb
    )
    return STEP_DEPOSIT_CONFIRM

async def confirm_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–ª–∏ –∫–ª—ñ—î–Ω—Ç –Ω–∞—Ç–∏—Å–Ω—É–≤ ¬´‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è¬ª (callback_data="deposit_confirm").
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î —ñ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    await update.callback_query.answer()
    user_id = update.effective_user.id
    amount = context.user_data.get("deposit_amount")
    provider = context.user_data.get("deposit_provider")
    payment = context.user_data.get("deposit_payment")

    # –ó–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—é deposits
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO deposits (user_id, amount, provider, payment_method)
        VALUES (?, ?, ?, ?)
    """, (user_id, amount, provider, payment))
    conn.commit()
    conn.close()

    text = f"üí∏ –í–∞—à–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è {amount} UAH –∑–∞ {provider}/{payment} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ.\n–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
    keyboard = nav_buttons()
    await update.callback_query.message.reply_text(text, reply_markup=keyboard)
    return STEP_MENU

def register_deposit_handlers(app: Application) -> None:
    """
    –†–µ–≥—ñ—Å—Ç—Ä—É—î–º–æ ConversationHandler(¬´–ü–æ–ø–æ–≤–Ω–∏—Ç–∏¬ª) —É –≥—Ä—É–ø—ñ 0.
    """
    deposit_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_deposit, pattern=f"^{CB.DEPOSIT_START.value}$")
        ],
        states={
            STEP_DEPOSIT_AMOUNT:   [MessageHandler(filters.TEXT & ~filters.COMMAND, process_deposit_amount)],
            STEP_DEPOSIT_PROVIDER: [CallbackQueryHandler(process_deposit_provider,
                                                         pattern="^(" + "|".join(["–°–¢–ê–†–ê –°–ò–°–¢–ï–ú–ê", "–ù–û–í–ê –°–ò–°–¢–ï–ú–ê"]) + ")$")],
            STEP_DEPOSIT_PAYMENT:  [CallbackQueryHandler(process_deposit_payment,
                                                         pattern="^(" + "|".join(["–ö–∞—Ä—Ç–∞", "–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑"]) + ")$")],
            STEP_DEPOSIT_CONFIRM:  [CallbackQueryHandler(confirm_deposit, pattern="^deposit_confirm$")],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.BACK.value}$"),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.HOME.value}$"),
        ],
        per_chat=True
    )

    app.add_handler(deposit_conv, group=0)
