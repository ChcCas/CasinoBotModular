# modules/handlers/deposit.py

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
    Application
)
from modules.config import DB_NAME
from modules.callbacks import CB
from modules.keyboards import nav_buttons, provider_buttons, payment_buttons, PROVIDERS, PAYMENTS
from modules.states import (
    STEP_DEPOSIT_AMOUNT,
    STEP_DEPOSIT_PROVIDER,
    STEP_DEPOSIT_PAYMENT,
    STEP_DEPOSIT_FILE,
    STEP_DEPOSIT_CONFIRM
)

async def deposit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Entry point: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚Äúüí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏‚Äù (callback_data="deposit_start").
    –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–¥–Ω–µ –±–∞–∑–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ message_id —É user_data.
    """
    await update.callback_query.answer()

    text = "üí∏ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:"
    sent = await update.callback_query.message.reply_text(
        text,
        reply_markup=nav_buttons()
    )
    context.user_data["base_msg_id"] = sent.message_id

    return STEP_DEPOSIT_AMOUNT

async def process_deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö—Ä–æ–∫ STEP_DEPOSIT_AMOUNT: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —Å—É–º—É.
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —á–∏—Å–ª–æ. –Ø–∫—â–æ —Ç–∞–∫ ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è,
    –ø–æ–∫–∞–∑—É—é—á–∏ ‚Äú–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞‚Äù. –Ø–∫—â–æ –Ω—ñ ‚Äî –∑–Ω–æ–≤—É –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É.
    """
    text = update.message.text.strip()
    try:
        amount = float(text)
    except ValueError:
        base_id = context.user_data.get("base_msg_id")
        if base_id:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text="‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100):",
                reply_markup=nav_buttons()
            )
        return STEP_DEPOSIT_AMOUNT

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—É–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data["deposit_amount"] = amount

    # –†–µ–¥–∞–≥—É—î–º–æ —Ç–µ –∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ç–µ–ø–µ—Ä –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –≤–∏–±–æ—Ä—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=base_id,
            text="üé∞ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:",
            reply_markup=provider_buttons()
        )
    return STEP_DEPOSIT_PROVIDER

async def process_deposit_provider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö—Ä–æ–∫ STEP_DEPOSIT_PROVIDER: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (callback_data = –æ–¥–Ω–∞ –∑ PROVIDERS).
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ —Ç–∞ —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–∏—Ç–∞—é—á–∏ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏.
    """
    await update.callback_query.answer()
    provider = update.callback_query.data
    context.user_data["deposit_provider"] = provider

    base_id = context.user_data.get("base_msg_id")
    if base_id:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=base_id,
            text="üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:",
            reply_markup=payment_buttons()
        )
    return STEP_DEPOSIT_PAYMENT

async def process_deposit_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö—Ä–æ–∫ STEP_DEPOSIT_PAYMENT: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ (callback_data = –æ–¥–Ω–∞ –∑ PAYMENTS).
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ —Ç–∞ —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑–∞–ø–∏—Ç—É—é—á–∏ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–≤—ñ–¥–µ–æ).
    """
    await update.callback_query.answer()
    payment_method = update.callback_query.data
    context.user_data["deposit_payment"] = payment_method

    base_id = context.user_data.get("base_msg_id")
    if base_id:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=base_id,
            text="üìé –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∞–±–æ –≤—ñ–¥–µ–æ):",
            reply_markup=nav_buttons()
        )
    return STEP_DEPOSIT_FILE

async def process_deposit_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö—Ä–æ–∫ STEP_DEPOSIT_FILE: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–≤—ñ–¥–µ–æ.
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ file_type —ñ file_id, —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–æ–∫–∞–∑—É—é—á–∏ ‚Äú–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏‚Äù.
    """
    if update.message.photo:
        ftype = "photo"
        file_id = update.message.photo[-1].file_id
    elif update.message.document:
        ftype = "document"
        file_id = update.message.document.file_id
    elif update.message.video:
        ftype = "video"
        file_id = update.message.video.file_id
    else:
        base_id = context.user_data.get("base_msg_id")
        if base_id:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text="‚ùóÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∞–±–æ –≤—ñ–¥–µ–æ:",
                reply_markup=nav_buttons()
            )
        return STEP_DEPOSIT_FILE

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø —Ç–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª—É
    context.user_data["deposit_file_type"] = ftype
    context.user_data["deposit_file_id"]   = file_id

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é ‚Äú–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏‚Äù
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=CB.DEPOSIT_CONFIRM.value)
    ]])
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=base_id,
            text="‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏¬ª, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è.",
            reply_markup=kb
        )
    return STEP_DEPOSIT_CONFIRM

async def confirm_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö—Ä–æ–∫ STEP_DEPOSIT_CONFIRM: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚Äú‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏‚Äù (callback_data="deposit_confirm").
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —É —Ç–∞–±–ª–∏—Ü—é deposits —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞.
    """
    await update.callback_query.answer()
    user = update.effective_user

    amount   = context.user_data.get("deposit_amount")
    provider = context.user_data.get("deposit_provider")
    payment  = context.user_data.get("deposit_payment")
    ftype    = context.user_data.get("deposit_file_type")
    file_id  = context.user_data.get("deposit_file_id")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ SQLite
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            """
            INSERT INTO deposits 
              (user_id, username, amount, provider, payment_method, file_type, file_id) 
            VALUES (?, ?, ?, ?, ?, ?, ?)""",
            (user.id, user.username, amount, provider, payment, ftype, file_id)
        )
        conn.commit()

    # –†–µ–¥–∞–≥—É—î–º–æ —Ç–µ –∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–æ–∫–∞–∑—É—é—á–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=base_id,
            text="üí∏ –í–∞—à–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=nav_buttons()
        )

    # –û—á–∏—â–∞—î–º–æ –∫–ª—é—á, —â–æ–± –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É ‚Äú–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è‚Äù –∑‚Äô—è–≤–∏–ª–æ—Å—è –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    context.user_data.pop("base_msg_id", None)
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ ConversationHandler –¥–ª—è ‚Äú–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è‚Äù ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
deposit_conv = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(deposit_start, pattern=f"^{CB.DEPOSIT_START.value}$")
    ],
    states={
        STEP_DEPOSIT_AMOUNT:   [MessageHandler(filters.TEXT & ~filters.COMMAND, process_deposit_amount)],
        STEP_DEPOSIT_PROVIDER: [CallbackQueryHandler(process_deposit_provider, pattern="^(" + "|".join(PROVIDERS) + ")$")],
        STEP_DEPOSIT_PAYMENT:  [CallbackQueryHandler(process_deposit_payment, pattern="^(" + "|".join(PAYMENTS) + ")$")],
        STEP_DEPOSIT_FILE:     [MessageHandler(filters.PHOTO | filters.Document.ALL | filters.VIDEO, process_deposit_file)],
        STEP_DEPOSIT_CONFIRM:  [CallbackQueryHandler(confirm_deposit, pattern=f"^{CB.DEPOSIT_CONFIRM.value}$")],
    },
    fallbacks=[
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.BACK.value}$"),
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.HOME.value}$"),
    ],
    per_chat=True,
)

def register_deposit_handlers(app: Application) -> None:
    """
    –†–µ–≥—ñ—Å—Ç—Ä—É—î–º–æ ConversationHandler ‚Äú–¥–µ–ø–æ–∑–∏—Ç‚Äù —É –≥—Ä—É–ø—ñ 0.
    """
    app.add_handler(deposit_conv, group=0)
