# modules/handlers/deposit.py

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
    Application
)
from modules.config import DB_NAME
from modules.callbacks import CB
from modules.keyboards import nav_buttons, provider_buttons, payment_buttons
from modules.states import (
    STEP_DEPOSIT_AMOUNT,
    STEP_DEPOSIT_PROVIDER,
    STEP_DEPOSIT_PAYMENT,
    STEP_DEPOSIT_FILE,
    STEP_DEPOSIT_CONFIRM
)

async def deposit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Entry point: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ¬´üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏¬ª (callback_data="deposit_start").
    –ü—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º—É.
    """
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "üí∏ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:", 
        reply_markup=nav_buttons()
    )
    return STEP_DEPOSIT_AMOUNT

async def process_deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö—Ä–æ–∫ STEP_DEPOSIT_AMOUNT: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —Å—É–º—É.
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π –ø—Ä–æ—Å–∏–º–æ –≤–∏–±—ñ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
    """
    text = update.message.text.strip()
    try:
        amount = float(text)
    except ValueError:
        await update.message.reply_text(
            "‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
            reply_markup=nav_buttons()
        )
        return STEP_DEPOSIT_AMOUNT

    context.user_data["deposit_amount"] = amount
    # –î–∞–ª—ñ ‚Äì –≤–∏–±—ñ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    await update.message.reply_text(
        "üé∞ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", 
        reply_markup=provider_buttons()
    )
    return STEP_DEPOSIT_PROVIDER

async def process_deposit_provider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö—Ä–æ–∫ STEP_DEPOSIT_PROVIDER: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –Ω–∞ –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    (callback_data == –Ω–∞–∑–≤–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "üèÜ CHAMPION").
    """
    await update.callback_query.answer()
    provider = update.callback_query.data
    context.user_data["deposit_provider"] = provider

    # –î–∞–ª—ñ ‚Äì –≤–∏–±—ñ—Ä –º–µ—Ç–æ–¥—É –æ–ø–ª–∞—Ç–∏
    await update.callback_query.message.reply_text(
        "üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:", 
        reply_markup=payment_buttons()
    )
    return STEP_DEPOSIT_PAYMENT

async def process_deposit_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö—Ä–æ–∫ STEP_DEPOSIT_PAYMENT: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ —Ç–µ–º—É –æ–ø–ª–∞—Ç (callback_data == "–ö–∞—Ä—Ç–∞" —á–∏ "–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑").
    """
    await update.callback_query.answer()
    payment_method = update.callback_query.data
    context.user_data["deposit_payment"] = payment_method

    # –î–∞–ª—ñ ‚Äì –ø—Ä–æ—Å–∏–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç —ñ–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
    await update.callback_query.message.reply_text(
        "üìé –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∞–±–æ –≤—ñ–¥–µ–æ):", 
        reply_markup=nav_buttons()
    )
    return STEP_DEPOSIT_FILE

async def process_deposit_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö—Ä–æ–∫ STEP_DEPOSIT_FILE: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—Å–∏–ª–∞—î —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–≤—ñ–¥–µ–æ.
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ file_id).
    –ü–æ—Ç—ñ–º –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —ñ–∑ –∫–Ω–æ–ø–∫–æ—é ‚Äú–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏‚Äù.
    """
    if update.message.photo:
        ftype = "photo"
        file_id = update.message.photo[-1].file_id
    elif update.message.document:
        ftype = "document"
        file_id = update.message.document.file_id
    elif update.message.video:
        ftype = "video"
        file_id = update.message.video.file_id
    else:
        await update.message.reply_text(
            "‚ùóÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∞–±–æ –≤—ñ–¥–µ–æ.",
            reply_markup=nav_buttons()
        )
        return STEP_DEPOSIT_FILE

    context.user_data["deposit_file_type"] = ftype
    context.user_data["deposit_file_id"]   = file_id

    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", 
                             callback_data=CB.DEPOSIT_CONFIRM.value)
    ]])
    await update.message.reply_text(
        "‚úÖ –î—è–∫—É—î–º–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏¬ª, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è.", 
        reply_markup=kb
    )
    return STEP_DEPOSIT_CONFIRM

async def confirm_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö—Ä–æ–∫ STEP_DEPOSIT_CONFIRM: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚Äú‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏‚Äù (callback_data="deposit_confirm").
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –ë–î —ñ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ, —â–æ —á–µ–∫–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
    """
    await update.callback_query.answer()
    user = update.effective_user

    # –ë–µ—Ä–µ–º–æ –≤—Å—é –ø–æ—Ç—Ä—ñ–±–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ context.user_data
    amount   = context.user_data.get("deposit_amount")
    provider = context.user_data.get("deposit_provider")
    payment  = context.user_data.get("deposit_payment")
    ftype    = context.user_data.get("deposit_file_type")
    file_id  = context.user_data.get("deposit_file_id")

    # –ü—Ä–∏–∫–ª–∞–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ SQLite (—Ç–∞–±–ª–∏—Ü—è deposits –º–∞—î –±—É—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —Ä–∞–Ω—ñ—à–µ)
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            "INSERT INTO deposits (user_id, username, amount, provider, payment_method, file_type, file_id) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (user.id, user.username, amount, provider, payment, ftype, file_id)
        )
        conn.commit()

    await update.callback_query.message.reply_text(
        "üí∏ –í–∞—à–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=nav_buttons()
    )
    return ConversationHandler.END

deposit_conv = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(deposit_start, pattern=f"^{CB.DEPOSIT_START.value}$")
    ],
    states={
        STEP_DEPOSIT_AMOUNT:   [MessageHandler(filters.TEXT & ~filters.COMMAND, process_deposit_amount)],
        STEP_DEPOSIT_PROVIDER: [CallbackQueryHandler(process_deposit_provider, pattern="^(" + "|".join(PROVIDERS) + ")$")],
        STEP_DEPOSIT_PAYMENT:  [CallbackQueryHandler(process_deposit_payment, pattern="^(" + "|".join(PAYMENTS) + ")$")],
        STEP_DEPOSIT_FILE:     [MessageHandler(filters.PHOTO | filters.Document.ALL | filters.VIDEO, process_deposit_file)],
        STEP_DEPOSIT_CONFIRM:  [CallbackQueryHandler(confirm_deposit, pattern=f"^{CB.DEPOSIT_CONFIRM.value}$")],
    },
    fallbacks=[
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.BACK.value}$"),
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.HOME.value}$"),
    ],
    per_chat=True,
)

def register_deposit_handlers(app: Application) -> None:
    """
    –†–µ—î—Å—Ç—Ä—É—î deposit_conv (ConversationHandler) —É –≥—Ä—É–ø—ñ 0.
    """
    app.add_handler(deposit_conv, group=0)
