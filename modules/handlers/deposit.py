# modules/handlers/deposit.py

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import (
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
    Application
)
from modules.config import DB_NAME
from modules.callbacks import CB
from modules.keyboards import nav_buttons, provider_buttons, payment_buttons, PROVIDERS, PAYMENTS
from modules.states import (
    STEP_DEPOSIT_AMOUNT,
    STEP_DEPOSIT_PROVIDER,
    STEP_DEPOSIT_PAYMENT,
    STEP_DEPOSIT_FILE,
    STEP_DEPOSIT_CONFIRM
)

# ‚îÄ‚îÄ‚îÄ –ú–ê–ü–Ü–ù–ì: –≤—ñ–¥ –Ω–∞–∑–≤, —è–∫—ñ –±–∞—á–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –¥–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤ ‚îÄ‚îÄ‚îÄ
PROVIDER_MAPPING = {
    "–°–¢–ê–†–ê –°–ò–°–¢–ï–ú–ê": "CHAMPION",
    "–ù–û–í–ê –°–ò–°–¢–ï–ú–ê":  "SUPEROMATIC"
}

async def deposit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚Äúüí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏‚Äù ‚Üí –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º—É.
    """
    await update.callback_query.answer()

    text = "üí∏ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:"
    sent = await update.callback_query.message.reply_text(
        text,
        reply_markup=nav_buttons()
    )
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_DEPOSIT_AMOUNT

async def process_deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    1) –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–≤—ñ–≤ —Å—É–º—É. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é —É float.
       - –Ø–∫—â–æ –Ω–µ–≤—ñ—Ä–Ω–æ ‚Üí –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É, –ª–∏—à–∞—î–º–æ—Å—è –≤ STEP_DEPOSIT_AMOUNT.
       - –Ü–Ω–∞–∫—à–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ amount —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
    2) –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ ‚Äúüé∞ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞‚Äù –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é provider_buttons().
    """
    text_in = update.message.text.strip()
    try:
        amount = float(text_in)
    except ValueError:
        base_id = context.user_data.get("base_msg_id")
        if base_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=base_id,
                    text="‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 100):",
                    reply_markup=nav_buttons()
                )
            except BadRequest as e:
                if "Message is not modified" not in str(e):
                    raise
        return STEP_DEPOSIT_AMOUNT

    context.user_data["deposit_amount"] = amount

    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text="üé∞ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:",
                reply_markup=provider_buttons()
            )
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                raise
    return STEP_DEPOSIT_PROVIDER

async def process_deposit_provider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    1) –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—É –Ω–∞–∑–≤—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ("–°–¢–ê–†–ê –°–ò–°–¢–ï–ú–ê" –∞–±–æ "–ù–û–í–ê –°–ò–°–¢–ï–ú–ê").
    2) –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –Ω–∞–∑–≤—É –∑–∞ PROVIDER_MAPPING:
         - "–°–¢–ê–†–ê –°–ò–°–¢–ï–ú–ê" ‚Üí "CHAMPION"
         - "–ù–û–í–ê –°–ò–°–¢–ï–ú–ê" ‚Üí "SUPEROMATIC"
    3) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ internal_provider —É user_data["deposit_provider"].
    4) –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ ‚Äúüí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:‚Äù.
    """
    await update.callback_query.answer()
    display_provider = update.callback_query.data  # "–°–¢–ê–†–ê –°–ò–°–¢–ï–ú–ê" –∞–±–æ "–ù–û–í–ê –°–ò–°–¢–ï–ú–ê"
    internal_provider = PROVIDER_MAPPING.get(display_provider, display_provider)

    context.user_data["deposit_provider"] = internal_provider

    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text="üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:",
                reply_markup=payment_buttons()
            )
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                raise
    return STEP_DEPOSIT_PAYMENT

async def process_deposit_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    1) –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ (callback_data ‚àà PAYMENTS).
    2) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ user_data["deposit_payment"].
    3) –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ ‚Äúüìé –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–≤—ñ–¥–µ–æ)‚Äù.
    """
    await update.callback_query.answer()
    payment_method = update.callback_query.data
    context.user_data["deposit_payment"] = payment_method

    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text="üìé –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∞–±–æ –≤—ñ–¥–µ–æ):",
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                raise
    return STEP_DEPOSIT_FILE

async def process_deposit_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    1) –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—Å–∏–ª–∞—î —Ñ–æ—Ç–æ / –¥–æ–∫—É–º–µ–Ω—Ç / –≤—ñ–¥–µ–æ.
       –ó–±–µ—Ä—ñ–≥–∞—î–º–æ file_type —Ç–∞ file_id.
    2) –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ ‚Äú‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏¬ª‚Äù —ñ–∑ –∫–Ω–æ–ø–∫–æ—é ‚Äúdeposit_confirm‚Äù.
    """
    if update.message.photo:
        ftype = "photo"
        file_id = update.message.photo[-1].file_id
    elif update.message.document:
        ftype = "document"
        file_id = update.message.document.file_id
    elif update.message.video:
        ftype = "video"
        file_id = update.message.video.file_id
    else:
        base_id = context.user_data.get("base_msg_id")
        if base_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=base_id,
                    text="‚ùóÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∞–±–æ –≤—ñ–¥–µ–æ:",
                    reply_markup=nav_buttons()
                )
            except BadRequest as e:
                if "Message is not modified" not in str(e):
                    raise
        return STEP_DEPOSIT_FILE

    context.user_data["deposit_file_type"] = ftype
    context.user_data["deposit_file_id"]   = file_id

    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=CB.DEPOSIT_CONFIRM.value)
    ]])
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text="‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏¬ª.",
                reply_markup=kb
            )
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                raise
    return STEP_DEPOSIT_CONFIRM

async def confirm_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    1) –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ ‚Äú‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏‚Äù (callback_data="deposit_confirm").
    2) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—é deposits —ñ–∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—é –Ω–∞–∑–≤–æ—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:
         (user_id, username, amount, provider, payment_method, file_type, file_id).
    3) –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ ‚Äúüí∏ –í–∞—à–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!‚Äù + nav_buttons().
    4) –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ü–µ–Ω–∞—Ä—ñ–π (ConversationHandler.END).
    """
    await update.callback_query.answer()
    user = update.effective_user

    amount   = context.user_data.get("deposit_amount")
    provider = context.user_data.get("deposit_provider")   # –≤–∂–µ ‚ÄúCHAMPION‚Äù –∞–±–æ ‚ÄúSUPEROMATIC‚Äù
    payment  = context.user_data.get("deposit_payment")
    ftype    = context.user_data.get("deposit_file_type")
    file_id  = context.user_data.get("deposit_file_id")

    with sqlite3.connect(DB_NAME) as conn:
        conn.execute(
            """
            INSERT INTO deposits 
              (user_id, username, amount, provider, payment_method, file_type, file_id)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            """,
            (user.id, user.username, amount, provider, payment, ftype, file_id)
        )
        conn.commit()

    base_id = context.user_data.get("base_msg_id")
    final_text = "üí∏ –í–∞—à–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=final_text,
                reply_markup=nav_buttons()
            )
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                raise

    context.user_data.pop("base_msg_id", None)
    return ConversationHandler.END

deposit_conv = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(deposit_start, pattern=f"^{CB.DEPOSIT_START.value}$")
    ],
    states={
        STEP_DEPOSIT_AMOUNT:   [MessageHandler(filters.TEXT & ~filters.COMMAND, process_deposit_amount)],
        STEP_DEPOSIT_PROVIDER: [CallbackQueryHandler(process_deposit_provider, pattern="^(" + "|".join(PROVIDERS) + ")$")],
        STEP_DEPOSIT_PAYMENT:  [CallbackQueryHandler(process_deposit_payment, pattern="^(" + "|".join(PAYMENTS) + ")$")],
        STEP_DEPOSIT_FILE:     [MessageHandler(filters.PHOTO | filters.Document.ALL | filters.VIDEO, process_deposit_file)],
        STEP_DEPOSIT_CONFIRM:  [CallbackQueryHandler(confirm_deposit, pattern=f"^{CB.DEPOSIT_CONFIRM.value}$")],
    },
    fallbacks=[
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.BACK.value}$"),
        CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.HOME.value}$"),
    ],
    per_chat=True,
)

def register_deposit_handlers(app: Application) -> None:
    """
    –†–µ–≥—ñ—Å—Ç—Ä—É—î ConversationHandler –¥–ª—è —Å—Ü–µ–Ω–∞—Ä—ñ—é –¥–µ–ø–æ–∑–∏—Ç—É (–≥—Ä—É–ø–∞ 0).
    """
    app.add_handler(deposit_conv, group=0)
