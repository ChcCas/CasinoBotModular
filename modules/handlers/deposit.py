# modules/handlers/deposit.py

import sqlite3, datetime
from telegram import Update
from telegram.ext import CallbackQueryHandler, MessageHandler, filters, ContextTypes
from modules.config import ADMIN_ID, DB_NAME
from keyboards import provider_buttons, payment_buttons, nav_buttons
from states import (
    STEP_PROVIDER, STEP_PAYMENT, STEP_DEPOSIT_AMOUNT,
    STEP_GUEST_DEPOSIT_FILE, STEP_GUEST_DEPOSIT_CONFIRM,
    STEP_MENU
)
from modules.db import get_user

def register_deposit_handlers(app):
    app.add_handler(CallbackQueryHandler(deposit_start, pattern="^deposit$"), group=0)
    app.add_handler(CallbackQueryHandler(guest_deposit_start, pattern="^guest_deposit$"), group=1)
    app.add_handler(CallbackQueryHandler(deposit_with_card_start, pattern="^deposit_with_card$"), group=1)
    app.add_handler(CallbackQueryHandler(deposit_process_provider, pattern="^(" + "|".join(PROVIDERS) + ")$"), group=2)
    app.add_handler(CallbackQueryHandler(deposit_process_payment, pattern="^(–ö–∞—Ä—Ç–∞|–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑)$"), group=3)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, deposit_process_amount), group=4)
    # –≥–æ—Å—Ç—å –±–µ–∑ –∫–∞—Ä—Ç–∏
    app.add_handler(MessageHandler(filters.Document.ALL|filters.PHOTO|filters.VIDEO, guest_deposit_file), group=5)
    app.add_handler(CallbackQueryHandler(guest_deposit_confirm, pattern="^confirm_guest$"), group=6)

async def deposit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:",
        reply_markup=deposit_menu(user_id)
    )
    return STEP_PROVIDER

async def guest_deposit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (—Å–∫—Ä—ñ–Ω—à–æ—Ç/—Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ):",
        reply_markup=nav_buttons()
    )
    return STEP_GUEST_DEPOSIT_FILE

async def guest_deposit_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["guest_file"] = update.message
    await update.message.reply_text(
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω—É:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="confirm_guest")]])
    )
    return STEP_GUEST_DEPOSIT_CONFIRM

async def guest_deposit_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    file_msg = context.user_data["guest_file"]
    timestamp = datetime.datetime.now().isoformat(sep=" ", timespec="seconds")

    text = (
        f"üéÆ –ì—ñ—Å—Ç—å ({user.full_name}, {user.id}) —Ö–æ—á–µ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–µ–∑ –∫–∞—Ä—Ç–∏\n"
        f"–ö–∞—Ä—Ç–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞: –°—Ç–∞–≤–∏—Ç–∏ –Ω–∞ –Ω–∞—à—É\n"
        f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: –ù/–î\n"
        f"üïí {timestamp}"
    )
    await file_msg.copy_to(ADMIN_ID, caption=text)
    await update.callback_query.message.reply_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞.", reply_markup=nav_buttons())
    return STEP_MENU

async def deposit_with_card_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –ø–æ—Ç—ñ–∫
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:",
        reply_markup=deposit_menu(update.effective_user.id)
    )
    return STEP_PROVIDER

async def deposit_process_provider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["provider"] = update.callback_query.data
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
        reply_markup=payment_buttons()
    )
    return STEP_PAYMENT

async def deposit_process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["payment"] = update.callback_query.data
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:",
        reply_markup=nav_buttons()
    )
    return STEP_DEPOSIT_AMOUNT

async def deposit_process_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit() or int(text) <= 0:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞.", reply_markup=nav_buttons())
        return STEP_DEPOSIT_AMOUNT

    amount = text
    user = get_user(update.effective_user.id)
    card = user[1] if user else "–ù/–î"
    provider = context.user_data["provider"]
    payment  = context.user_data["payment"]
    time_str = datetime.datetime.now().isoformat(sep=" ", timespec="seconds")

    text = (
        f"üÜï –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥ {update.effective_user.full_name} ({update.effective_user.id}):\n"
        f"–ö–∞—Ä—Ç–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞: {card}\n"
        f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}\n"
        f"–û–ø–ª–∞—Ç–∞: {payment}\n"
        f"–°—É–º–∞: {amount}\n"
        f"üïí {time_str}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=text)
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—É.", reply_markup=nav_buttons())
    return STEP_MENU
