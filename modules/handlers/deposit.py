import re
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import (
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    Application
)
from modules.config import DB_NAME
from modules.keyboards import nav_buttons, provider_buttons, payment_buttons
from modules.callbacks import CB
from modules.states import (
    STEP_DEPOSIT_AMOUNT,
    STEP_DEPOSIT_PROVIDER,
    STEP_DEPOSIT_PAYMENT,
    STEP_DEPOSIT_FILE,
    STEP_DEPOSIT_CONFIRM,
)
from datetime import datetime

async def start_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—Ö—ñ–¥ —É —Å—Ü–µ–Ω–∞—Ä—ñ–π ¬´–ü–æ–ø–æ–≤–Ω–∏—Ç–∏¬ª (callback_data="deposit_start").
    –ü–∏—Ç–∞—î–º–æ —Å—É–º—É.
    """
    await update.callback_query.answer()
    text = "üí∏ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:"
    sent = await update.callback_query.message.reply_text(text, reply_markup=nav_buttons())
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_DEPOSIT_AMOUNT

async def process_deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–ª—ñ—î–Ω—Ç –≤–≤–æ–¥–∏—Ç—å —Å—É–º—É.
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
    """
    try:
        amount = float(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É:", reply_markup=nav_buttons())
        return STEP_DEPOSIT_AMOUNT

    context.user_data["amount"] = amount
    text = "üé∞ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:"
    sent = await update.message.reply_text(text, reply_markup=provider_buttons())
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_DEPOSIT_PROVIDER

async def process_deposit_provider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–ª—ñ—î–Ω—Ç –æ–±–∏—Ä–∞—î –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (‚Äú–°–¢–ê–†–ê –°–ò–°–¢–ï–ú–ê‚Äù –∞–±–æ ‚Äú–ù–û–í–ê –°–ò–°–¢–ï–ú–ê‚Äù).
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –º–µ—Ç–æ–¥—É –æ–ø–ª–∞—Ç–∏.
    """
    provider = update.callback_query.data  # —Ç—É—Ç ‚Äú–°–¢–ê–†–ê –°–ò–°–¢–ï–ú–ê‚Äù –∞–±–æ ‚Äú–ù–û–í–ê –°–ò–°–¢–ï–ú–ê‚Äù
    context.user_data["provider"] = provider
    await update.callback_query.answer()

    text = "üí≥ –û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:"
    sent = await update.callback_query.message.reply_text(text, reply_markup=payment_buttons())
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_DEPOSIT_PAYMENT

async def process_deposit_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–ª—ñ—î–Ω—Ç –æ–±–∏—Ä–∞—î –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ (‚Äú–ö–∞—Ä—Ç–∞‚Äù –∞–±–æ ‚Äú–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑‚Äù).
    –ü–∏—Ç–∞—î–º–æ —Å—É–º—É —â–µ —Ä–∞–∑ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏), 
    –∞–ª–µ –º–∏ –≤–∂–µ –º–∞—î–º–æ —Å—É–º—É, —Ç–æ–º—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å—Ç–æ –¥–æ –∑–∞–ø–∏—Ç—É —Ñ–∞–π–ª—É.
    """
    payment = update.callback_query.data
    context.user_data["payment"] = payment
    await update.callback_query.answer()

    text = "üìé –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∞–±–æ –≤—ñ–¥–µ–æ):"
    sent = await update.callback_query.message.reply_text(text, reply_markup=nav_buttons())
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_DEPOSIT_FILE

async def process_deposit_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–ª—ñ—î–Ω—Ç –Ω–∞–¥—Å–∏–ª–∞—î —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–≤—ñ–¥–µ–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
    """
    # –ú–∏ –ø—Ä–æ—Å—Ç–æ –∑–±–µ—Ä–µ–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É, –∞ –ø–æ—Ç—ñ–º –≤—Å—Ç–∞–≤–∏–º–æ —É –ë–î
    if update.message.photo:
        ftype = "photo"
    elif update.message.document:
        ftype = "document"
    elif update.message.video:
        ftype = "video"
    else:
        ftype = "unknown"

    context.user_data["file_type"] = ftype

    kb = [
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=CB.DEPOSIT_CONFIRM.value)],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥",       callback_data=CB.BACK.value)],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=CB.HOME.value)],
    ]
    text = "‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏:"
    sent = await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(kb))
    context.user_data["base_msg_id"] = sent.message_id
    return STEP_DEPOSIT_CONFIRM

async def confirm_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–ª—ñ—î–Ω—Ç –Ω–∞—Ç–∏—Å–∫–∞—î ¬´‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏¬ª —Ñ—ñ–Ω–∞–ª—å–Ω—É –∫–Ω–æ–ø–∫—É.
    –ú–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ —Ç–∞–±–ª–∏—Ü—ñ transactions.
    """
    await update.callback_query.answer()
    user = update.effective_user
    user_id = user.id
    username = user.username or ""
    card = context.user_data.get("amount")   # –ø—Ä–∏–º—ñ—Ä–æ–º, –∑–±–µ—Ä–µ–≥–ª–∏ —Å—É–º—É
    provider = context.user_data.get("provider")
    payment = context.user_data.get("payment")
    amount = context.user_data.get("amount")
    ftype = context.user_data.get("file_type")
    now = datetime.utcnow().isoformat()

    # –ó–∞–ø–∏—Å—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO transactions (user_id, type, amount, info, timestamp) VALUES (?, ?, ?, ?, ?)",
        (user_id, "deposit", amount, f"{provider}/{payment}", now)
    )
    conn.commit()
    conn.close()

    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞:
    text = "üí∏ –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
    keyboard = client_menu(is_authorized=True)
    base_id = context.user_data.get("base_msg_id")
    if base_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=base_id,
                text=text,
                reply_markup=keyboard
            )
        except BadRequest as e:
            if "Message to edit not found" in str(e) or "Message is not modified" in str(e):
                sent = await update.callback_query.message.reply_text(text, reply_markup=keyboard)
                context.user_data["base_msg_id"] = sent.message_id
            else:
                raise
    else:
        sent = await update.callback_query.message.reply_text(text, reply_markup=keyboard)
        context.user_data["base_msg_id"] = sent.message_id

    context.user_data.pop("base_msg_id", None)
    return ConversationHandler.END

def register_deposit_handlers(app: Application) -> None:
    deposit_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_deposit, pattern=f"^{CB.DEPOSIT_START.value}$")
        ],
        states={
            STEP_DEPOSIT_AMOUNT:   [MessageHandler(filters.TEXT & ~filters.COMMAND, process_deposit_amount)],
            STEP_DEPOSIT_PROVIDER: [CallbackQueryHandler(process_deposit_provider, pattern="^(–°–¢–ê–†–ê –°–ò–°–¢–ï–ú–ê|–ù–û–í–ê –°–ò–°–¢–ï–ú–ê)$")],
            STEP_DEPOSIT_PAYMENT:  [CallbackQueryHandler(process_deposit_payment, pattern="^(–ö–∞—Ä—Ç–∞|–ö—Ä–∏–ø—Ç–æ–ø–µ—Ä–µ–∫–∞–∑)$")],
            STEP_DEPOSIT_FILE:     [MessageHandler(filters.PHOTO | filters.Document.ALL | filters.VIDEO, process_deposit_file)],
            STEP_DEPOSIT_CONFIRM:  [CallbackQueryHandler(confirm_deposit, pattern=f"^{CB.DEPOSIT_CONFIRM.value}$")],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.BACK.value}$"),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=f"^{CB.HOME.value}$"),
        ],
        per_chat=True,
    )
    app.add_handler(deposit_conv, group=0)
