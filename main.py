import os
import sqlite3
from telegram.ext import ApplicationBuilder

from modules.config import TOKEN, WEBHOOK_URL, PORT
from modules.handlers.start import register_start_handler
from modules.handlers.navigation import register_navigation_handlers
from modules.handlers.registration import register_registration_handlers
from modules.handlers.profile import register_profile_handlers
from modules.handlers.deposit import register_deposit_handlers
from modules.handlers.withdraw import register_withdraw_handlers
from modules.handlers.admin import register_admin_handlers

DB_NAME = os.getenv("DB_NAME", "bot_data.db")

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î ===
with sqlite3.connect(DB_NAME) as conn:
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            phone TEXT,
            card TEXT,
            is_registered INTEGER DEFAULT 0
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS registrations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            name TEXT,
            phone TEXT,
            card TEXT,
            status TEXT DEFAULT 'pending',
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS deposits (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            card TEXT,
            provider TEXT,
            payment TEXT,
            file_type TEXT,
            amount TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS withdrawals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            amount TEXT,
            method TEXT,
            details TEXT,
            source_code TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS threads (
            user_id INTEGER PRIMARY KEY,
            base_msg_id INTEGER
        )
    """)
    conn.commit()

# === –°—Ç–≤–æ—Ä—é—î–º–æ –∞–ø–ª—ñ–∫–∞—Ü—ñ—é ===
app = ApplicationBuilder().token(TOKEN).build()

# === –†–µ–≥—ñ—Å—Ç—Ä—É—î–º–æ –í–°–Ü —Ö–µ–Ω–¥–ª–µ—Ä–∏ –≤ –ø–æ—Ä—è–¥–∫—É:
register_start_handler(app)              # /start  + ¬´üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é¬ª
register_navigation_handlers(app)        # ¬´‚óÄÔ∏è –ù–∞–∑–∞–¥¬ª + ¬´üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é¬ª
register_registration_handlers(app)      # –∫–Ω–æ–ø–∫–∞ ¬´–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è¬ª
register_profile_handlers(app)           # ¬´–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å¬ª + ¬´–î—ñ–∑–Ω–∞—Ç–∏—Å—è –∫–∞—Ä—Ç–∫—É¬ª
register_deposit_handlers(app)           # ¬´–ü–æ–ø–æ–≤–Ω–∏—Ç–∏¬ª
register_withdraw_handlers(app)          # ¬´–í–∏–≤—ñ–¥ –∫–æ—à—Ç—ñ–≤¬ª
register_admin_handlers(app)             # –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å

# === –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook ===
if __name__ == "__main__":
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="/webhook",
        webhook_url=WEBHOOK_URL
    )